~ ssh -i ~/.ssh/gcp_key serhieiev@34.76.57.243                                                                                              (-127) ↵
The authenticity of host '34.76.57.243 (34.76.57.243)' can't be established.
ED25519 key fingerprint is SHA256:Tf5Bbbh63R0g2f8pR0PtzorzB+fJ0e1GhqHsSR7h8jY.
This key is not known by any other names
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
Warning: Permanently added '34.76.57.243' (ED25519) to the list of known hosts.
Welcome to Ubuntu 20.04.5 LTS (GNU/Linux 5.15.0-1027-gcp x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

  System information as of Wed Feb  8 18:41:14 UTC 2023

  System load:  0.19              Processes:             125
  Usage of /:   5.5% of 33.74GB   Users logged in:       0
  Memory usage: 3%                IPv4 address for ens4: 10.132.0.6
  Swap usage:   0%

0 updates can be applied immediately.


The list of available updates is more than a week old.
To check for new updates run: sudo apt update


The programs included with the Ubuntu system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by
applicable law.

serhieiev@k8s:~$

~/DevOps/kubespray release-2.20 ansible-playbook -i inventory/mycluster/inventory.ini --become --user=serhieiev --become-user=root cluster.yml --key-file "~/.ssh/gcp_key"
[WARNING]: Skipping callback plugin 'ara_default', unable to load

PLAY [localhost] *******************************************************************************************************************************************
Wednesday 08 February 2023  20:47:16 +0200 (0:00:00.038)       0:00:00.038 ****

TASK [Check 2.11.0 <= Ansible version < 2.13.0] ************************************************************************************************************
ok: [localhost] => {
    "changed": false,
    "msg": "All assertions passed"
}
Wednesday 08 February 2023  20:47:16 +0200 (0:00:00.044)       0:00:00.082 ****

TASK [Check that python netaddr is installed] **************************************************************************************************************
ok: [localhost] => {
    "changed": false,
    "msg": "All assertions passed"
}
Wednesday 08 February 2023  20:47:16 +0200 (0:00:00.129)       0:00:00.212 ****

TASK [Check that jinja is not too old (install via pip)] ***************************************************************************************************
ok: [localhost] => {
    "changed": false,
    "msg": "All assertions passed"
}
[WARNING]: Could not match supplied host pattern, ignoring: kube-master

PLAY [Add kube-master nodes to kube_control_plane] *********************************************************************************************************
skipping: no hosts matched
[WARNING]: Could not match supplied host pattern, ignoring: kube-node

PLAY [Add kube-node nodes to kube_node] ********************************************************************************************************************
skipping: no hosts matched
[WARNING]: Could not match supplied host pattern, ignoring: k8s-cluster

PLAY [Add k8s-cluster nodes to k8s_cluster] ****************************************************************************************************************
skipping: no hosts matched
[WARNING]: Could not match supplied host pattern, ignoring: calico-rr

PLAY [Add calico-rr nodes to calico_rr] ********************************************************************************************************************
skipping: no hosts matched
[WARNING]: Could not match supplied host pattern, ignoring: no-floating

PLAY [Add no-floating nodes to no_floating] ****************************************************************************************************************
skipping: no hosts matched
[WARNING]: Could not match supplied host pattern, ignoring: bastion

PLAY [bastion[0]] ******************************************************************************************************************************************
skipping: no hosts matched

PLAY [k8s_cluster:etcd] ************************************************************************************************************************************
Wednesday 08 February 2023  20:47:16 +0200 (0:00:00.090)       0:00:00.303 ****
Wednesday 08 February 2023  20:47:16 +0200 (0:00:00.044)       0:00:00.347 ****
Wednesday 08 February 2023  20:47:16 +0200 (0:00:00.046)       0:00:00.394 ****
Wednesday 08 February 2023  20:47:16 +0200 (0:00:00.041)       0:00:00.435 ****
Wednesday 08 February 2023  20:47:16 +0200 (0:00:00.040)       0:00:00.476 ****
Wednesday 08 February 2023  20:47:16 +0200 (0:00:00.041)       0:00:00.517 ****
Wednesday 08 February 2023  20:47:16 +0200 (0:00:00.044)       0:00:00.562 ****
Wednesday 08 February 2023  20:47:16 +0200 (0:00:00.050)       0:00:00.612 ****
Wednesday 08 February 2023  20:47:17 +0200 (0:00:00.040)       0:00:00.652 ****
Wednesday 08 February 2023  20:47:17 +0200 (0:00:00.041)       0:00:00.694 ****
Wednesday 08 February 2023  20:47:17 +0200 (0:00:00.068)       0:00:00.763 ****

TASK [kubespray-defaults : Configure defaults] *************************************************************************************************************
ok: [node1] => {
    "msg": "Check roles/kubespray-defaults/defaults/main.yml"
}
Wednesday 08 February 2023  20:47:17 +0200 (0:00:00.053)       0:00:00.816 ****
Wednesday 08 February 2023  20:47:17 +0200 (0:00:00.055)       0:00:00.871 ****
Wednesday 08 February 2023  20:47:17 +0200 (0:00:00.028)       0:00:00.900 ****
Wednesday 08 February 2023  20:47:17 +0200 (0:00:00.034)       0:00:00.934 ****
Wednesday 08 February 2023  20:47:17 +0200 (0:00:00.028)       0:00:00.963 ****
Wednesday 08 February 2023  20:47:17 +0200 (0:00:00.029)       0:00:00.993 ****
Wednesday 08 February 2023  20:47:17 +0200 (0:00:00.043)       0:00:01.036 ****
[WARNING]: raw module does not support the environment keyword

TASK [bootstrap-os : Fetch /etc/os-release] ****************************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:47:18 +0200 (0:00:01.339)       0:00:02.375 ****
Wednesday 08 February 2023  20:47:18 +0200 (0:00:00.031)       0:00:02.407 ****
Wednesday 08 February 2023  20:47:18 +0200 (0:00:00.030)       0:00:02.437 ****
Wednesday 08 February 2023  20:47:18 +0200 (0:00:00.027)       0:00:02.465 ****
Wednesday 08 February 2023  20:47:18 +0200 (0:00:00.031)       0:00:02.496 ****
Wednesday 08 February 2023  20:47:18 +0200 (0:00:00.030)       0:00:02.526 ****
Wednesday 08 February 2023  20:47:18 +0200 (0:00:00.029)       0:00:02.555 ****

TASK [bootstrap-os : include_tasks] ************************************************************************************************************************
included: /Users/max/DevOps/kubespray/roles/bootstrap-os/tasks/bootstrap-debian.yml for node1
Wednesday 08 February 2023  20:47:18 +0200 (0:00:00.051)       0:00:02.607 ****
[WARNING]: raw module does not support the environment keyword

TASK [bootstrap-os : Check if bootstrap is needed] *********************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:47:19 +0200 (0:00:00.185)       0:00:02.792 ****
[WARNING]: raw module does not support the environment keyword

TASK [bootstrap-os : Check http::proxy in apt configuration files] *****************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:47:19 +0200 (0:00:00.195)       0:00:02.988 ****
Wednesday 08 February 2023  20:47:19 +0200 (0:00:00.035)       0:00:03.023 ****
[WARNING]: raw module does not support the environment keyword

TASK [bootstrap-os : Check https::proxy in apt configuration files] ****************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:47:19 +0200 (0:00:00.209)       0:00:03.233 ****
Wednesday 08 February 2023  20:47:19 +0200 (0:00:00.033)       0:00:03.266 ****
Wednesday 08 February 2023  20:47:19 +0200 (0:00:00.029)       0:00:03.296 ****
Wednesday 08 February 2023  20:47:19 +0200 (0:00:00.029)       0:00:03.326 ****

TASK [bootstrap-os : Set the ansible_python_interpreter fact] **********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:47:19 +0200 (0:00:00.056)       0:00:03.382 ****

TASK [bootstrap-os : Install dbus for the hostname module] *************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:47:22 +0200 (0:00:02.333)       0:00:05.715 ****
Wednesday 08 February 2023  20:47:22 +0200 (0:00:00.029)       0:00:05.745 ****
Wednesday 08 February 2023  20:47:22 +0200 (0:00:00.030)       0:00:05.775 ****

TASK [bootstrap-os : Create remote_tmp for it is used by another module] ***********************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:47:23 +0200 (0:00:01.668)       0:00:07.444 ****

TASK [bootstrap-os : Gather host facts to get ansible_os_family] *******************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:47:26 +0200 (0:00:02.438)       0:00:09.882 ****

TASK [bootstrap-os : Assign inventory name to unconfigured hostnames (non-CoreOS, non-Flatcar, Suse and ClearLinux, non-Fedora)] ***************************
changed: [node1]
Wednesday 08 February 2023  20:47:28 +0200 (0:00:02.466)       0:00:12.349 ****
Wednesday 08 February 2023  20:47:28 +0200 (0:00:00.031)       0:00:12.381 ****
Wednesday 08 February 2023  20:47:28 +0200 (0:00:00.032)       0:00:12.413 ****
Wednesday 08 February 2023  20:47:28 +0200 (0:00:00.041)       0:00:12.455 ****

TASK [bootstrap-os : Ensure bash_completion.d folder exists] ***********************************************************************************************
ok: [node1]

PLAY [Gather facts] ****************************************************************************************************************************************
Wednesday 08 February 2023  20:47:31 +0200 (0:00:02.283)       0:00:14.739 ****

TASK [Gather minimal facts] ********************************************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:47:33 +0200 (0:00:02.027)       0:00:16.766 ****

TASK [Gather necessary facts (network)] ********************************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:47:34 +0200 (0:00:01.829)       0:00:18.595 ****

TASK [Gather necessary facts (hardware)] *******************************************************************************************************************
ok: [node1]

PLAY [k8s_cluster:etcd] ************************************************************************************************************************************
Wednesday 08 February 2023  20:47:37 +0200 (0:00:02.301)       0:00:20.897 ****
Wednesday 08 February 2023  20:47:37 +0200 (0:00:00.049)       0:00:20.946 ****
Wednesday 08 February 2023  20:47:37 +0200 (0:00:00.050)       0:00:20.997 ****
Wednesday 08 February 2023  20:47:37 +0200 (0:00:00.043)       0:00:21.041 ****
Wednesday 08 February 2023  20:47:37 +0200 (0:00:00.044)       0:00:21.085 ****
Wednesday 08 February 2023  20:47:37 +0200 (0:00:00.044)       0:00:21.129 ****
Wednesday 08 February 2023  20:47:37 +0200 (0:00:00.044)       0:00:21.174 ****
Wednesday 08 February 2023  20:47:37 +0200 (0:00:00.050)       0:00:21.225 ****
Wednesday 08 February 2023  20:47:37 +0200 (0:00:00.048)       0:00:21.274 ****
Wednesday 08 February 2023  20:47:37 +0200 (0:00:00.044)       0:00:21.318 ****
Wednesday 08 February 2023  20:47:38 +0200 (0:00:00.876)       0:00:22.195 ****

TASK [kubespray-defaults : Configure defaults] *************************************************************************************************************
ok: [node1] => {
    "msg": "Check roles/kubespray-defaults/defaults/main.yml"
}
Wednesday 08 February 2023  20:47:38 +0200 (0:00:00.061)       0:00:22.256 ****
Wednesday 08 February 2023  20:47:38 +0200 (0:00:00.092)       0:00:22.349 ****

TASK [kubespray-defaults : create fallback_ips_base] *******************************************************************************************************
ok: [node1 -> localhost]
Wednesday 08 February 2023  20:47:38 +0200 (0:00:00.069)       0:00:22.418 ****

TASK [kubespray-defaults : set fallback_ips] ***************************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:47:38 +0200 (0:00:00.072)       0:00:22.491 ****
Wednesday 08 February 2023  20:47:38 +0200 (0:00:00.042)       0:00:22.534 ****
Wednesday 08 February 2023  20:47:38 +0200 (0:00:00.042)       0:00:22.576 ****
Wednesday 08 February 2023  20:47:38 +0200 (0:00:00.048)       0:00:22.625 ****

TASK [adduser : User | Create User Group] ******************************************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:47:40 +0200 (0:00:01.651)       0:00:24.276 ****

TASK [adduser : User | Create User] ************************************************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:47:42 +0200 (0:00:02.015)       0:00:26.291 ****

TASK [kubernetes/preinstall : Remove swapfile from /etc/fstab] *********************************************************************************************
ok: [node1] => (item=swap)
ok: [node1] => (item=none)
Wednesday 08 February 2023  20:47:46 +0200 (0:00:03.377)       0:00:29.669 ****

TASK [kubernetes/preinstall : check swap] ******************************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:47:47 +0200 (0:00:01.687)       0:00:31.357 ****
Wednesday 08 February 2023  20:47:47 +0200 (0:00:00.038)       0:00:31.395 ****
Wednesday 08 February 2023  20:47:47 +0200 (0:00:00.036)       0:00:31.431 ****

TASK [kubernetes/preinstall : Stop if either kube_control_plane or kube_node group is empty] ***************************************************************
ok: [node1] => (item=kube_control_plane) => {
    "ansible_loop_var": "item",
    "changed": false,
    "item": "kube_control_plane",
    "msg": "All assertions passed"
}
ok: [node1] => (item=kube_node) => {
    "ansible_loop_var": "item",
    "changed": false,
    "item": "kube_node",
    "msg": "All assertions passed"
}
Wednesday 08 February 2023  20:47:47 +0200 (0:00:00.096)       0:00:31.528 ****

TASK [kubernetes/preinstall : Stop if etcd group is empty in external etcd mode] ***************************************************************************
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
Wednesday 08 February 2023  20:47:47 +0200 (0:00:00.070)       0:00:31.599 ****

TASK [kubernetes/preinstall : Stop if non systemd OS type] *************************************************************************************************
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
Wednesday 08 February 2023  20:47:48 +0200 (0:00:00.065)       0:00:31.664 ****

TASK [kubernetes/preinstall : Stop if unknown OS] **********************************************************************************************************
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
Wednesday 08 February 2023  20:47:48 +0200 (0:00:00.068)       0:00:31.733 ****

TASK [kubernetes/preinstall : Stop if unknown network plugin] **********************************************************************************************
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
Wednesday 08 February 2023  20:47:48 +0200 (0:00:00.069)       0:00:31.803 ****

TASK [kubernetes/preinstall : Stop if unsupported version of Kubernetes] ***********************************************************************************
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
Wednesday 08 February 2023  20:47:48 +0200 (0:00:00.066)       0:00:31.869 ****

TASK [kubernetes/preinstall : Stop if known booleans are set as strings (Use JSON format on CLI: -e "{'key': true }")] *************************************
ok: [node1] => (item={'name': 'download_run_once', 'value': False}) => {
    "ansible_loop_var": "item",
    "changed": false,
    "item": {
        "name": "download_run_once",
        "value": false
    },
    "msg": "All assertions passed"
}
ok: [node1] => (item={'name': 'deploy_netchecker', 'value': False}) => {
    "ansible_loop_var": "item",
    "changed": false,
    "item": {
        "name": "deploy_netchecker",
        "value": false
    },
    "msg": "All assertions passed"
}
ok: [node1] => (item={'name': 'download_always_pull', 'value': False}) => {
    "ansible_loop_var": "item",
    "changed": false,
    "item": {
        "name": "download_always_pull",
        "value": false
    },
    "msg": "All assertions passed"
}
ok: [node1] => (item={'name': 'helm_enabled', 'value': False}) => {
    "ansible_loop_var": "item",
    "changed": false,
    "item": {
        "name": "helm_enabled",
        "value": false
    },
    "msg": "All assertions passed"
}
ok: [node1] => (item={'name': 'openstack_lbaas_enabled', 'value': False}) => {
    "ansible_loop_var": "item",
    "changed": false,
    "item": {
        "name": "openstack_lbaas_enabled",
        "value": false
    },
    "msg": "All assertions passed"
}
Wednesday 08 February 2023  20:47:48 +0200 (0:00:00.139)       0:00:32.008 ****

TASK [kubernetes/preinstall : Stop if even number of etcd hosts] *******************************************************************************************
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
Wednesday 08 February 2023  20:47:48 +0200 (0:00:00.067)       0:00:32.076 ****

TASK [kubernetes/preinstall : Stop if memory is too small for masters] *************************************************************************************
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
Wednesday 08 February 2023  20:47:48 +0200 (0:00:00.066)       0:00:32.143 ****

TASK [kubernetes/preinstall : Stop if memory is too small for nodes] ***************************************************************************************
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
Wednesday 08 February 2023  20:47:48 +0200 (0:00:00.065)       0:00:32.208 ****
Wednesday 08 February 2023  20:47:48 +0200 (0:00:00.046)       0:00:32.255 ****
Wednesday 08 February 2023  20:47:48 +0200 (0:00:00.042)       0:00:32.298 ****
Wednesday 08 February 2023  20:47:48 +0200 (0:00:00.042)       0:00:32.340 ****
Wednesday 08 February 2023  20:47:48 +0200 (0:00:00.044)       0:00:32.384 ****
Wednesday 08 February 2023  20:47:48 +0200 (0:00:00.033)       0:00:32.417 ****
Wednesday 08 February 2023  20:47:48 +0200 (0:00:00.043)       0:00:32.460 ****
Wednesday 08 February 2023  20:47:48 +0200 (0:00:00.046)       0:00:32.507 ****

TASK [kubernetes/preinstall : Stop if bad hostname] ********************************************************************************************************
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
Wednesday 08 February 2023  20:47:48 +0200 (0:00:00.064)       0:00:32.572 ****
Wednesday 08 February 2023  20:47:48 +0200 (0:00:00.042)       0:00:32.615 ****

TASK [kubernetes/preinstall : Check that kube_service_addresses is a network range] ************************************************************************
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
Wednesday 08 February 2023  20:47:49 +0200 (0:00:00.121)       0:00:32.736 ****

TASK [kubernetes/preinstall : Check that kube_pods_subnet is a network range] ******************************************************************************
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
Wednesday 08 February 2023  20:47:49 +0200 (0:00:00.118)       0:00:32.855 ****

TASK [kubernetes/preinstall : Check that kube_pods_subnet does not collide with kube_service_addresses] ****************************************************
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
Wednesday 08 February 2023  20:47:49 +0200 (0:00:00.118)       0:00:32.973 ****

TASK [kubernetes/preinstall : Check that IP range is enough for the nodes] *********************************************************************************
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
Wednesday 08 February 2023  20:47:49 +0200 (0:00:00.121)       0:00:33.095 ****

TASK [kubernetes/preinstall : Stop if unknown dns mode] ****************************************************************************************************
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
Wednesday 08 February 2023  20:47:49 +0200 (0:00:00.065)       0:00:33.161 ****

TASK [kubernetes/preinstall : Stop if unknown kube proxy mode] *********************************************************************************************
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
Wednesday 08 February 2023  20:47:49 +0200 (0:00:00.068)       0:00:33.230 ****

TASK [kubernetes/preinstall : Stop if unknown cert_management] *********************************************************************************************
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
Wednesday 08 February 2023  20:47:49 +0200 (0:00:00.065)       0:00:33.295 ****

TASK [kubernetes/preinstall : Stop if unknown resolvconf_mode] *********************************************************************************************
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
Wednesday 08 February 2023  20:47:49 +0200 (0:00:00.064)       0:00:33.360 ****

TASK [kubernetes/preinstall : Stop if etcd deployment type is not host, docker or kubeadm] *****************************************************************
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
Wednesday 08 February 2023  20:47:49 +0200 (0:00:00.064)       0:00:33.424 ****

TASK [kubernetes/preinstall : Stop if container manager is not docker, crio or containerd] *****************************************************************
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
Wednesday 08 February 2023  20:47:49 +0200 (0:00:00.063)       0:00:33.487 ****

TASK [kubernetes/preinstall : Stop if etcd deployment type is not host or kubeadm when container_manager != docker] ****************************************
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
Wednesday 08 February 2023  20:47:49 +0200 (0:00:00.066)       0:00:33.553 ****
Wednesday 08 February 2023  20:47:49 +0200 (0:00:00.041)       0:00:33.595 ****
Wednesday 08 February 2023  20:47:50 +0200 (0:00:00.040)       0:00:33.635 ****
Wednesday 08 February 2023  20:47:50 +0200 (0:00:00.033)       0:00:33.669 ****
Wednesday 08 February 2023  20:47:50 +0200 (0:00:00.034)       0:00:33.703 ****
Wednesday 08 February 2023  20:47:50 +0200 (0:00:00.038)       0:00:33.742 ****
Wednesday 08 February 2023  20:47:50 +0200 (0:00:00.036)       0:00:33.778 ****

TASK [kubernetes/preinstall : Ensure minimum containerd version] *******************************************************************************************
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
Wednesday 08 February 2023  20:47:50 +0200 (0:00:00.068)       0:00:33.847 ****
Wednesday 08 February 2023  20:47:50 +0200 (0:00:00.042)       0:00:33.889 ****
Wednesday 08 February 2023  20:47:50 +0200 (0:00:00.034)       0:00:33.924 ****
Wednesday 08 February 2023  20:47:50 +0200 (0:00:00.032)       0:00:33.957 ****
Wednesday 08 February 2023  20:47:50 +0200 (0:00:00.034)       0:00:33.991 ****

TASK [kubernetes/preinstall : check if booted with ostree] *************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:47:52 +0200 (0:00:02.295)       0:00:36.286 ****

TASK [kubernetes/preinstall : set is_fedora_coreos] ********************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:47:54 +0200 (0:00:01.883)       0:00:38.169 ****

TASK [kubernetes/preinstall : set is_fedora_coreos] ********************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:47:54 +0200 (0:00:00.062)       0:00:38.232 ****

TASK [kubernetes/preinstall : check resolvconf] ************************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:47:56 +0200 (0:00:01.818)       0:00:40.050 ****

TASK [kubernetes/preinstall : check existence of /etc/resolvconf/resolv.conf.d] ****************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:47:57 +0200 (0:00:01.469)       0:00:41.519 ****

TASK [kubernetes/preinstall : check status of /etc/resolv.conf] ********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:47:59 +0200 (0:00:01.473)       0:00:42.993 ****

TASK [kubernetes/preinstall : get content of /etc/resolv.conf] *********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:48:01 +0200 (0:00:01.840)       0:00:44.833 ****

TASK [kubernetes/preinstall : get currently configured nameservers] ****************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:48:01 +0200 (0:00:00.118)       0:00:44.952 ****

TASK [kubernetes/preinstall : NetworkManager | Check if host has NetworkManager] ***************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:48:02 +0200 (0:00:01.403)       0:00:46.356 ****

TASK [kubernetes/preinstall : check systemd-resolved] ******************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:48:04 +0200 (0:00:01.373)       0:00:47.730 ****

TASK [kubernetes/preinstall : set default dns if remove_default_searchdomains is false] ********************************************************************
ok: [node1]
Wednesday 08 February 2023  20:48:04 +0200 (0:00:00.066)       0:00:47.796 ****

TASK [kubernetes/preinstall : set dns facts] ***************************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:48:04 +0200 (0:00:00.067)       0:00:47.863 ****

TASK [kubernetes/preinstall : check if kubelet is configured] **********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:48:05 +0200 (0:00:01.378)       0:00:49.242 ****

TASK [kubernetes/preinstall : check if early DNS configuration stage] **************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:48:05 +0200 (0:00:00.060)       0:00:49.302 ****

TASK [kubernetes/preinstall : target resolv.conf files] ****************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:48:05 +0200 (0:00:00.064)       0:00:49.367 ****
Wednesday 08 February 2023  20:48:05 +0200 (0:00:00.035)       0:00:49.402 ****

TASK [kubernetes/preinstall : check if /etc/dhclient.conf exists] ******************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:48:07 +0200 (0:00:01.317)       0:00:50.720 ****
Wednesday 08 February 2023  20:48:07 +0200 (0:00:00.033)       0:00:50.754 ****

TASK [kubernetes/preinstall : check if /etc/dhcp/dhclient.conf exists] *************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:48:08 +0200 (0:00:01.312)       0:00:52.067 ****

TASK [kubernetes/preinstall : target dhclient conf file for /etc/dhcp/dhclient.conf] ***********************************************************************
ok: [node1]
Wednesday 08 February 2023  20:48:08 +0200 (0:00:00.062)       0:00:52.129 ****
Wednesday 08 February 2023  20:48:08 +0200 (0:00:00.034)       0:00:52.163 ****

TASK [kubernetes/preinstall : target dhclient hook file for Debian family] *********************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:48:08 +0200 (0:00:00.060)       0:00:52.224 ****

TASK [kubernetes/preinstall : generate search domains to resolvconf] ***************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:48:08 +0200 (0:00:00.065)       0:00:52.289 ****

TASK [kubernetes/preinstall : pick coredns cluster IP or default resolver] *********************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:48:08 +0200 (0:00:00.130)       0:00:52.420 ****
Wednesday 08 February 2023  20:48:08 +0200 (0:00:00.032)       0:00:52.452 ****

TASK [kubernetes/preinstall : generate nameservers for resolvconf, not including cluster DNS] **************************************************************
ok: [node1]
Wednesday 08 February 2023  20:48:08 +0200 (0:00:00.067)       0:00:52.519 ****

TASK [kubernetes/preinstall : gather os specific variables] ************************************************************************************************
ok: [node1] => (item=/Users/max/DevOps/kubespray/roles/kubernetes/preinstall/vars/../vars/ubuntu.yml)
Wednesday 08 February 2023  20:48:08 +0200 (0:00:00.075)       0:00:52.595 ****
Wednesday 08 February 2023  20:48:08 +0200 (0:00:00.032)       0:00:52.627 ****

TASK [kubernetes/preinstall : check /usr readonly] *********************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:48:10 +0200 (0:00:01.301)       0:00:53.929 ****
Wednesday 08 February 2023  20:48:10 +0200 (0:00:00.034)       0:00:53.963 ****
Wednesday 08 February 2023  20:48:10 +0200 (0:00:00.033)       0:00:53.996 ****
Wednesday 08 February 2023  20:48:10 +0200 (0:00:00.033)       0:00:54.029 ****

TASK [kubernetes/preinstall : Create kubernetes directories] ***********************************************************************************************
changed: [node1] => (item=/etc/kubernetes)
changed: [node1] => (item=/etc/kubernetes/ssl)
changed: [node1] => (item=/etc/kubernetes/manifests)
changed: [node1] => (item=/usr/local/bin/kubernetes-scripts)
changed: [node1] => (item=/usr/libexec/kubernetes/kubelet-plugins/volume/exec)
Wednesday 08 February 2023  20:48:17 +0200 (0:00:06.639)       0:01:00.668 ****

TASK [kubernetes/preinstall : Create other directories] ****************************************************************************************************
ok: [node1] => (item=/usr/local/bin)
Wednesday 08 February 2023  20:48:18 +0200 (0:00:01.472)       0:01:02.141 ****

TASK [kubernetes/preinstall : Check if kubernetes kubeadm compat cert dir exists] **************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:48:19 +0200 (0:00:01.435)       0:01:03.577 ****

TASK [kubernetes/preinstall : Create kubernetes kubeadm compat cert dir (kubernetes/kubeadm issue 1498)] ***************************************************
changed: [node1]
Wednesday 08 February 2023  20:48:21 +0200 (0:00:01.404)       0:01:04.981 ****

TASK [kubernetes/preinstall : Create cni directories] ******************************************************************************************************
changed: [node1] => (item=/etc/cni/net.d)
changed: [node1] => (item=/opt/cni/bin)
changed: [node1] => (item=/var/lib/calico)
Wednesday 08 February 2023  20:48:25 +0200 (0:00:04.297)       0:01:09.279 ****
Wednesday 08 February 2023  20:48:25 +0200 (0:00:00.057)       0:01:09.337 ****
Wednesday 08 February 2023  20:48:25 +0200 (0:00:00.038)       0:01:09.376 ****
Wednesday 08 February 2023  20:48:25 +0200 (0:00:00.037)       0:01:09.413 ****
Wednesday 08 February 2023  20:48:25 +0200 (0:00:00.078)       0:01:09.491 ****
Wednesday 08 February 2023  20:48:25 +0200 (0:00:00.076)       0:01:09.569 ****
Wednesday 08 February 2023  20:48:25 +0200 (0:00:00.038)       0:01:09.607 ****
Wednesday 08 February 2023  20:48:26 +0200 (0:00:00.036)       0:01:09.644 ****

TASK [kubernetes/preinstall : Write resolved.conf] *********************************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:48:29 +0200 (0:00:03.194)       0:01:12.839 ****
Wednesday 08 February 2023  20:48:29 +0200 (0:00:00.034)       0:01:12.874 ****
Wednesday 08 February 2023  20:48:29 +0200 (0:00:00.033)       0:01:12.907 ****
Wednesday 08 February 2023  20:48:29 +0200 (0:00:00.034)       0:01:12.942 ****
Wednesday 08 February 2023  20:48:29 +0200 (0:00:00.038)       0:01:12.981 ****
Wednesday 08 February 2023  20:48:29 +0200 (0:00:00.038)       0:01:13.020 ****
Wednesday 08 February 2023  20:48:29 +0200 (0:00:00.038)       0:01:13.058 ****
Wednesday 08 February 2023  20:48:29 +0200 (0:00:00.038)       0:01:13.097 ****
Wednesday 08 February 2023  20:48:29 +0200 (0:00:00.036)       0:01:13.133 ****

TASK [kubernetes/preinstall : Update package management cache (APT)] ***************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:48:42 +0200 (0:00:13.270)       0:01:26.403 ****
Wednesday 08 February 2023  20:48:42 +0200 (0:00:00.036)       0:01:26.440 ****
Wednesday 08 February 2023  20:48:42 +0200 (0:00:00.035)       0:01:26.475 ****
Wednesday 08 February 2023  20:48:42 +0200 (0:00:00.034)       0:01:26.510 ****

TASK [kubernetes/preinstall : Update common_required_pkgs with ipvsadm when kube_proxy_mode is ipvs] *******************************************************
ok: [node1]
Wednesday 08 February 2023  20:48:42 +0200 (0:00:00.066)       0:01:26.576 ****

TASK [kubernetes/preinstall : Install packages requirements] ***********************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:48:52 +0200 (0:00:09.238)       0:01:35.815 ****
Wednesday 08 February 2023  20:48:52 +0200 (0:00:00.035)       0:01:35.851 ****
Wednesday 08 February 2023  20:48:52 +0200 (0:00:00.037)       0:01:35.888 ****
Wednesday 08 February 2023  20:48:52 +0200 (0:00:00.036)       0:01:35.925 ****
Wednesday 08 February 2023  20:48:52 +0200 (0:00:00.036)       0:01:35.962 ****

TASK [kubernetes/preinstall : Clean previously used sysctl file locations] *********************************************************************************
ok: [node1] => (item=ipv4-ip_forward.conf)
ok: [node1] => (item=bridge-nf-call.conf)
Wednesday 08 February 2023  20:48:55 +0200 (0:00:02.951)       0:01:38.913 ****

TASK [kubernetes/preinstall : Stat sysctl file configuration] **********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:48:56 +0200 (0:00:01.414)       0:01:40.327 ****

TASK [kubernetes/preinstall : Change sysctl file path to link source if linked] ****************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:48:56 +0200 (0:00:00.071)       0:01:40.399 ****

TASK [kubernetes/preinstall : Make sure sysctl file path folder exists] ************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:48:58 +0200 (0:00:01.490)       0:01:41.889 ****

TASK [kubernetes/preinstall : Enable ip forwarding] ********************************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:49:00 +0200 (0:00:01.798)       0:01:43.688 ****
Wednesday 08 February 2023  20:49:00 +0200 (0:00:00.048)       0:01:43.736 ****

TASK [kubernetes/preinstall : Check if we need to set fs.may_detach_mounts] ********************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:49:01 +0200 (0:00:01.542)       0:01:45.279 ****
Wednesday 08 February 2023  20:49:01 +0200 (0:00:00.048)       0:01:45.327 ****

TASK [kubernetes/preinstall : Ensure kube-bench parameters are set] ****************************************************************************************
changed: [node1] => (item={'name': 'kernel.keys.root_maxbytes', 'value': 25000000})
changed: [node1] => (item={'name': 'kernel.keys.root_maxkeys', 'value': 1000000})
changed: [node1] => (item={'name': 'kernel.panic', 'value': 10})
changed: [node1] => (item={'name': 'kernel.panic_on_oops', 'value': 1})
changed: [node1] => (item={'name': 'vm.overcommit_memory', 'value': 1})
changed: [node1] => (item={'name': 'vm.panic_on_oom', 'value': 0})
Wednesday 08 February 2023  20:49:10 +0200 (0:00:08.665)       0:01:53.993 ****

TASK [kubernetes/preinstall : Check dummy module] **********************************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:49:12 +0200 (0:00:01.985)       0:01:55.978 ****
Wednesday 08 February 2023  20:49:12 +0200 (0:00:00.035)       0:01:56.014 ****
Wednesday 08 February 2023  20:49:12 +0200 (0:00:00.034)       0:01:56.049 ****
Wednesday 08 February 2023  20:49:12 +0200 (0:00:00.036)       0:01:56.085 ****
Wednesday 08 February 2023  20:49:12 +0200 (0:00:00.035)       0:01:56.121 ****
Wednesday 08 February 2023  20:49:12 +0200 (0:00:00.036)       0:01:56.157 ****
Wednesday 08 February 2023  20:49:12 +0200 (0:00:00.036)       0:01:56.194 ****
Wednesday 08 February 2023  20:49:12 +0200 (0:00:00.036)       0:01:56.230 ****
Wednesday 08 February 2023  20:49:12 +0200 (0:00:00.036)       0:01:56.266 ****
Wednesday 08 February 2023  20:49:12 +0200 (0:00:00.041)       0:01:56.308 ****

TASK [kubernetes/preinstall : Hosts | create list from inventory] ******************************************************************************************
ok: [node1 -> localhost]
Wednesday 08 February 2023  20:49:12 +0200 (0:00:00.216)       0:01:56.525 ****

TASK [kubernetes/preinstall : Hosts | populate inventory into hosts file] **********************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:49:14 +0200 (0:00:01.556)       0:01:58.081 ****
Wednesday 08 February 2023  20:49:14 +0200 (0:00:00.042)       0:01:58.124 ****

TASK [kubernetes/preinstall : Hosts | Retrieve hosts file content] *****************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:49:15 +0200 (0:00:01.324)       0:01:59.448 ****

TASK [kubernetes/preinstall : Hosts | Extract existing entries for localhost from hosts file] **************************************************************
ok: [node1] => (item=127.0.0.1 localhost)
ok: [node1] => (item=::1 ip6-localhost ip6-loopback)
Wednesday 08 February 2023  20:49:16 +0200 (0:00:00.185)       0:01:59.634 ****

TASK [kubernetes/preinstall : Hosts | Update target hosts file entries dict with required entries] *********************************************************
ok: [node1] => (item={'key': '127.0.0.1', 'value': {'expected': ['localhost', 'localhost.localdomain']}})
ok: [node1] => (item={'key': '::1', 'value': {'expected': ['localhost6', 'localhost6.localdomain'], 'unexpected': ['localhost', 'localhost.localdomain']}})
Wednesday 08 February 2023  20:49:16 +0200 (0:00:00.088)       0:01:59.722 ****

TASK [kubernetes/preinstall : Hosts | Update (if necessary) hosts file] ************************************************************************************
changed: [node1] => (item={'key': '127.0.0.1', 'value': ['localhost', 'localhost.localdomain']})
changed: [node1] => (item={'key': '::1', 'value': ['ip6-localhost', 'ip6-loopback', 'localhost6', 'localhost6.localdomain']})
Wednesday 08 February 2023  20:49:18 +0200 (0:00:02.677)       0:02:02.400 ****

TASK [kubernetes/preinstall : Update facts] ****************************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:49:20 +0200 (0:00:01.996)       0:02:04.396 ****

TASK [kubernetes/preinstall : Configure dhclient to supersede search/domain/nameservers] *******************************************************************
changed: [node1]
Wednesday 08 February 2023  20:49:22 +0200 (0:00:01.372)       0:02:05.769 ****

TASK [kubernetes/preinstall : Configure dhclient hooks for resolv.conf (non-RH)] ***************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:49:25 +0200 (0:00:03.155)       0:02:08.924 ****
Wednesday 08 February 2023  20:49:25 +0200 (0:00:00.047)       0:02:08.972 ****
Wednesday 08 February 2023  20:49:25 +0200 (0:00:00.035)       0:02:09.007 ****
Wednesday 08 February 2023  20:49:25 +0200 (0:00:00.035)       0:02:09.043 ****
Wednesday 08 February 2023  20:49:25 +0200 (0:00:00.000)       0:02:09.043 ****

RUNNING HANDLER [kubernetes/preinstall : Preinstall | propagate resolvconf to k8s components] **************************************************************
changed: [node1]
Wednesday 08 February 2023  20:49:26 +0200 (0:00:01.440)       0:02:10.484 ****
Wednesday 08 February 2023  20:49:26 +0200 (0:00:00.043)       0:02:10.527 ****

RUNNING HANDLER [kubernetes/preinstall : Preinstall | kube-apiserver configured] ***************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:49:28 +0200 (0:00:01.526)       0:02:12.054 ****

RUNNING HANDLER [kubernetes/preinstall : Preinstall | kube-controller configured] **************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:49:29 +0200 (0:00:01.374)       0:02:13.429 ****
Wednesday 08 February 2023  20:49:29 +0200 (0:00:00.032)       0:02:13.461 ****
Wednesday 08 February 2023  20:49:29 +0200 (0:00:00.040)       0:02:13.502 ****
Wednesday 08 February 2023  20:49:29 +0200 (0:00:00.032)       0:02:13.535 ****

RUNNING HANDLER [kubernetes/preinstall : Preinstall | restart kube-apiserver crio/containerd] **************************************************************
changed: [node1]
Wednesday 08 February 2023  20:49:31 +0200 (0:00:01.403)       0:02:14.938 ****
Wednesday 08 February 2023  20:49:31 +0200 (0:00:00.034)       0:02:14.973 ****

RUNNING HANDLER [kubernetes/preinstall : Preinstall | Restart systemd-resolved] ****************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:49:33 +0200 (0:00:02.332)       0:02:17.305 ****

TASK [kubernetes/preinstall : Check if we are running inside a Azure VM] ***********************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:49:35 +0200 (0:00:01.461)       0:02:18.767 ****
Wednesday 08 February 2023  20:49:35 +0200 (0:00:00.036)       0:02:18.803 ****
Wednesday 08 February 2023  20:49:35 +0200 (0:00:00.034)       0:02:18.837 ****
Wednesday 08 February 2023  20:49:35 +0200 (0:00:00.036)       0:02:18.874 ****
Wednesday 08 February 2023  20:49:35 +0200 (0:00:00.036)       0:02:18.910 ****
Wednesday 08 February 2023  20:49:35 +0200 (0:00:00.037)       0:02:18.947 ****
Wednesday 08 February 2023  20:49:35 +0200 (0:00:00.035)       0:02:18.983 ****
Wednesday 08 February 2023  20:49:35 +0200 (0:00:00.036)       0:02:19.019 ****

TASK [Run calico checks] ***********************************************************************************************************************************
Wednesday 08 February 2023  20:49:35 +0200 (0:00:00.191)       0:02:19.210 ****

TASK [network_plugin/calico : Stop if legacy encapsulation variables are detected (ipip)] ******************************************************************
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
Wednesday 08 February 2023  20:49:35 +0200 (0:00:00.073)       0:02:19.283 ****

TASK [network_plugin/calico : Stop if legacy encapsulation variables are detected (ipip_mode)] *************************************************************
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
Wednesday 08 February 2023  20:49:35 +0200 (0:00:00.081)       0:02:19.365 ****

TASK [network_plugin/calico : Stop if legacy encapsulation variables are detected (calcio_ipam_autoallocateblocks)] ****************************************
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
Wednesday 08 February 2023  20:49:35 +0200 (0:00:00.076)       0:02:19.442 ****
Wednesday 08 February 2023  20:49:35 +0200 (0:00:00.052)       0:02:19.495 ****

TASK [network_plugin/calico : Stop if supported Calico versions] *******************************************************************************************
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
Wednesday 08 February 2023  20:49:35 +0200 (0:00:00.075)       0:02:19.571 ****
ASYNC FAILED on node1: jid=589399743841.4268

TASK [network_plugin/calico : Get current calico cluster version] ******************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:49:42 +0200 (0:00:06.448)       0:02:26.019 ****
Wednesday 08 February 2023  20:49:42 +0200 (0:00:00.053)       0:02:26.073 ****
Wednesday 08 February 2023  20:49:42 +0200 (0:00:00.058)       0:02:26.131 ****
Wednesday 08 February 2023  20:49:42 +0200 (0:00:00.044)       0:02:26.175 ****

TASK [network_plugin/calico : Check vars defined correctly] ************************************************************************************************
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
Wednesday 08 February 2023  20:49:42 +0200 (0:00:00.078)       0:02:26.254 ****

TASK [network_plugin/calico : Check calico network backend defined correctly] ******************************************************************************
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
Wednesday 08 February 2023  20:49:42 +0200 (0:00:00.075)       0:02:26.330 ****

TASK [network_plugin/calico : Check ipip and vxlan mode defined correctly] *********************************************************************************
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
Wednesday 08 February 2023  20:49:42 +0200 (0:00:00.077)       0:02:26.408 ****
Wednesday 08 February 2023  20:49:42 +0200 (0:00:00.045)       0:02:26.453 ****

TASK [network_plugin/calico : Check ipip and vxlan mode if simultaneously enabled] *************************************************************************
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
Wednesday 08 February 2023  20:49:42 +0200 (0:00:00.079)       0:02:26.533 ****

TASK [network_plugin/calico : Get Calico default-pool configuration] ***************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:49:43 +0200 (0:00:00.481)       0:02:27.015 ****
Wednesday 08 February 2023  20:49:43 +0200 (0:00:00.045)       0:02:27.060 ****
Wednesday 08 February 2023  20:49:43 +0200 (0:00:00.051)       0:02:27.112 ****
Wednesday 08 February 2023  20:49:43 +0200 (0:00:00.045)       0:02:27.157 ****
Wednesday 08 February 2023  20:49:43 +0200 (0:00:00.045)       0:02:27.202 ****
Wednesday 08 February 2023  20:49:43 +0200 (0:00:00.052)       0:02:27.255 ****

TASK [container-engine/validate-container-engine : validate-container-engine | check if fedora coreos] *****************************************************
ok: [node1]
Wednesday 08 February 2023  20:49:45 +0200 (0:00:01.469)       0:02:28.724 ****

TASK [container-engine/validate-container-engine : validate-container-engine | set is_ostree] **************************************************************
ok: [node1]
Wednesday 08 February 2023  20:49:45 +0200 (0:00:00.065)       0:02:28.789 ****

TASK [container-engine/validate-container-engine : Ensure kubelet systemd unit exists] *********************************************************************
ok: [node1]
Wednesday 08 February 2023  20:49:47 +0200 (0:00:02.514)       0:02:31.304 ****

TASK [container-engine/validate-container-engine : Populate service facts] *********************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:49:52 +0200 (0:00:04.993)       0:02:36.297 ****

TASK [container-engine/validate-container-engine : Check if containerd is installed] ***********************************************************************
ok: [node1]
Wednesday 08 February 2023  20:49:54 +0200 (0:00:01.615)       0:02:37.913 ****

TASK [container-engine/validate-container-engine : Check if docker is installed] ***************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:49:55 +0200 (0:00:01.349)       0:02:39.262 ****

TASK [container-engine/validate-container-engine : Check if crio is installed] *****************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:49:56 +0200 (0:00:01.345)       0:02:40.607 ****
Wednesday 08 February 2023  20:49:57 +0200 (0:00:00.047)       0:02:40.655 ****
Wednesday 08 February 2023  20:49:57 +0200 (0:00:00.045)       0:02:40.701 ****
Wednesday 08 February 2023  20:49:57 +0200 (0:00:00.047)       0:02:40.749 ****
Wednesday 08 February 2023  20:49:57 +0200 (0:00:00.046)       0:02:40.796 ****
Wednesday 08 February 2023  20:49:57 +0200 (0:00:00.099)       0:02:40.895 ****
Wednesday 08 February 2023  20:49:57 +0200 (0:00:00.045)       0:02:40.941 ****
Wednesday 08 February 2023  20:49:57 +0200 (0:00:00.046)       0:02:40.987 ****
Wednesday 08 February 2023  20:49:57 +0200 (0:00:00.045)       0:02:41.033 ****
Wednesday 08 February 2023  20:49:57 +0200 (0:00:00.046)       0:02:41.079 ****
Wednesday 08 February 2023  20:49:57 +0200 (0:00:00.048)       0:02:41.128 ****
Wednesday 08 February 2023  20:49:57 +0200 (0:00:00.062)       0:02:41.191 ****
Wednesday 08 February 2023  20:49:57 +0200 (0:00:00.061)       0:02:41.252 ****
Wednesday 08 February 2023  20:49:57 +0200 (0:00:00.045)       0:02:41.298 ****
Wednesday 08 February 2023  20:49:57 +0200 (0:00:00.047)       0:02:41.345 ****
Wednesday 08 February 2023  20:49:57 +0200 (0:00:00.049)       0:02:41.395 ****
Wednesday 08 February 2023  20:49:57 +0200 (0:00:00.061)       0:02:41.456 ****
Wednesday 08 February 2023  20:49:57 +0200 (0:00:00.046)       0:02:41.503 ****
Wednesday 08 February 2023  20:49:57 +0200 (0:00:00.054)       0:02:41.557 ****
Wednesday 08 February 2023  20:49:57 +0200 (0:00:00.048)       0:02:41.605 ****
Wednesday 08 February 2023  20:49:58 +0200 (0:00:00.104)       0:02:41.710 ****
Wednesday 08 February 2023  20:49:58 +0200 (0:00:00.048)       0:02:41.759 ****
Wednesday 08 February 2023  20:49:58 +0200 (0:00:00.047)       0:02:41.807 ****
Wednesday 08 February 2023  20:49:58 +0200 (0:00:00.049)       0:02:41.856 ****
Wednesday 08 February 2023  20:49:58 +0200 (0:00:00.048)       0:02:41.904 ****
Wednesday 08 February 2023  20:49:58 +0200 (0:00:00.103)       0:02:42.008 ****
Wednesday 08 February 2023  20:49:58 +0200 (0:00:00.055)       0:02:42.063 ****
Wednesday 08 February 2023  20:49:58 +0200 (0:00:00.044)       0:02:42.108 ****
Wednesday 08 February 2023  20:49:58 +0200 (0:00:00.044)       0:02:42.153 ****
Wednesday 08 February 2023  20:49:58 +0200 (0:00:00.044)       0:02:42.198 ****
Wednesday 08 February 2023  20:49:58 +0200 (0:00:00.050)       0:02:42.248 ****
Wednesday 08 February 2023  20:49:58 +0200 (0:00:00.058)       0:02:42.307 ****
Wednesday 08 February 2023  20:49:58 +0200 (0:00:00.049)       0:02:42.356 ****
Wednesday 08 February 2023  20:49:58 +0200 (0:00:00.048)       0:02:42.405 ****
Wednesday 08 February 2023  20:49:58 +0200 (0:00:00.048)       0:02:42.454 ****
Wednesday 08 February 2023  20:49:58 +0200 (0:00:00.048)       0:02:42.502 ****
Wednesday 08 February 2023  20:49:58 +0200 (0:00:00.079)       0:02:42.582 ****
Wednesday 08 February 2023  20:49:59 +0200 (0:00:00.051)       0:02:42.634 ****
Wednesday 08 February 2023  20:49:59 +0200 (0:00:00.053)       0:02:42.687 ****
Wednesday 08 February 2023  20:49:59 +0200 (0:00:00.061)       0:02:42.749 ****
Wednesday 08 February 2023  20:49:59 +0200 (0:00:00.050)       0:02:42.799 ****
Wednesday 08 February 2023  20:49:59 +0200 (0:00:00.051)       0:02:42.851 ****
Wednesday 08 February 2023  20:49:59 +0200 (0:00:00.118)       0:02:42.969 ****
Wednesday 08 February 2023  20:49:59 +0200 (0:00:00.064)       0:02:43.034 ****
Wednesday 08 February 2023  20:49:59 +0200 (0:00:00.049)       0:02:43.084 ****
Wednesday 08 February 2023  20:49:59 +0200 (0:00:00.049)       0:02:43.133 ****
Wednesday 08 February 2023  20:49:59 +0200 (0:00:00.065)       0:02:43.198 ****
Wednesday 08 February 2023  20:49:59 +0200 (0:00:00.049)       0:02:43.247 ****
Wednesday 08 February 2023  20:49:59 +0200 (0:00:00.049)       0:02:43.297 ****
Wednesday 08 February 2023  20:49:59 +0200 (0:00:00.049)       0:02:43.347 ****
Wednesday 08 February 2023  20:49:59 +0200 (0:00:00.049)       0:02:43.396 ****
Wednesday 08 February 2023  20:49:59 +0200 (0:00:00.051)       0:02:43.448 ****
Wednesday 08 February 2023  20:49:59 +0200 (0:00:00.049)       0:02:43.498 ****
Wednesday 08 February 2023  20:49:59 +0200 (0:00:00.063)       0:02:43.561 ****
Wednesday 08 February 2023  20:49:59 +0200 (0:00:00.049)       0:02:43.611 ****
Wednesday 08 February 2023  20:50:00 +0200 (0:00:00.077)       0:02:43.688 ****
Wednesday 08 February 2023  20:50:00 +0200 (0:00:00.049)       0:02:43.737 ****
Wednesday 08 February 2023  20:50:00 +0200 (0:00:00.080)       0:02:43.817 ****
Wednesday 08 February 2023  20:50:00 +0200 (0:00:00.043)       0:02:43.861 ****
Wednesday 08 February 2023  20:50:00 +0200 (0:00:00.043)       0:02:43.905 ****
Wednesday 08 February 2023  20:50:00 +0200 (0:00:00.043)       0:02:43.949 ****
Wednesday 08 February 2023  20:50:00 +0200 (0:00:00.050)       0:02:44.000 ****
Wednesday 08 February 2023  20:50:00 +0200 (0:00:00.050)       0:02:44.050 ****
Wednesday 08 February 2023  20:50:00 +0200 (0:00:00.055)       0:02:44.106 ****
Wednesday 08 February 2023  20:50:00 +0200 (0:00:00.058)       0:02:44.164 ****
Wednesday 08 February 2023  20:50:00 +0200 (0:00:00.044)       0:02:44.209 ****
Wednesday 08 February 2023  20:50:00 +0200 (0:00:00.044)       0:02:44.253 ****
Wednesday 08 February 2023  20:50:00 +0200 (0:00:00.070)       0:02:44.324 ****
Wednesday 08 February 2023  20:50:00 +0200 (0:00:00.043)       0:02:44.368 ****
Wednesday 08 February 2023  20:50:00 +0200 (0:00:00.058)       0:02:44.426 ****
Wednesday 08 February 2023  20:50:00 +0200 (0:00:00.042)       0:02:44.469 ****
Wednesday 08 February 2023  20:50:00 +0200 (0:00:00.058)       0:02:44.528 ****
Wednesday 08 February 2023  20:50:00 +0200 (0:00:00.061)       0:02:44.590 ****
Wednesday 08 February 2023  20:50:01 +0200 (0:00:00.043)       0:02:44.634 ****
Wednesday 08 February 2023  20:50:01 +0200 (0:00:00.044)       0:02:44.678 ****
Wednesday 08 February 2023  20:50:01 +0200 (0:00:00.044)       0:02:44.723 ****
Wednesday 08 February 2023  20:50:01 +0200 (0:00:00.071)       0:02:44.794 ****
Wednesday 08 February 2023  20:50:01 +0200 (0:00:00.046)       0:02:44.841 ****
Wednesday 08 February 2023  20:50:01 +0200 (0:00:00.044)       0:02:44.886 ****
Wednesday 08 February 2023  20:50:01 +0200 (0:00:00.043)       0:02:44.930 ****
Wednesday 08 February 2023  20:50:01 +0200 (0:00:00.045)       0:02:44.975 ****
Wednesday 08 February 2023  20:50:01 +0200 (0:00:00.044)       0:02:45.020 ****
Wednesday 08 February 2023  20:50:01 +0200 (0:00:00.043)       0:02:45.063 ****
Wednesday 08 February 2023  20:50:01 +0200 (0:00:00.047)       0:02:45.110 ****
Wednesday 08 February 2023  20:50:01 +0200 (0:00:00.045)       0:02:45.156 ****
Wednesday 08 February 2023  20:50:01 +0200 (0:00:00.045)       0:02:45.202 ****
Wednesday 08 February 2023  20:50:01 +0200 (0:00:00.045)       0:02:45.247 ****
Wednesday 08 February 2023  20:50:01 +0200 (0:00:00.044)       0:02:45.292 ****
Wednesday 08 February 2023  20:50:01 +0200 (0:00:00.044)       0:02:45.336 ****
Wednesday 08 February 2023  20:50:01 +0200 (0:00:00.048)       0:02:45.385 ****
Wednesday 08 February 2023  20:50:01 +0200 (0:00:00.043)       0:02:45.428 ****
Wednesday 08 February 2023  20:50:01 +0200 (0:00:00.045)       0:02:45.473 ****
Wednesday 08 February 2023  20:50:01 +0200 (0:00:00.046)       0:02:45.520 ****
Wednesday 08 February 2023  20:50:01 +0200 (0:00:00.054)       0:02:45.575 ****
Wednesday 08 February 2023  20:50:01 +0200 (0:00:00.045)       0:02:45.620 ****
Wednesday 08 February 2023  20:50:02 +0200 (0:00:00.045)       0:02:45.666 ****
Wednesday 08 February 2023  20:50:02 +0200 (0:00:00.045)       0:02:45.711 ****
Wednesday 08 February 2023  20:50:02 +0200 (0:00:00.044)       0:02:45.755 ****
Wednesday 08 February 2023  20:50:02 +0200 (0:00:00.062)       0:02:45.818 ****
Wednesday 08 February 2023  20:50:02 +0200 (0:00:00.042)       0:02:45.861 ****
Wednesday 08 February 2023  20:50:02 +0200 (0:00:00.043)       0:02:45.905 ****
Wednesday 08 February 2023  20:50:02 +0200 (0:00:00.046)       0:02:45.952 ****
Wednesday 08 February 2023  20:50:02 +0200 (0:00:00.045)       0:02:45.997 ****
Wednesday 08 February 2023  20:50:02 +0200 (0:00:00.045)       0:02:46.042 ****
Wednesday 08 February 2023  20:50:02 +0200 (0:00:00.044)       0:02:46.087 ****
Wednesday 08 February 2023  20:50:02 +0200 (0:00:00.046)       0:02:46.133 ****
Wednesday 08 February 2023  20:50:02 +0200 (0:00:00.044)       0:02:46.177 ****
Wednesday 08 February 2023  20:50:02 +0200 (0:00:00.047)       0:02:46.225 ****
Wednesday 08 February 2023  20:50:02 +0200 (0:00:00.044)       0:02:46.269 ****
Wednesday 08 February 2023  20:50:02 +0200 (0:00:00.052)       0:02:46.322 ****
Wednesday 08 February 2023  20:50:02 +0200 (0:00:00.044)       0:02:46.367 ****
Wednesday 08 February 2023  20:50:02 +0200 (0:00:00.044)       0:02:46.412 ****
Wednesday 08 February 2023  20:50:02 +0200 (0:00:00.043)       0:02:46.456 ****
Wednesday 08 February 2023  20:50:02 +0200 (0:00:00.046)       0:02:46.502 ****
Wednesday 08 February 2023  20:50:02 +0200 (0:00:00.038)       0:02:46.540 ****
Wednesday 08 February 2023  20:50:02 +0200 (0:00:00.043)       0:02:46.585 ****
Wednesday 08 February 2023  20:50:02 +0200 (0:00:00.044)       0:02:46.629 ****
Wednesday 08 February 2023  20:50:03 +0200 (0:00:00.057)       0:02:46.686 ****
Wednesday 08 February 2023  20:50:03 +0200 (0:00:00.043)       0:02:46.730 ****
Wednesday 08 February 2023  20:50:03 +0200 (0:00:00.046)       0:02:46.776 ****
Wednesday 08 February 2023  20:50:03 +0200 (0:00:00.058)       0:02:46.835 ****

TASK [container-engine/containerd-common : containerd-common | check if fedora coreos] *********************************************************************
ok: [node1]
Wednesday 08 February 2023  20:50:04 +0200 (0:00:01.315)       0:02:48.151 ****

TASK [container-engine/containerd-common : containerd-common | set is_ostree] ******************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:50:04 +0200 (0:00:00.076)       0:02:48.227 ****

TASK [container-engine/containerd-common : containerd-common | gather os specific variables] ***************************************************************
ok: [node1] => (item=/Users/max/DevOps/kubespray/roles/container-engine/containerd/vars/../vars/ubuntu.yml)
Wednesday 08 February 2023  20:50:04 +0200 (0:00:00.117)       0:02:48.344 ****

TASK [container-engine/runc : runc | check if fedora coreos] ***********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:50:06 +0200 (0:00:01.899)       0:02:50.244 ****

TASK [container-engine/runc : runc | set is_ostree] ********************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:50:06 +0200 (0:00:00.073)       0:02:50.317 ****

TASK [container-engine/runc : runc | Uninstall runc package managed by package manager] ********************************************************************
ok: [node1]
Wednesday 08 February 2023  20:50:08 +0200 (0:00:02.091)       0:02:52.409 ****

TASK [container-engine/runc : runc | Download runc binary] *************************************************************************************************
included: /Users/max/DevOps/kubespray/roles/container-engine/runc/tasks/../../../download/tasks/download_file.yml for node1
Wednesday 08 February 2023  20:50:08 +0200 (0:00:00.081)       0:02:52.490 ****

TASK [container-engine/runc : prep_download | Set a few facts] *********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:50:08 +0200 (0:00:00.078)       0:02:52.569 ****

TASK [container-engine/runc : download_file | Starting download of file] ***********************************************************************************
ok: [node1] => {
    "msg": "https://github.com/opencontainers/runc/releases/download/v1.1.4/runc.amd64"
}
Wednesday 08 February 2023  20:50:09 +0200 (0:00:00.553)       0:02:53.122 ****

TASK [container-engine/runc : download_file | Set pathname of cached file] *********************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:50:10 +0200 (0:00:00.539)       0:02:53.662 ****

TASK [container-engine/runc : download_file | Create dest directory on node] *******************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:50:12 +0200 (0:00:02.134)       0:02:55.797 ****
Wednesday 08 February 2023  20:50:12 +0200 (0:00:00.070)       0:02:55.867 ****
Wednesday 08 February 2023  20:50:12 +0200 (0:00:00.538)       0:02:56.406 ****

TASK [container-engine/runc : download_file | Validate mirrors] ********************************************************************************************
ok: [node1] => (item=None)
ok: [node1 -> {{ download_delegate if download_force_cache else inventory_hostname }}]
Wednesday 08 February 2023  20:50:15 +0200 (0:00:02.529)       0:02:58.936 ****

TASK [container-engine/runc : download_file | Get the list of working mirrors] *****************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:50:15 +0200 (0:00:00.091)       0:02:59.028 ****

TASK [container-engine/runc : download_file | Download item] ***********************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:50:18 +0200 (0:00:03.437)       0:03:02.465 ****
Wednesday 08 February 2023  20:50:18 +0200 (0:00:00.051)       0:03:02.516 ****
Wednesday 08 February 2023  20:50:18 +0200 (0:00:00.050)       0:03:02.567 ****
Wednesday 08 February 2023  20:50:18 +0200 (0:00:00.051)       0:03:02.618 ****

TASK [container-engine/runc : download_file | Extract file archives] ***************************************************************************************
included: /Users/max/DevOps/kubespray/roles/download/tasks/extract_file.yml for node1
Wednesday 08 February 2023  20:50:19 +0200 (0:00:00.075)       0:03:02.694 ****
Wednesday 08 February 2023  20:50:19 +0200 (0:00:00.535)       0:03:03.229 ****

TASK [container-engine/runc : Copy runc binary from download dir] ******************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:50:21 +0200 (0:00:01.890)       0:03:05.120 ****

TASK [container-engine/runc : runc | Remove orphaned binary] ***********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:50:23 +0200 (0:00:01.552)       0:03:06.673 ****

TASK [container-engine/crictl : install crictĺ] ************************************************************************************************************
included: /Users/max/DevOps/kubespray/roles/container-engine/crictl/tasks/crictl.yml for node1
Wednesday 08 February 2023  20:50:23 +0200 (0:00:00.070)       0:03:06.744 ****

TASK [container-engine/crictl : crictl | Download crictl] **************************************************************************************************
included: /Users/max/DevOps/kubespray/roles/container-engine/crictl/tasks/../../../download/tasks/download_file.yml for node1
Wednesday 08 February 2023  20:50:23 +0200 (0:00:00.084)       0:03:06.828 ****

TASK [container-engine/crictl : prep_download | Set a few facts] *******************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:50:23 +0200 (0:00:00.073)       0:03:06.902 ****

TASK [container-engine/crictl : download_file | Starting download of file] *********************************************************************************
ok: [node1] => {
    "msg": "https://github.com/kubernetes-sigs/cri-tools/releases/download/v1.24.0/crictl-v1.24.0-linux-amd64.tar.gz"
}
Wednesday 08 February 2023  20:50:23 +0200 (0:00:00.537)       0:03:07.439 ****

TASK [container-engine/crictl : download_file | Set pathname of cached file] *******************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:50:24 +0200 (0:00:00.533)       0:03:07.972 ****

TASK [container-engine/crictl : download_file | Create dest directory on node] *****************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:50:26 +0200 (0:00:01.968)       0:03:09.941 ****
Wednesday 08 February 2023  20:50:26 +0200 (0:00:00.073)       0:03:10.015 ****
Wednesday 08 February 2023  20:50:26 +0200 (0:00:00.531)       0:03:10.546 ****

TASK [container-engine/crictl : download_file | Validate mirrors] ******************************************************************************************
ok: [node1] => (item=None)
ok: [node1 -> {{ download_delegate if download_force_cache else inventory_hostname }}]
Wednesday 08 February 2023  20:50:29 +0200 (0:00:02.170)       0:03:12.717 ****

TASK [container-engine/crictl : download_file | Get the list of working mirrors] ***************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:50:29 +0200 (0:00:00.096)       0:03:12.814 ****

TASK [container-engine/crictl : download_file | Download item] *********************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:50:31 +0200 (0:00:02.330)       0:03:15.144 ****
Wednesday 08 February 2023  20:50:31 +0200 (0:00:00.059)       0:03:15.203 ****
Wednesday 08 February 2023  20:50:31 +0200 (0:00:00.055)       0:03:15.259 ****
Wednesday 08 February 2023  20:50:31 +0200 (0:00:00.055)       0:03:15.314 ****

TASK [container-engine/crictl : download_file | Extract file archives] *************************************************************************************
included: /Users/max/DevOps/kubespray/roles/download/tasks/extract_file.yml for node1
Wednesday 08 February 2023  20:50:31 +0200 (0:00:00.081)       0:03:15.395 ****

TASK [container-engine/crictl : extract_file | Unpacking archive] ******************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:50:36 +0200 (0:00:05.107)       0:03:20.503 ****

TASK [container-engine/crictl : Install crictl config] *****************************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:50:39 +0200 (0:00:02.964)       0:03:23.468 ****

TASK [container-engine/crictl : Copy crictl binary from download dir] **************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:50:41 +0200 (0:00:01.622)       0:03:25.090 ****

TASK [container-engine/nerdctl : nerdctl | Download nerdctl] ***********************************************************************************************
included: /Users/max/DevOps/kubespray/roles/container-engine/nerdctl/tasks/../../../download/tasks/download_file.yml for node1
Wednesday 08 February 2023  20:50:41 +0200 (0:00:00.074)       0:03:25.165 ****

TASK [container-engine/nerdctl : prep_download | Set a few facts] ******************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:50:41 +0200 (0:00:00.066)       0:03:25.231 ****

TASK [container-engine/nerdctl : download_file | Starting download of file] ********************************************************************************
ok: [node1] => {
    "msg": "https://github.com/containerd/nerdctl/releases/download/v0.22.2/nerdctl-0.22.2-linux-amd64.tar.gz"
}
Wednesday 08 February 2023  20:50:42 +0200 (0:00:00.533)       0:03:25.764 ****

TASK [container-engine/nerdctl : download_file | Set pathname of cached file] ******************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:50:42 +0200 (0:00:00.527)       0:03:26.292 ****

TASK [container-engine/nerdctl : download_file | Create dest directory on node] ****************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:50:44 +0200 (0:00:01.960)       0:03:28.253 ****
Wednesday 08 February 2023  20:50:44 +0200 (0:00:00.070)       0:03:28.323 ****
Wednesday 08 February 2023  20:50:45 +0200 (0:00:00.529)       0:03:28.852 ****

TASK [container-engine/nerdctl : download_file | Validate mirrors] *****************************************************************************************
ok: [node1] => (item=None)
ok: [node1 -> {{ download_delegate if download_force_cache else inventory_hostname }}]
Wednesday 08 February 2023  20:50:47 +0200 (0:00:02.312)       0:03:31.165 ****

TASK [container-engine/nerdctl : download_file | Get the list of working mirrors] **************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:50:47 +0200 (0:00:00.091)       0:03:31.257 ****

TASK [container-engine/nerdctl : download_file | Download item] ********************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:50:50 +0200 (0:00:02.524)       0:03:33.782 ****
Wednesday 08 February 2023  20:50:50 +0200 (0:00:00.052)       0:03:33.835 ****
Wednesday 08 February 2023  20:50:50 +0200 (0:00:00.052)       0:03:33.887 ****
Wednesday 08 February 2023  20:50:50 +0200 (0:00:00.052)       0:03:33.939 ****

TASK [container-engine/nerdctl : download_file | Extract file archives] ************************************************************************************
included: /Users/max/DevOps/kubespray/roles/download/tasks/extract_file.yml for node1
Wednesday 08 February 2023  20:50:50 +0200 (0:00:00.072)       0:03:34.012 ****

TASK [container-engine/nerdctl : extract_file | Unpacking archive] *****************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:50:56 +0200 (0:00:05.715)       0:03:39.727 ****

TASK [container-engine/nerdctl : nerdctl | Copy nerdctl binary from download dir] **************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:50:57 +0200 (0:00:01.638)       0:03:41.366 ****

TASK [container-engine/nerdctl : nerdctl | Create configuration dir] ***************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:50:59 +0200 (0:00:01.418)       0:03:42.784 ****

TASK [container-engine/nerdctl : nerdctl | Install nerdctl configuration] **********************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:51:02 +0200 (0:00:03.500)       0:03:46.285 ****
Wednesday 08 February 2023  20:51:02 +0200 (0:00:00.047)       0:03:46.333 ****

TASK [container-engine/containerd : containerd | Remove any package manager controlled containerd package] *************************************************
ok: [node1]
Wednesday 08 February 2023  20:51:04 +0200 (0:00:01.961)       0:03:48.294 ****
Wednesday 08 February 2023  20:51:04 +0200 (0:00:00.046)       0:03:48.340 ****

TASK [container-engine/containerd : containerd | Remove containerd repository] *****************************************************************************
ok: [node1] => (item=deb https://download.docker.com/linux/ubuntu focal stable
)
Wednesday 08 February 2023  20:51:06 +0200 (0:00:01.945)       0:03:50.286 ****

TASK [container-engine/containerd : containerd | Download containerd] **************************************************************************************
included: /Users/max/DevOps/kubespray/roles/container-engine/containerd/tasks/../../../download/tasks/download_file.yml for node1
Wednesday 08 February 2023  20:51:06 +0200 (0:00:00.079)       0:03:50.366 ****

TASK [container-engine/containerd : prep_download | Set a few facts] ***************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:51:06 +0200 (0:00:00.067)       0:03:50.433 ****

TASK [container-engine/containerd : download_file | Starting download of file] *****************************************************************************
ok: [node1] => {
    "msg": "https://github.com/containerd/containerd/releases/download/v1.6.8/containerd-1.6.8-linux-amd64.tar.gz"
}
Wednesday 08 February 2023  20:51:07 +0200 (0:00:00.523)       0:03:50.957 ****

TASK [container-engine/containerd : download_file | Set pathname of cached file] ***************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:51:07 +0200 (0:00:00.526)       0:03:51.484 ****

TASK [container-engine/containerd : download_file | Create dest directory on node] *************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:51:09 +0200 (0:00:01.965)       0:03:53.449 ****
Wednesday 08 February 2023  20:51:09 +0200 (0:00:00.068)       0:03:53.518 ****
Wednesday 08 February 2023  20:51:10 +0200 (0:00:00.525)       0:03:54.044 ****

TASK [container-engine/containerd : download_file | Validate mirrors] **************************************************************************************
ok: [node1] => (item=None)
ok: [node1 -> {{ download_delegate if download_force_cache else inventory_hostname }}]
Wednesday 08 February 2023  20:51:13 +0200 (0:00:02.604)       0:03:56.649 ****

TASK [container-engine/containerd : download_file | Get the list of working mirrors] ***********************************************************************
ok: [node1]
Wednesday 08 February 2023  20:51:13 +0200 (0:00:00.092)       0:03:56.742 ****

TASK [container-engine/containerd : download_file | Download item] *****************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:51:15 +0200 (0:00:02.759)       0:03:59.502 ****
Wednesday 08 February 2023  20:51:15 +0200 (0:00:00.051)       0:03:59.553 ****
Wednesday 08 February 2023  20:51:15 +0200 (0:00:00.050)       0:03:59.604 ****
Wednesday 08 February 2023  20:51:16 +0200 (0:00:00.050)       0:03:59.654 ****

TASK [container-engine/containerd : download_file | Extract file archives] *********************************************************************************
included: /Users/max/DevOps/kubespray/roles/download/tasks/extract_file.yml for node1
Wednesday 08 February 2023  20:51:16 +0200 (0:00:00.074)       0:03:59.729 ****
Wednesday 08 February 2023  20:51:16 +0200 (0:00:00.528)       0:04:00.258 ****

TASK [container-engine/containerd : containerd | Unpack containerd archive] ********************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:51:23 +0200 (0:00:07.316)       0:04:07.574 ****

TASK [container-engine/containerd : containerd | Remove orphaned binary] ***********************************************************************************
ok: [node1] => (item=containerd)
ok: [node1] => (item=containerd-shim)
ok: [node1] => (item=containerd-shim-runc-v1)
ok: [node1] => (item=containerd-shim-runc-v2)
ok: [node1] => (item=ctr)
Wednesday 08 February 2023  20:51:30 +0200 (0:00:06.861)       0:04:14.436 ****

TASK [container-engine/containerd : containerd | Generate systemd service for containerd] ******************************************************************
changed: [node1]
Wednesday 08 February 2023  20:51:33 +0200 (0:00:02.915)       0:04:17.351 ****

TASK [container-engine/containerd : containerd | Ensure containerd directories exist] **********************************************************************
changed: [node1] => (item=/etc/systemd/system/containerd.service.d)
changed: [node1] => (item=/etc/containerd)
changed: [node1] => (item=/var/lib/containerd)
changed: [node1] => (item=/run/containerd)
Wednesday 08 February 2023  20:51:39 +0200 (0:00:05.652)       0:04:23.004 ****
Wednesday 08 February 2023  20:51:39 +0200 (0:00:00.049)       0:04:23.053 ****

TASK [container-engine/containerd : containerd | Write base_runtime_specs] *********************************************************************************
changed: [node1] => (item={'key': 'cri-base.json', 'value': {'ociVersion': '1.0.2-dev', 'process': {'user': {'uid': 0, 'gid': 0}, 'cwd': '/', 'capabilities': {'bounding': ['CAP_CHOWN', 'CAP_DAC_OVERRIDE', 'CAP_FSETID', 'CAP_FOWNER', 'CAP_MKNOD', 'CAP_NET_RAW', 'CAP_SETGID', 'CAP_SETUID', 'CAP_SETFCAP', 'CAP_SETPCAP', 'CAP_NET_BIND_SERVICE', 'CAP_SYS_CHROOT', 'CAP_KILL', 'CAP_AUDIT_WRITE'], 'effective': ['CAP_CHOWN', 'CAP_DAC_OVERRIDE', 'CAP_FSETID', 'CAP_FOWNER', 'CAP_MKNOD', 'CAP_NET_RAW', 'CAP_SETGID', 'CAP_SETUID', 'CAP_SETFCAP', 'CAP_SETPCAP', 'CAP_NET_BIND_SERVICE', 'CAP_SYS_CHROOT', 'CAP_KILL', 'CAP_AUDIT_WRITE'], 'inheritable': ['CAP_CHOWN', 'CAP_DAC_OVERRIDE', 'CAP_FSETID', 'CAP_FOWNER', 'CAP_MKNOD', 'CAP_NET_RAW', 'CAP_SETGID', 'CAP_SETUID', 'CAP_SETFCAP', 'CAP_SETPCAP', 'CAP_NET_BIND_SERVICE', 'CAP_SYS_CHROOT', 'CAP_KILL', 'CAP_AUDIT_WRITE'], 'permitted': ['CAP_CHOWN', 'CAP_DAC_OVERRIDE', 'CAP_FSETID', 'CAP_FOWNER', 'CAP_MKNOD', 'CAP_NET_RAW', 'CAP_SETGID', 'CAP_SETUID', 'CAP_SETFCAP', 'CAP_SETPCAP', 'CAP_NET_BIND_SERVICE', 'CAP_SYS_CHROOT', 'CAP_KILL', 'CAP_AUDIT_WRITE']}, 'rlimits': [{'type': 'RLIMIT_NOFILE', 'hard': 1024, 'soft': 1024}], 'noNewPrivileges': True}, 'root': {'path': 'rootfs'}, 'mounts': [{'destination': '/proc', 'type': 'proc', 'source': 'proc', 'options': ['nosuid', 'noexec', 'nodev']}, {'destination': '/dev', 'type': 'tmpfs', 'source': 'tmpfs', 'options': ['nosuid', 'strictatime', 'mode=755', 'size=65536k']}, {'destination': '/dev/pts', 'type': 'devpts', 'source': 'devpts', 'options': ['nosuid', 'noexec', 'newinstance', 'ptmxmode=0666', 'mode=0620', 'gid=5']}, {'destination': '/dev/shm', 'type': 'tmpfs', 'source': 'shm', 'options': ['nosuid', 'noexec', 'nodev', 'mode=1777', 'size=65536k']}, {'destination': '/dev/mqueue', 'type': 'mqueue', 'source': 'mqueue', 'options': ['nosuid', 'noexec', 'nodev']}, {'destination': '/sys', 'type': 'sysfs', 'source': 'sysfs', 'options': ['nosuid', 'noexec', 'nodev', 'ro']}, {'destination': '/run', 'type': 'tmpfs', 'source': 'tmpfs', 'options': ['nosuid', 'strictatime', 'mode=755', 'size=65536k']}], 'linux': {'resources': {'devices': [{'allow': False, 'access': 'rwm'}]}, 'cgroupsPath': '/default', 'namespaces': [{'type': 'pid'}, {'type': 'ipc'}, {'type': 'uts'}, {'type': 'mount'}, {'type': 'network'}], 'maskedPaths': ['/proc/acpi', '/proc/asound', '/proc/kcore', '/proc/keys', '/proc/latency_stats', '/proc/timer_list', '/proc/timer_stats', '/proc/sched_debug', '/sys/firmware', '/proc/scsi'], 'readonlyPaths': ['/proc/bus', '/proc/fs', '/proc/irq', '/proc/sys', '/proc/sysrq-trigger']}}})
Wednesday 08 February 2023  20:51:42 +0200 (0:00:03.058)       0:04:26.111 ****

TASK [container-engine/containerd : containerd | Copy containerd config file] ******************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:51:45 +0200 (0:00:03.000)       0:04:29.112 ****
[WARNING]: flush_handlers task does not support when conditional
Wednesday 08 February 2023  20:51:45 +0200 (0:00:00.000)       0:04:29.112 ****
Wednesday 08 February 2023  20:51:45 +0200 (0:00:00.041)       0:04:29.154 ****
Wednesday 08 February 2023  20:51:45 +0200 (0:00:00.048)       0:04:29.202 ****
Wednesday 08 February 2023  20:51:45 +0200 (0:00:00.044)       0:04:29.247 ****
Wednesday 08 February 2023  20:51:45 +0200 (0:00:00.043)       0:04:29.291 ****

RUNNING HANDLER [container-engine/containerd : restart containerd] *****************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:51:47 +0200 (0:00:01.393)       0:04:30.685 ****

RUNNING HANDLER [container-engine/containerd : Containerd | restart containerd] ****************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:51:49 +0200 (0:00:02.371)       0:04:33.056 ****

RUNNING HANDLER [container-engine/containerd : Containerd | wait for containerd] ***************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:51:50 +0200 (0:00:01.394)       0:04:34.451 ****

TASK [container-engine/containerd : containerd | Ensure containerd is started and enabled] *****************************************************************
ok: [node1]
Wednesday 08 February 2023  20:51:52 +0200 (0:00:01.895)       0:04:36.346 ****
Wednesday 08 February 2023  20:51:52 +0200 (0:00:00.055)       0:04:36.401 ****
Wednesday 08 February 2023  20:51:52 +0200 (0:00:00.045)       0:04:36.447 ****
Wednesday 08 February 2023  20:51:52 +0200 (0:00:00.043)       0:04:36.490 ****
Wednesday 08 February 2023  20:51:52 +0200 (0:00:00.044)       0:04:36.534 ****
Wednesday 08 February 2023  20:51:52 +0200 (0:00:00.045)       0:04:36.579 ****
Wednesday 08 February 2023  20:51:53 +0200 (0:00:00.059)       0:04:36.639 ****
Wednesday 08 February 2023  20:51:53 +0200 (0:00:00.044)       0:04:36.683 ****
Wednesday 08 February 2023  20:51:53 +0200 (0:00:00.044)       0:04:36.728 ****
Wednesday 08 February 2023  20:51:53 +0200 (0:00:00.074)       0:04:36.803 ****
Wednesday 08 February 2023  20:51:53 +0200 (0:00:00.046)       0:04:36.849 ****
Wednesday 08 February 2023  20:51:53 +0200 (0:00:00.046)       0:04:36.895 ****
Wednesday 08 February 2023  20:51:53 +0200 (0:00:00.044)       0:04:36.940 ****
Wednesday 08 February 2023  20:51:53 +0200 (0:00:00.044)       0:04:36.984 ****
Wednesday 08 February 2023  20:51:53 +0200 (0:00:00.045)       0:04:37.030 ****
Wednesday 08 February 2023  20:51:53 +0200 (0:00:00.044)       0:04:37.074 ****
Wednesday 08 February 2023  20:51:53 +0200 (0:00:00.052)       0:04:37.127 ****
Wednesday 08 February 2023  20:51:53 +0200 (0:00:00.050)       0:04:37.177 ****
Wednesday 08 February 2023  20:51:53 +0200 (0:00:00.044)       0:04:37.222 ****
Wednesday 08 February 2023  20:51:53 +0200 (0:00:00.045)       0:04:37.267 ****
Wednesday 08 February 2023  20:51:53 +0200 (0:00:00.062)       0:04:37.330 ****
Wednesday 08 February 2023  20:51:53 +0200 (0:00:00.044)       0:04:37.374 ****
Wednesday 08 February 2023  20:51:53 +0200 (0:00:00.066)       0:04:37.441 ****
Wednesday 08 February 2023  20:51:53 +0200 (0:00:00.045)       0:04:37.487 ****
Wednesday 08 February 2023  20:51:53 +0200 (0:00:00.014)       0:04:37.502 ****
Wednesday 08 February 2023  20:51:53 +0200 (0:00:00.038)       0:04:37.540 ****
Wednesday 08 February 2023  20:51:53 +0200 (0:00:00.044)       0:04:37.584 ****
Wednesday 08 February 2023  20:51:53 +0200 (0:00:00.044)       0:04:37.629 ****
Wednesday 08 February 2023  20:51:54 +0200 (0:00:00.044)       0:04:37.674 ****
Wednesday 08 February 2023  20:51:54 +0200 (0:00:00.046)       0:04:37.720 ****
Wednesday 08 February 2023  20:51:54 +0200 (0:00:00.045)       0:04:37.766 ****
Wednesday 08 February 2023  20:51:54 +0200 (0:00:00.045)       0:04:37.811 ****
Wednesday 08 February 2023  20:51:54 +0200 (0:00:00.044)       0:04:37.856 ****
Wednesday 08 February 2023  20:51:54 +0200 (0:00:00.044)       0:04:37.901 ****
Wednesday 08 February 2023  20:51:54 +0200 (0:00:00.015)       0:04:37.916 ****
Wednesday 08 February 2023  20:51:54 +0200 (0:00:00.065)       0:04:37.982 ****
Wednesday 08 February 2023  20:51:54 +0200 (0:00:00.044)       0:04:38.026 ****
Wednesday 08 February 2023  20:51:54 +0200 (0:00:00.045)       0:04:38.072 ****
Wednesday 08 February 2023  20:51:54 +0200 (0:00:00.055)       0:04:38.127 ****
Wednesday 08 February 2023  20:51:54 +0200 (0:00:00.043)       0:04:38.171 ****

TASK [download : prep_download | Set a few facts] **********************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:51:54 +0200 (0:00:00.069)       0:04:38.241 ****
Wednesday 08 February 2023  20:51:54 +0200 (0:00:00.055)       0:04:38.297 ****
Wednesday 08 February 2023  20:51:54 +0200 (0:00:00.049)       0:04:38.346 ****
Wednesday 08 February 2023  20:51:54 +0200 (0:00:00.047)       0:04:38.394 ****
Wednesday 08 February 2023  20:51:54 +0200 (0:00:00.048)       0:04:38.442 ****

TASK [download : prep_download | Register docker images info] **********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:51:56 +0200 (0:00:01.544)       0:04:39.986 ****

TASK [download : prep_download | Create staging directory on remote node] **********************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:51:57 +0200 (0:00:01.371)       0:04:41.358 ****
Wednesday 08 February 2023  20:51:57 +0200 (0:00:00.049)       0:04:41.408 ****

TASK [download : download | Get kubeadm binary and list of required images] ********************************************************************************
included: /Users/max/DevOps/kubespray/roles/download/tasks/prep_kubeadm_images.yml for node1
Wednesday 08 February 2023  20:51:57 +0200 (0:00:00.081)       0:04:41.490 ****
Wednesday 08 February 2023  20:51:58 +0200 (0:00:00.514)       0:04:42.004 ****

TASK [download : prep_kubeadm_images | Download kubeadm binary] ********************************************************************************************
included: /Users/max/DevOps/kubespray/roles/download/tasks/download_file.yml for node1
Wednesday 08 February 2023  20:51:58 +0200 (0:00:00.540)       0:04:42.545 ****

TASK [download : prep_download | Set a few facts] **********************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:51:58 +0200 (0:00:00.058)       0:04:42.603 ****

TASK [download : download_file | Starting download of file] ************************************************************************************************
ok: [node1] => {
    "msg": "https://storage.googleapis.com/kubernetes-release/release/v1.24.6/bin/linux/amd64/kubeadm"
}
Wednesday 08 February 2023  20:51:59 +0200 (0:00:00.516)       0:04:43.119 ****

TASK [download : download_file | Set pathname of cached file] **********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:52:00 +0200 (0:00:00.520)       0:04:43.640 ****

TASK [download : download_file | Create dest directory on node] ********************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:52:02 +0200 (0:00:02.745)       0:04:46.386 ****
Wednesday 08 February 2023  20:52:02 +0200 (0:00:00.059)       0:04:46.445 ****
Wednesday 08 February 2023  20:52:03 +0200 (0:00:00.523)       0:04:46.969 ****

TASK [download : download_file | Validate mirrors] *********************************************************************************************************
ok: [node1] => (item=None)
ok: [node1 -> {{ download_delegate if download_force_cache else inventory_hostname }}]
Wednesday 08 February 2023  20:52:05 +0200 (0:00:01.980)       0:04:48.950 ****

TASK [download : download_file | Get the list of working mirrors] ******************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:52:05 +0200 (0:00:00.086)       0:04:49.036 ****

TASK [download : download_file | Download item] ************************************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:52:09 +0200 (0:00:04.106)       0:04:53.142 ****
Wednesday 08 February 2023  20:52:09 +0200 (0:00:00.044)       0:04:53.186 ****
Wednesday 08 February 2023  20:52:09 +0200 (0:00:00.043)       0:04:53.229 ****
Wednesday 08 February 2023  20:52:09 +0200 (0:00:00.043)       0:04:53.273 ****

TASK [download : download_file | Extract file archives] ****************************************************************************************************
included: /Users/max/DevOps/kubespray/roles/download/tasks/extract_file.yml for node1
Wednesday 08 February 2023  20:52:09 +0200 (0:00:00.067)       0:04:53.341 ****
Wednesday 08 February 2023  20:52:10 +0200 (0:00:00.511)       0:04:53.852 ****

TASK [download : prep_kubeadm_images | Create kubeadm config] **********************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:52:13 +0200 (0:00:02.937)       0:04:56.789 ****

TASK [download : prep_kubeadm_images | Copy kubeadm binary from download dir to system path] ***************************************************************
changed: [node1]
Wednesday 08 February 2023  20:52:15 +0200 (0:00:01.996)       0:04:58.785 ****

TASK [download : prep_kubeadm_images | Set kubeadm binary permissions] *************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:52:16 +0200 (0:00:01.522)       0:05:00.308 ****

TASK [download : prep_kubeadm_images | Generate list of required images] ***********************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:52:18 +0200 (0:00:01.390)       0:05:01.698 ****

TASK [download : prep_kubeadm_images | Parse list of images] ***********************************************************************************************
ok: [node1] => (item=registry.k8s.io/kube-apiserver:v1.24.6)
ok: [node1] => (item=registry.k8s.io/kube-controller-manager:v1.24.6)
ok: [node1] => (item=registry.k8s.io/kube-scheduler:v1.24.6)
ok: [node1] => (item=registry.k8s.io/kube-proxy:v1.24.6)
Wednesday 08 February 2023  20:52:18 +0200 (0:00:00.130)       0:05:01.829 ****

TASK [download : prep_kubeadm_images | Convert list of images to dict for later use] ***********************************************************************
ok: [node1]
Wednesday 08 February 2023  20:52:18 +0200 (0:00:00.064)       0:05:01.893 ****

TASK [download : download | Download files / images] *******************************************************************************************************
included: /Users/max/DevOps/kubespray/roles/download/tasks/download_file.yml for node1 => (item={'key': 'etcd', 'value': {'container': False, 'file': True, 'enabled': True, 'version': 'v3.5.4', 'dest': '/tmp/releases/etcd-v3.5.4-linux-amd64.tar.gz', 'repo': 'quay.io/coreos/etcd', 'tag': 'v3.5.4', 'sha256': 'b1091166153df1ee0bb29b47fb1943ef0ddf0cd5d07a8fe69827580a08134def', 'url': 'https://github.com/etcd-io/etcd/releases/download/v3.5.4/etcd-v3.5.4-linux-amd64.tar.gz', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['etcd']}})
included: /Users/max/DevOps/kubespray/roles/download/tasks/download_file.yml for node1 => (item={'key': 'cni', 'value': {'enabled': True, 'file': True, 'version': 'v1.1.1', 'dest': '/tmp/releases/cni-plugins-linux-amd64-v1.1.1.tgz', 'sha256': 'b275772da4026d2161bf8a8b41ed4786754c8a93ebfb6564006d5da7f23831e5', 'url': 'https://github.com/containernetworking/plugins/releases/download/v1.1.1/cni-plugins-linux-amd64-v1.1.1.tgz', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}})
included: /Users/max/DevOps/kubespray/roles/download/tasks/download_file.yml for node1 => (item={'key': 'kubeadm', 'value': {'enabled': True, 'file': True, 'version': 'v1.24.6', 'dest': '/tmp/releases/kubeadm-v1.24.6-amd64', 'sha256': '7f4443fd42e0e03f6fd0c7218ca7e2634c9255d5f9d7c581fe362e19098aec4c', 'url': 'https://storage.googleapis.com/kubernetes-release/release/v1.24.6/bin/linux/amd64/kubeadm', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}})
included: /Users/max/DevOps/kubespray/roles/download/tasks/download_file.yml for node1 => (item={'key': 'kubelet', 'value': {'enabled': True, 'file': True, 'version': 'v1.24.6', 'dest': '/tmp/releases/kubelet-v1.24.6-amd64', 'sha256': 'f8b606f542327128e404d2e66a72a40dc2ddb4175fb8e93c55effeacea60921b', 'url': 'https://storage.googleapis.com/kubernetes-release/release/v1.24.6/bin/linux/amd64/kubelet', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}})
included: /Users/max/DevOps/kubespray/roles/download/tasks/download_file.yml for node1 => (item={'key': 'kubectl', 'value': {'enabled': True, 'file': True, 'version': 'v1.24.6', 'dest': '/tmp/releases/kubectl-v1.24.6-amd64', 'sha256': '3ba7e61aecb19eadfa5de1c648af1bc66f5980526645d9dfe682d77fc313b74c', 'url': 'https://storage.googleapis.com/kubernetes-release/release/v1.24.6/bin/linux/amd64/kubectl', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}})
included: /Users/max/DevOps/kubespray/roles/download/tasks/download_file.yml for node1 => (item={'key': 'crictl', 'value': {'file': True, 'enabled': True, 'version': 'v1.24.0', 'dest': '/tmp/releases/crictl-v1.24.0-linux-amd64.tar.gz', 'sha256': '3df4a4306e0554aea4fdc26ecef9eea29a58c8460bebfaca3405799787609880', 'url': 'https://github.com/kubernetes-sigs/cri-tools/releases/download/v1.24.0/crictl-v1.24.0-linux-amd64.tar.gz', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}})
included: /Users/max/DevOps/kubespray/roles/download/tasks/download_file.yml for node1 => (item={'key': 'runc', 'value': {'file': True, 'enabled': True, 'version': 'v1.1.4', 'dest': '/tmp/releases/runc', 'sha256': 'db772be63147a4e747b4fe286c7c16a2edc4a8458bd3092ea46aaee77750e8ce', 'url': 'https://github.com/opencontainers/runc/releases/download/v1.1.4/runc.amd64', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}})
included: /Users/max/DevOps/kubespray/roles/download/tasks/download_file.yml for node1 => (item={'key': 'containerd', 'value': {'enabled': True, 'file': True, 'version': '1.6.8', 'dest': '/tmp/releases/containerd-1.6.8-linux-amd64.tar.gz', 'sha256': '3a1322c18ee5ff4b9bd5af6b7b30c923a3eab8af1df05554f530ef8e2b24ac5e', 'url': 'https://github.com/containerd/containerd/releases/download/v1.6.8/containerd-1.6.8-linux-amd64.tar.gz', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}})
included: /Users/max/DevOps/kubespray/roles/download/tasks/download_file.yml for node1 => (item={'key': 'nerdctl', 'value': {'file': True, 'enabled': True, 'version': '0.22.2', 'dest': '/tmp/releases/nerdctl-0.22.2-linux-amd64.tar.gz', 'sha256': 'ad40ecf11c689fad594a05a40fef65adb4df8ecd1ffb6711e13cff5382aeaed9', 'url': 'https://github.com/containerd/nerdctl/releases/download/v0.22.2/nerdctl-0.22.2-linux-amd64.tar.gz', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}})
included: /Users/max/DevOps/kubespray/roles/download/tasks/download_file.yml for node1 => (item={'key': 'calicoctl', 'value': {'enabled': True, 'file': True, 'version': 'v3.23.3', 'dest': '/tmp/releases/calicoctl', 'sha256': 'd9c04ab15bad9d8037192abd2aa4733a01b0b64a461c7b788118a0d6747c1737', 'url': 'https://github.com/projectcalico/calico/releases/download/v3.23.3/calicoctl-linux-amd64', 'mirrors': ['https://github.com/projectcalico/calicoctl/releases/download/v3.23.3/calicoctl-linux-amd64', 'https://github.com/projectcalico/calico/releases/download/v3.23.3/calicoctl-linux-amd64'], 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s_cluster']}})
included: /Users/max/DevOps/kubespray/roles/download/tasks/download_container.yml for node1 => (item={'key': 'calico_node', 'value': {'enabled': True, 'container': True, 'repo': 'quay.io/calico/node', 'tag': 'v3.23.3', 'sha256': '', 'groups': ['k8s_cluster']}})
included: /Users/max/DevOps/kubespray/roles/download/tasks/download_container.yml for node1 => (item={'key': 'calico_cni', 'value': {'enabled': True, 'container': True, 'repo': 'quay.io/calico/cni', 'tag': 'v3.23.3', 'sha256': '', 'groups': ['k8s_cluster']}})
included: /Users/max/DevOps/kubespray/roles/download/tasks/download_container.yml for node1 => (item={'key': 'calico_flexvol', 'value': {'enabled': True, 'container': True, 'repo': 'quay.io/calico/pod2daemon-flexvol', 'tag': 'v3.23.3', 'sha256': '', 'groups': ['k8s_cluster']}})
included: /Users/max/DevOps/kubespray/roles/download/tasks/download_container.yml for node1 => (item={'key': 'calico_policy', 'value': {'enabled': True, 'container': True, 'repo': 'quay.io/calico/kube-controllers', 'tag': 'v3.23.3', 'sha256': '', 'groups': ['k8s_cluster']}})
included: /Users/max/DevOps/kubespray/roles/download/tasks/download_file.yml for node1 => (item={'key': 'calico_crds', 'value': {'file': True, 'enabled': True, 'version': 'v3.23.3', 'dest': '/tmp/releases/calico-v3.23.3-kdd-crds/v3.23.3.tar.gz', 'sha256': 'd25f5c9a3adeba63219f3c8425a8475ebfbca485376a78193ec1e4c74e7a6115', 'url': 'https://github.com/projectcalico/calico/archive/v3.23.3.tar.gz', 'unarchive': True, 'unarchive_extra_opts': ['--strip=3', '--wildcards', '*/libcalico-go/config/crd/'], 'owner': 'root', 'mode': '0755', 'groups': ['kube_control_plane']}})
included: /Users/max/DevOps/kubespray/roles/download/tasks/download_container.yml for node1 => (item={'key': 'pod_infra', 'value': {'enabled': True, 'container': True, 'repo': 'registry.k8s.io/pause', 'tag': '3.6', 'sha256': '', 'groups': ['k8s_cluster']}})
included: /Users/max/DevOps/kubespray/roles/download/tasks/download_container.yml for node1 => (item={'key': 'nginx', 'value': {'enabled': True, 'container': True, 'repo': 'docker.io/library/nginx', 'tag': '1.23.0-alpine', 'sha256': '', 'groups': ['kube_node']}})
included: /Users/max/DevOps/kubespray/roles/download/tasks/download_container.yml for node1 => (item={'key': 'coredns', 'value': {'enabled': True, 'container': True, 'repo': 'registry.k8s.io/coredns/coredns', 'tag': 'v1.8.6', 'sha256': '', 'groups': ['kube_control_plane']}})
included: /Users/max/DevOps/kubespray/roles/download/tasks/download_container.yml for node1 => (item={'key': 'nodelocaldns', 'value': {'enabled': True, 'container': True, 'repo': 'registry.k8s.io/dns/k8s-dns-node-cache', 'tag': '1.21.1', 'sha256': '', 'groups': ['k8s_cluster']}})
included: /Users/max/DevOps/kubespray/roles/download/tasks/download_container.yml for node1 => (item={'key': 'dnsautoscaler', 'value': {'enabled': True, 'container': True, 'repo': 'registry.k8s.io/cpa/cluster-proportional-autoscaler-amd64', 'tag': '1.8.5', 'sha256': '', 'groups': ['kube_control_plane']}})
included: /Users/max/DevOps/kubespray/roles/download/tasks/download_container.yml for node1 => (item={'key': 'metallb_speaker', 'value': {'enabled': True, 'container': True, 'repo': 'quay.io/metallb/speaker', 'tag': 'v0.12.1', 'sha256': '', 'groups': ['kube_control_plane']}})
included: /Users/max/DevOps/kubespray/roles/download/tasks/download_container.yml for node1 => (item={'key': 'metallb_controller', 'value': {'enabled': True, 'container': True, 'repo': 'quay.io/metallb/controller', 'tag': 'v0.12.1', 'sha256': '', 'groups': ['kube_control_plane']}})
included: /Users/max/DevOps/kubespray/roles/download/tasks/download_container.yml for node1 => (item={'key': 'kubeadm_kube-apiserver', 'value': {'enabled': True, 'container': True, 'repo': 'registry.k8s.io/kube-apiserver', 'tag': 'v1.24.6', 'groups': 'k8s_cluster'}})
included: /Users/max/DevOps/kubespray/roles/download/tasks/download_container.yml for node1 => (item={'key': 'kubeadm_kube-controller-manager', 'value': {'enabled': True, 'container': True, 'repo': 'registry.k8s.io/kube-controller-manager', 'tag': 'v1.24.6', 'groups': 'k8s_cluster'}})
included: /Users/max/DevOps/kubespray/roles/download/tasks/download_container.yml for node1 => (item={'key': 'kubeadm_kube-scheduler', 'value': {'enabled': True, 'container': True, 'repo': 'registry.k8s.io/kube-scheduler', 'tag': 'v1.24.6', 'groups': 'k8s_cluster'}})
included: /Users/max/DevOps/kubespray/roles/download/tasks/download_container.yml for node1 => (item={'key': 'kubeadm_kube-proxy', 'value': {'enabled': True, 'container': True, 'repo': 'registry.k8s.io/kube-proxy', 'tag': 'v1.24.6', 'groups': 'k8s_cluster'}})
Wednesday 08 February 2023  20:52:20 +0200 (0:00:02.223)       0:05:04.117 ****

TASK [download : prep_download | Set a few facts] **********************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:52:20 +0200 (0:00:00.058)       0:05:04.176 ****

TASK [download : download_file | Starting download of file] ************************************************************************************************
ok: [node1] => {
    "msg": "https://github.com/etcd-io/etcd/releases/download/v3.5.4/etcd-v3.5.4-linux-amd64.tar.gz"
}
Wednesday 08 February 2023  20:52:20 +0200 (0:00:00.061)       0:05:04.238 ****

TASK [download : download_file | Set pathname of cached file] **********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:52:20 +0200 (0:00:00.063)       0:05:04.302 ****

TASK [download : download_file | Create dest directory on node] ********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:52:22 +0200 (0:00:01.416)       0:05:05.719 ****
Wednesday 08 February 2023  20:52:22 +0200 (0:00:00.062)       0:05:05.781 ****
Wednesday 08 February 2023  20:52:22 +0200 (0:00:00.066)       0:05:05.847 ****

TASK [download : download_file | Validate mirrors] *********************************************************************************************************
ok: [node1] => (item=None)
ok: [node1 -> {{ download_delegate if download_force_cache else inventory_hostname }}]
Wednesday 08 February 2023  20:52:23 +0200 (0:00:01.555)       0:05:07.403 ****

TASK [download : download_file | Get the list of working mirrors] ******************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:52:23 +0200 (0:00:00.087)       0:05:07.491 ****

TASK [download : download_file | Download item] ************************************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:52:25 +0200 (0:00:02.047)       0:05:09.538 ****
Wednesday 08 February 2023  20:52:25 +0200 (0:00:00.044)       0:05:09.582 ****
Wednesday 08 February 2023  20:52:25 +0200 (0:00:00.044)       0:05:09.627 ****
Wednesday 08 February 2023  20:52:26 +0200 (0:00:00.042)       0:05:09.669 ****

TASK [download : download_file | Extract file archives] ****************************************************************************************************
included: /Users/max/DevOps/kubespray/roles/download/tasks/extract_file.yml for node1
Wednesday 08 February 2023  20:52:26 +0200 (0:00:00.071)       0:05:09.740 ****

TASK [download : extract_file | Unpacking archive] *********************************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:52:30 +0200 (0:00:04.271)       0:05:14.012 ****

TASK [download : prep_download | Set a few facts] **********************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:52:30 +0200 (0:00:00.064)       0:05:14.076 ****

TASK [download : download_file | Starting download of file] ************************************************************************************************
ok: [node1] => {
    "msg": "https://github.com/containernetworking/plugins/releases/download/v1.1.1/cni-plugins-linux-amd64-v1.1.1.tgz"
}
Wednesday 08 February 2023  20:52:30 +0200 (0:00:00.068)       0:05:14.145 ****

TASK [download : download_file | Set pathname of cached file] **********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:52:30 +0200 (0:00:00.061)       0:05:14.206 ****

TASK [download : download_file | Create dest directory on node] ********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:52:31 +0200 (0:00:01.317)       0:05:15.523 ****
Wednesday 08 February 2023  20:52:31 +0200 (0:00:00.062)       0:05:15.585 ****
Wednesday 08 February 2023  20:52:32 +0200 (0:00:00.069)       0:05:15.655 ****

TASK [download : download_file | Validate mirrors] *********************************************************************************************************
ok: [node1] => (item=None)
ok: [node1 -> {{ download_delegate if download_force_cache else inventory_hostname }}]
Wednesday 08 February 2023  20:52:33 +0200 (0:00:01.678)       0:05:17.333 ****

TASK [download : download_file | Get the list of working mirrors] ******************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:52:33 +0200 (0:00:00.085)       0:05:17.418 ****

TASK [download : download_file | Download item] ************************************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:52:37 +0200 (0:00:03.376)       0:05:20.795 ****
Wednesday 08 February 2023  20:52:37 +0200 (0:00:00.045)       0:05:20.840 ****
Wednesday 08 February 2023  20:52:37 +0200 (0:00:00.045)       0:05:20.885 ****
Wednesday 08 February 2023  20:52:37 +0200 (0:00:00.044)       0:05:20.929 ****

TASK [download : download_file | Extract file archives] ****************************************************************************************************
included: /Users/max/DevOps/kubespray/roles/download/tasks/extract_file.yml for node1
Wednesday 08 February 2023  20:52:37 +0200 (0:00:00.074)       0:05:21.004 ****
Wednesday 08 February 2023  20:52:37 +0200 (0:00:00.050)       0:05:21.054 ****

TASK [download : prep_download | Set a few facts] **********************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:52:37 +0200 (0:00:00.057)       0:05:21.112 ****

TASK [download : download_file | Starting download of file] ************************************************************************************************
ok: [node1] => {
    "msg": "https://storage.googleapis.com/kubernetes-release/release/v1.24.6/bin/linux/amd64/kubeadm"
}
Wednesday 08 February 2023  20:52:37 +0200 (0:00:00.061)       0:05:21.174 ****

TASK [download : download_file | Set pathname of cached file] **********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:52:37 +0200 (0:00:00.065)       0:05:21.240 ****

TASK [download : download_file | Create dest directory on node] ********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:52:39 +0200 (0:00:01.482)       0:05:22.723 ****
Wednesday 08 February 2023  20:52:39 +0200 (0:00:00.062)       0:05:22.785 ****
Wednesday 08 February 2023  20:52:39 +0200 (0:00:00.069)       0:05:22.854 ****

TASK [download : download_file | Validate mirrors] *********************************************************************************************************
ok: [node1] => (item=None)
ok: [node1 -> {{ download_delegate if download_force_cache else inventory_hostname }}]
Wednesday 08 February 2023  20:52:40 +0200 (0:00:01.236)       0:05:24.091 ****

TASK [download : download_file | Get the list of working mirrors] ******************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:52:40 +0200 (0:00:00.087)       0:05:24.178 ****

TASK [download : download_file | Download item] ************************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:52:41 +0200 (0:00:00.814)       0:05:24.993 ****
Wednesday 08 February 2023  20:52:41 +0200 (0:00:00.044)       0:05:25.037 ****
Wednesday 08 February 2023  20:52:41 +0200 (0:00:00.044)       0:05:25.082 ****
Wednesday 08 February 2023  20:52:41 +0200 (0:00:00.045)       0:05:25.127 ****

TASK [download : download_file | Extract file archives] ****************************************************************************************************
included: /Users/max/DevOps/kubespray/roles/download/tasks/extract_file.yml for node1
Wednesday 08 February 2023  20:52:41 +0200 (0:00:00.073)       0:05:25.200 ****
Wednesday 08 February 2023  20:52:41 +0200 (0:00:00.050)       0:05:25.251 ****

TASK [download : prep_download | Set a few facts] **********************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:52:41 +0200 (0:00:00.058)       0:05:25.310 ****

TASK [download : download_file | Starting download of file] ************************************************************************************************
ok: [node1] => {
    "msg": "https://storage.googleapis.com/kubernetes-release/release/v1.24.6/bin/linux/amd64/kubelet"
}
Wednesday 08 February 2023  20:52:41 +0200 (0:00:00.061)       0:05:25.371 ****

TASK [download : download_file | Set pathname of cached file] **********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:52:41 +0200 (0:00:00.067)       0:05:25.439 ****

TASK [download : download_file | Create dest directory on node] ********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:52:43 +0200 (0:00:01.330)       0:05:26.770 ****
Wednesday 08 February 2023  20:52:43 +0200 (0:00:00.061)       0:05:26.831 ****
Wednesday 08 February 2023  20:52:43 +0200 (0:00:00.068)       0:05:26.900 ****

TASK [download : download_file | Validate mirrors] *********************************************************************************************************
ok: [node1] => (item=None)
ok: [node1 -> {{ download_delegate if download_force_cache else inventory_hostname }}]
Wednesday 08 February 2023  20:52:44 +0200 (0:00:01.131)       0:05:28.031 ****

TASK [download : download_file | Get the list of working mirrors] ******************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:52:44 +0200 (0:00:00.087)       0:05:28.119 ****

TASK [download : download_file | Download item] ************************************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:52:49 +0200 (0:00:04.651)       0:05:32.771 ****
Wednesday 08 February 2023  20:52:49 +0200 (0:00:00.043)       0:05:32.815 ****
Wednesday 08 February 2023  20:52:49 +0200 (0:00:00.044)       0:05:32.859 ****
Wednesday 08 February 2023  20:52:49 +0200 (0:00:00.043)       0:05:32.903 ****

TASK [download : download_file | Extract file archives] ****************************************************************************************************
included: /Users/max/DevOps/kubespray/roles/download/tasks/extract_file.yml for node1
Wednesday 08 February 2023  20:52:49 +0200 (0:00:00.073)       0:05:32.976 ****
Wednesday 08 February 2023  20:52:49 +0200 (0:00:00.052)       0:05:33.029 ****

TASK [download : prep_download | Set a few facts] **********************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:52:49 +0200 (0:00:00.058)       0:05:33.087 ****

TASK [download : download_file | Starting download of file] ************************************************************************************************
ok: [node1] => {
    "msg": "https://storage.googleapis.com/kubernetes-release/release/v1.24.6/bin/linux/amd64/kubectl"
}
Wednesday 08 February 2023  20:52:49 +0200 (0:00:00.065)       0:05:33.153 ****

TASK [download : download_file | Set pathname of cached file] **********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:52:49 +0200 (0:00:00.063)       0:05:33.217 ****

TASK [download : download_file | Create dest directory on node] ********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:52:50 +0200 (0:00:01.402)       0:05:34.619 ****
Wednesday 08 February 2023  20:52:51 +0200 (0:00:00.061)       0:05:34.681 ****
Wednesday 08 February 2023  20:52:51 +0200 (0:00:00.066)       0:05:34.748 ****

TASK [download : download_file | Validate mirrors] *********************************************************************************************************
ok: [node1] => (item=None)
ok: [node1 -> {{ download_delegate if download_force_cache else inventory_hostname }}]
Wednesday 08 February 2023  20:52:52 +0200 (0:00:01.129)       0:05:35.877 ****

TASK [download : download_file | Get the list of working mirrors] ******************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:52:52 +0200 (0:00:00.084)       0:05:35.961 ****

TASK [download : download_file | Download item] ************************************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:52:55 +0200 (0:00:02.748)       0:05:38.710 ****
Wednesday 08 February 2023  20:52:55 +0200 (0:00:00.045)       0:05:38.756 ****
Wednesday 08 February 2023  20:52:55 +0200 (0:00:00.041)       0:05:38.798 ****
Wednesday 08 February 2023  20:52:55 +0200 (0:00:00.044)       0:05:38.842 ****

TASK [download : download_file | Extract file archives] ****************************************************************************************************
included: /Users/max/DevOps/kubespray/roles/download/tasks/extract_file.yml for node1
Wednesday 08 February 2023  20:52:55 +0200 (0:00:00.073)       0:05:38.916 ****
Wednesday 08 February 2023  20:52:55 +0200 (0:00:00.051)       0:05:38.967 ****

TASK [download : prep_download | Set a few facts] **********************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:52:55 +0200 (0:00:00.059)       0:05:39.027 ****

TASK [download : download_file | Starting download of file] ************************************************************************************************
ok: [node1] => {
    "msg": "https://github.com/kubernetes-sigs/cri-tools/releases/download/v1.24.0/crictl-v1.24.0-linux-amd64.tar.gz"
}
Wednesday 08 February 2023  20:52:55 +0200 (0:00:00.061)       0:05:39.089 ****

TASK [download : download_file | Set pathname of cached file] **********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:52:55 +0200 (0:00:00.061)       0:05:39.150 ****

TASK [download : download_file | Create dest directory on node] ********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:52:57 +0200 (0:00:01.688)       0:05:40.839 ****
Wednesday 08 February 2023  20:52:57 +0200 (0:00:00.060)       0:05:40.899 ****
Wednesday 08 February 2023  20:52:57 +0200 (0:00:00.067)       0:05:40.966 ****

TASK [download : download_file | Validate mirrors] *********************************************************************************************************
ok: [node1] => (item=None)
ok: [node1 -> {{ download_delegate if download_force_cache else inventory_hostname }}]
Wednesday 08 February 2023  20:52:59 +0200 (0:00:01.746)       0:05:42.713 ****

TASK [download : download_file | Get the list of working mirrors] ******************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:52:59 +0200 (0:00:00.084)       0:05:42.797 ****

TASK [download : download_file | Download item] ************************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:52:59 +0200 (0:00:00.827)       0:05:43.625 ****
Wednesday 08 February 2023  20:53:00 +0200 (0:00:00.045)       0:05:43.670 ****
Wednesday 08 February 2023  20:53:00 +0200 (0:00:00.046)       0:05:43.716 ****
Wednesday 08 February 2023  20:53:00 +0200 (0:00:00.044)       0:05:43.760 ****

TASK [download : download_file | Extract file archives] ****************************************************************************************************
included: /Users/max/DevOps/kubespray/roles/download/tasks/extract_file.yml for node1
Wednesday 08 February 2023  20:53:00 +0200 (0:00:00.071)       0:05:43.832 ****

TASK [download : extract_file | Unpacking archive] *********************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:53:04 +0200 (0:00:04.208)       0:05:48.040 ****

TASK [download : prep_download | Set a few facts] **********************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:53:04 +0200 (0:00:00.058)       0:05:48.099 ****

TASK [download : download_file | Starting download of file] ************************************************************************************************
ok: [node1] => {
    "msg": "https://github.com/opencontainers/runc/releases/download/v1.1.4/runc.amd64"
}
Wednesday 08 February 2023  20:53:04 +0200 (0:00:00.061)       0:05:48.161 ****

TASK [download : download_file | Set pathname of cached file] **********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:53:04 +0200 (0:00:00.063)       0:05:48.224 ****

TASK [download : download_file | Create dest directory on node] ********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:53:06 +0200 (0:00:01.636)       0:05:49.861 ****
Wednesday 08 February 2023  20:53:06 +0200 (0:00:00.062)       0:05:49.924 ****
Wednesday 08 February 2023  20:53:06 +0200 (0:00:00.066)       0:05:49.990 ****

TASK [download : download_file | Validate mirrors] *********************************************************************************************************
ok: [node1] => (item=None)
ok: [node1 -> {{ download_delegate if download_force_cache else inventory_hostname }}]
Wednesday 08 February 2023  20:53:07 +0200 (0:00:01.450)       0:05:51.441 ****

TASK [download : download_file | Get the list of working mirrors] ******************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:53:07 +0200 (0:00:00.085)       0:05:51.527 ****

TASK [download : download_file | Download item] ************************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:53:08 +0200 (0:00:01.012)       0:05:52.539 ****
Wednesday 08 February 2023  20:53:08 +0200 (0:00:00.043)       0:05:52.583 ****
Wednesday 08 February 2023  20:53:08 +0200 (0:00:00.043)       0:05:52.626 ****
Wednesday 08 February 2023  20:53:09 +0200 (0:00:00.043)       0:05:52.670 ****

TASK [download : download_file | Extract file archives] ****************************************************************************************************
included: /Users/max/DevOps/kubespray/roles/download/tasks/extract_file.yml for node1
Wednesday 08 February 2023  20:53:09 +0200 (0:00:00.073)       0:05:52.743 ****
Wednesday 08 February 2023  20:53:09 +0200 (0:00:00.050)       0:05:52.794 ****

TASK [download : prep_download | Set a few facts] **********************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:53:09 +0200 (0:00:00.059)       0:05:52.854 ****

TASK [download : download_file | Starting download of file] ************************************************************************************************
ok: [node1] => {
    "msg": "https://github.com/containerd/containerd/releases/download/v1.6.8/containerd-1.6.8-linux-amd64.tar.gz"
}
Wednesday 08 February 2023  20:53:09 +0200 (0:00:00.063)       0:05:52.918 ****

TASK [download : download_file | Set pathname of cached file] **********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:53:09 +0200 (0:00:00.065)       0:05:52.983 ****

TASK [download : download_file | Create dest directory on node] ********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:53:10 +0200 (0:00:01.406)       0:05:54.390 ****
Wednesday 08 February 2023  20:53:10 +0200 (0:00:00.063)       0:05:54.454 ****
Wednesday 08 February 2023  20:53:10 +0200 (0:00:00.076)       0:05:54.530 ****

TASK [download : download_file | Validate mirrors] *********************************************************************************************************
ok: [node1] => (item=None)
ok: [node1 -> {{ download_delegate if download_force_cache else inventory_hostname }}]
Wednesday 08 February 2023  20:53:12 +0200 (0:00:01.246)       0:05:55.777 ****

TASK [download : download_file | Get the list of working mirrors] ******************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:53:12 +0200 (0:00:00.084)       0:05:55.862 ****

TASK [download : download_file | Download item] ************************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:53:13 +0200 (0:00:00.866)       0:05:56.729 ****
Wednesday 08 February 2023  20:53:13 +0200 (0:00:00.045)       0:05:56.774 ****
Wednesday 08 February 2023  20:53:13 +0200 (0:00:00.043)       0:05:56.818 ****
Wednesday 08 February 2023  20:53:13 +0200 (0:00:00.042)       0:05:56.861 ****

TASK [download : download_file | Extract file archives] ****************************************************************************************************
included: /Users/max/DevOps/kubespray/roles/download/tasks/extract_file.yml for node1
Wednesday 08 February 2023  20:53:13 +0200 (0:00:00.072)       0:05:56.933 ****
Wednesday 08 February 2023  20:53:13 +0200 (0:00:00.051)       0:05:56.985 ****

TASK [download : prep_download | Set a few facts] **********************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:53:13 +0200 (0:00:00.059)       0:05:57.045 ****

TASK [download : download_file | Starting download of file] ************************************************************************************************
ok: [node1] => {
    "msg": "https://github.com/containerd/nerdctl/releases/download/v0.22.2/nerdctl-0.22.2-linux-amd64.tar.gz"
}
Wednesday 08 February 2023  20:53:13 +0200 (0:00:00.062)       0:05:57.107 ****

TASK [download : download_file | Set pathname of cached file] **********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:53:13 +0200 (0:00:00.062)       0:05:57.170 ****

TASK [download : download_file | Create dest directory on node] ********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:53:14 +0200 (0:00:01.414)       0:05:58.585 ****
Wednesday 08 February 2023  20:53:15 +0200 (0:00:00.062)       0:05:58.647 ****
Wednesday 08 February 2023  20:53:15 +0200 (0:00:00.067)       0:05:58.715 ****

TASK [download : download_file | Validate mirrors] *********************************************************************************************************
ok: [node1] => (item=None)
ok: [node1 -> {{ download_delegate if download_force_cache else inventory_hostname }}]
Wednesday 08 February 2023  20:53:16 +0200 (0:00:01.523)       0:06:00.239 ****

TASK [download : download_file | Get the list of working mirrors] ******************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:53:16 +0200 (0:00:00.085)       0:06:00.325 ****

TASK [download : download_file | Download item] ************************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:53:17 +0200 (0:00:01.119)       0:06:01.445 ****
Wednesday 08 February 2023  20:53:17 +0200 (0:00:00.043)       0:06:01.489 ****
Wednesday 08 February 2023  20:53:17 +0200 (0:00:00.044)       0:06:01.533 ****
Wednesday 08 February 2023  20:53:17 +0200 (0:00:00.043)       0:06:01.576 ****

TASK [download : download_file | Extract file archives] ****************************************************************************************************
included: /Users/max/DevOps/kubespray/roles/download/tasks/extract_file.yml for node1
Wednesday 08 February 2023  20:53:18 +0200 (0:00:00.073)       0:06:01.649 ****

TASK [download : extract_file | Unpacking archive] *********************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:53:21 +0200 (0:00:03.403)       0:06:05.053 ****

TASK [download : prep_download | Set a few facts] **********************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:53:21 +0200 (0:00:00.060)       0:06:05.113 ****

TASK [download : download_file | Starting download of file] ************************************************************************************************
ok: [node1] => {
    "msg": "https://github.com/projectcalico/calico/releases/download/v3.23.3/calicoctl-linux-amd64"
}
Wednesday 08 February 2023  20:53:21 +0200 (0:00:00.064)       0:06:05.178 ****

TASK [download : download_file | Set pathname of cached file] **********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:53:21 +0200 (0:00:00.062)       0:06:05.240 ****

TASK [download : download_file | Create dest directory on node] ********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:53:23 +0200 (0:00:01.409)       0:06:06.650 ****
Wednesday 08 February 2023  20:53:23 +0200 (0:00:00.062)       0:06:06.712 ****
Wednesday 08 February 2023  20:53:23 +0200 (0:00:00.070)       0:06:06.782 ****
FAILED - RETRYING: [node1]: download_file | Validate mirrors (4 retries left).
FAILED - RETRYING: [node1]: download_file | Validate mirrors (3 retries left).
FAILED - RETRYING: [node1]: download_file | Validate mirrors (2 retries left).
FAILED - RETRYING: [node1]: download_file | Validate mirrors (1 retries left).

TASK [download : download_file | Validate mirrors] *********************************************************************************************************
failed: [node1] (item=None) => {"attempts": 4, "censored": "the output has been hidden due to the fact that 'no_log: true' was specified for this result", "changed": false}
ok: [node1] => (item=None)
fatal: [node1 -> {{ download_delegate if download_force_cache else inventory_hostname }}]: FAILED! => {"censored": "the output has been hidden due to the fact that 'no_log: true' was specified for this result", "changed": false}
...ignoring
Wednesday 08 February 2023  20:53:50 +0200 (0:00:27.774)       0:06:34.557 ****

TASK [download : download_file | Get the list of working mirrors] ******************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:53:51 +0200 (0:00:00.086)       0:06:34.644 ****

TASK [download : download_file | Download item] ************************************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:53:53 +0200 (0:00:02.136)       0:06:36.781 ****
Wednesday 08 February 2023  20:53:53 +0200 (0:00:00.044)       0:06:36.825 ****
Wednesday 08 February 2023  20:53:53 +0200 (0:00:00.044)       0:06:36.869 ****
Wednesday 08 February 2023  20:53:53 +0200 (0:00:00.045)       0:06:36.915 ****

TASK [download : download_file | Extract file archives] ****************************************************************************************************
included: /Users/max/DevOps/kubespray/roles/download/tasks/extract_file.yml for node1
Wednesday 08 February 2023  20:53:53 +0200 (0:00:00.074)       0:06:36.989 ****
Wednesday 08 February 2023  20:53:53 +0200 (0:00:00.050)       0:06:37.040 ****

TASK [download : set default values for flag variables] ****************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:53:53 +0200 (0:00:00.059)       0:06:37.100 ****

TASK [download : set_container_facts | Display the name of the image being processed] **********************************************************************
ok: [node1] => {
    "msg": "quay.io/calico/node"
}
Wednesday 08 February 2023  20:53:53 +0200 (0:00:00.061)       0:06:37.161 ****

TASK [download : set_container_facts | Set if containers should be pulled by digest] ***********************************************************************
ok: [node1]
Wednesday 08 February 2023  20:53:53 +0200 (0:00:00.067)       0:06:37.229 ****

TASK [download : set_container_facts | Define by what name to pull the image] ******************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:53:53 +0200 (0:00:00.064)       0:06:37.293 ****

TASK [download : set_container_facts | Define file name of image] ******************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:53:53 +0200 (0:00:00.062)       0:06:37.355 ****

TASK [download : set_container_facts | Define path of image] ***********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:53:53 +0200 (0:00:00.063)       0:06:37.418 ****
Wednesday 08 February 2023  20:53:53 +0200 (0:00:00.046)       0:06:37.465 ****

TASK [download : Set image save/load command for containerd] ***********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:53:53 +0200 (0:00:00.064)       0:06:37.530 ****
Wednesday 08 February 2023  20:53:53 +0200 (0:00:00.048)       0:06:37.578 ****
Wednesday 08 February 2023  20:53:53 +0200 (0:00:00.044)       0:06:37.623 ****

TASK [download : Set image save/load command for containerd on localhost] **********************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:53:54 +0200 (0:00:00.069)       0:06:37.692 ****
Wednesday 08 February 2023  20:53:54 +0200 (0:00:00.045)       0:06:37.738 ****

TASK [download : download_container | Prepare container download] ******************************************************************************************
included: /Users/max/DevOps/kubespray/roles/download/tasks/check_pull_required.yml for node1
Wednesday 08 February 2023  20:53:54 +0200 (0:00:00.084)       0:06:37.822 ****

TASK [download : check_pull_required |  Generate a list of information about the images on a node] *********************************************************
ok: [node1]
Wednesday 08 February 2023  20:53:55 +0200 (0:00:01.533)       0:06:39.355 ****

TASK [download : check_pull_required | Set pull_required if the desired image is not yet loaded] ***********************************************************
ok: [node1]
Wednesday 08 February 2023  20:53:55 +0200 (0:00:00.064)       0:06:39.420 ****
Wednesday 08 February 2023  20:53:55 +0200 (0:00:00.045)       0:06:39.465 ****

TASK [download : debug] ************************************************************************************************************************************
ok: [node1] => {
    "msg": "Pull quay.io/calico/node:v3.23.3 required is: True"
}
Wednesday 08 February 2023  20:53:55 +0200 (0:00:00.064)       0:06:39.530 ****
Wednesday 08 February 2023  20:53:55 +0200 (0:00:00.044)       0:06:39.574 ****
Wednesday 08 February 2023  20:53:55 +0200 (0:00:00.045)       0:06:39.619 ****
Wednesday 08 February 2023  20:53:56 +0200 (0:00:00.062)       0:06:39.682 ****

TASK [download : download_container | Download image if required] ******************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:54:02 +0200 (0:00:06.937)       0:06:46.620 ****
Wednesday 08 February 2023  20:54:03 +0200 (0:00:00.051)       0:06:46.672 ****
Wednesday 08 February 2023  20:54:03 +0200 (0:00:00.045)       0:06:46.718 ****
Wednesday 08 February 2023  20:54:03 +0200 (0:00:00.045)       0:06:46.764 ****
Wednesday 08 February 2023  20:54:03 +0200 (0:00:00.046)       0:06:46.811 ****

TASK [download : download_container | Remove container image from cache] ***********************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:54:04 +0200 (0:00:01.331)       0:06:48.142 ****

TASK [download : set default values for flag variables] ****************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:54:04 +0200 (0:00:00.060)       0:06:48.203 ****

TASK [download : set_container_facts | Display the name of the image being processed] **********************************************************************
ok: [node1] => {
    "msg": "quay.io/calico/cni"
}
Wednesday 08 February 2023  20:54:04 +0200 (0:00:00.063)       0:06:48.266 ****

TASK [download : set_container_facts | Set if containers should be pulled by digest] ***********************************************************************
ok: [node1]
Wednesday 08 February 2023  20:54:04 +0200 (0:00:00.062)       0:06:48.328 ****

TASK [download : set_container_facts | Define by what name to pull the image] ******************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:54:04 +0200 (0:00:00.063)       0:06:48.392 ****

TASK [download : set_container_facts | Define file name of image] ******************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:54:04 +0200 (0:00:00.061)       0:06:48.453 ****

TASK [download : set_container_facts | Define path of image] ***********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:54:04 +0200 (0:00:00.059)       0:06:48.513 ****
Wednesday 08 February 2023  20:54:04 +0200 (0:00:00.049)       0:06:48.562 ****

TASK [download : Set image save/load command for containerd] ***********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:54:04 +0200 (0:00:00.062)       0:06:48.624 ****
Wednesday 08 February 2023  20:54:05 +0200 (0:00:00.045)       0:06:48.670 ****
Wednesday 08 February 2023  20:54:05 +0200 (0:00:00.044)       0:06:48.715 ****

TASK [download : Set image save/load command for containerd on localhost] **********************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:54:05 +0200 (0:00:00.065)       0:06:48.781 ****
Wednesday 08 February 2023  20:54:05 +0200 (0:00:00.044)       0:06:48.826 ****

TASK [download : download_container | Prepare container download] ******************************************************************************************
included: /Users/max/DevOps/kubespray/roles/download/tasks/check_pull_required.yml for node1
Wednesday 08 February 2023  20:54:05 +0200 (0:00:00.083)       0:06:48.909 ****

TASK [download : check_pull_required |  Generate a list of information about the images on a node] *********************************************************
ok: [node1]
Wednesday 08 February 2023  20:54:06 +0200 (0:00:01.689)       0:06:50.599 ****

TASK [download : check_pull_required | Set pull_required if the desired image is not yet loaded] ***********************************************************
ok: [node1]
Wednesday 08 February 2023  20:54:07 +0200 (0:00:00.064)       0:06:50.663 ****
Wednesday 08 February 2023  20:54:07 +0200 (0:00:00.046)       0:06:50.710 ****

TASK [download : debug] ************************************************************************************************************************************
ok: [node1] => {
    "msg": "Pull quay.io/calico/cni:v3.23.3 required is: True"
}
Wednesday 08 February 2023  20:54:07 +0200 (0:00:00.065)       0:06:50.775 ****
Wednesday 08 February 2023  20:54:07 +0200 (0:00:00.043)       0:06:50.819 ****
Wednesday 08 February 2023  20:54:07 +0200 (0:00:00.043)       0:06:50.862 ****
Wednesday 08 February 2023  20:54:07 +0200 (0:00:00.060)       0:06:50.922 ****

TASK [download : download_container | Download image if required] ******************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:54:16 +0200 (0:00:09.628)       0:07:00.551 ****
Wednesday 08 February 2023  20:54:16 +0200 (0:00:00.053)       0:07:00.604 ****
Wednesday 08 February 2023  20:54:17 +0200 (0:00:00.044)       0:07:00.648 ****
Wednesday 08 February 2023  20:54:17 +0200 (0:00:00.044)       0:07:00.693 ****
Wednesday 08 February 2023  20:54:17 +0200 (0:00:00.044)       0:07:00.737 ****

TASK [download : download_container | Remove container image from cache] ***********************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:54:19 +0200 (0:00:02.170)       0:07:02.907 ****

TASK [download : set default values for flag variables] ****************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:54:19 +0200 (0:00:00.062)       0:07:02.969 ****

TASK [download : set_container_facts | Display the name of the image being processed] **********************************************************************
ok: [node1] => {
    "msg": "quay.io/calico/pod2daemon-flexvol"
}
Wednesday 08 February 2023  20:54:19 +0200 (0:00:00.062)       0:07:03.032 ****

TASK [download : set_container_facts | Set if containers should be pulled by digest] ***********************************************************************
ok: [node1]
Wednesday 08 February 2023  20:54:19 +0200 (0:00:00.062)       0:07:03.095 ****

TASK [download : set_container_facts | Define by what name to pull the image] ******************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:54:19 +0200 (0:00:00.063)       0:07:03.159 ****

TASK [download : set_container_facts | Define file name of image] ******************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:54:19 +0200 (0:00:00.065)       0:07:03.224 ****

TASK [download : set_container_facts | Define path of image] ***********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:54:19 +0200 (0:00:00.062)       0:07:03.287 ****
Wednesday 08 February 2023  20:54:19 +0200 (0:00:00.044)       0:07:03.332 ****

TASK [download : Set image save/load command for containerd] ***********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:54:19 +0200 (0:00:00.063)       0:07:03.395 ****
Wednesday 08 February 2023  20:54:19 +0200 (0:00:00.043)       0:07:03.439 ****
Wednesday 08 February 2023  20:54:19 +0200 (0:00:00.044)       0:07:03.483 ****

TASK [download : Set image save/load command for containerd on localhost] **********************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:54:19 +0200 (0:00:00.068)       0:07:03.552 ****
Wednesday 08 February 2023  20:54:19 +0200 (0:00:00.045)       0:07:03.598 ****

TASK [download : download_container | Prepare container download] ******************************************************************************************
included: /Users/max/DevOps/kubespray/roles/download/tasks/check_pull_required.yml for node1
Wednesday 08 February 2023  20:54:20 +0200 (0:00:00.083)       0:07:03.682 ****

TASK [download : check_pull_required |  Generate a list of information about the images on a node] *********************************************************
ok: [node1]
Wednesday 08 February 2023  20:54:21 +0200 (0:00:01.559)       0:07:05.241 ****

TASK [download : check_pull_required | Set pull_required if the desired image is not yet loaded] ***********************************************************
ok: [node1]
Wednesday 08 February 2023  20:54:21 +0200 (0:00:00.064)       0:07:05.305 ****
Wednesday 08 February 2023  20:54:21 +0200 (0:00:00.046)       0:07:05.352 ****

TASK [download : debug] ************************************************************************************************************************************
ok: [node1] => {
    "msg": "Pull quay.io/calico/pod2daemon-flexvol:v3.23.3 required is: True"
}
Wednesday 08 February 2023  20:54:21 +0200 (0:00:00.064)       0:07:05.417 ****
Wednesday 08 February 2023  20:54:21 +0200 (0:00:00.043)       0:07:05.460 ****
Wednesday 08 February 2023  20:54:21 +0200 (0:00:00.042)       0:07:05.502 ****
Wednesday 08 February 2023  20:54:21 +0200 (0:00:00.061)       0:07:05.564 ****

TASK [download : download_container | Download image if required] ******************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:54:26 +0200 (0:00:04.507)       0:07:10.072 ****
Wednesday 08 February 2023  20:54:26 +0200 (0:00:00.052)       0:07:10.124 ****
Wednesday 08 February 2023  20:54:26 +0200 (0:00:00.046)       0:07:10.170 ****
Wednesday 08 February 2023  20:54:26 +0200 (0:00:00.044)       0:07:10.215 ****
Wednesday 08 February 2023  20:54:26 +0200 (0:00:00.044)       0:07:10.259 ****

TASK [download : download_container | Remove container image from cache] ***********************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:54:28 +0200 (0:00:01.643)       0:07:11.903 ****

TASK [download : set default values for flag variables] ****************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:54:28 +0200 (0:00:00.057)       0:07:11.961 ****

TASK [download : set_container_facts | Display the name of the image being processed] **********************************************************************
ok: [node1] => {
    "msg": "quay.io/calico/kube-controllers"
}
Wednesday 08 February 2023  20:54:28 +0200 (0:00:00.061)       0:07:12.023 ****

TASK [download : set_container_facts | Set if containers should be pulled by digest] ***********************************************************************
ok: [node1]
Wednesday 08 February 2023  20:54:28 +0200 (0:00:00.063)       0:07:12.086 ****

TASK [download : set_container_facts | Define by what name to pull the image] ******************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:54:28 +0200 (0:00:00.062)       0:07:12.148 ****

TASK [download : set_container_facts | Define file name of image] ******************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:54:28 +0200 (0:00:00.151)       0:07:12.300 ****

TASK [download : set_container_facts | Define path of image] ***********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:54:28 +0200 (0:00:00.059)       0:07:12.360 ****
Wednesday 08 February 2023  20:54:28 +0200 (0:00:00.043)       0:07:12.403 ****

TASK [download : Set image save/load command for containerd] ***********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:54:28 +0200 (0:00:00.063)       0:07:12.466 ****
Wednesday 08 February 2023  20:54:28 +0200 (0:00:00.044)       0:07:12.510 ****
Wednesday 08 February 2023  20:54:28 +0200 (0:00:00.045)       0:07:12.556 ****

TASK [download : Set image save/load command for containerd on localhost] **********************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:54:28 +0200 (0:00:00.068)       0:07:12.625 ****
Wednesday 08 February 2023  20:54:29 +0200 (0:00:00.046)       0:07:12.671 ****

TASK [download : download_container | Prepare container download] ******************************************************************************************
included: /Users/max/DevOps/kubespray/roles/download/tasks/check_pull_required.yml for node1
Wednesday 08 February 2023  20:54:29 +0200 (0:00:00.081)       0:07:12.753 ****

TASK [download : check_pull_required |  Generate a list of information about the images on a node] *********************************************************
ok: [node1]
Wednesday 08 February 2023  20:54:31 +0200 (0:00:02.122)       0:07:14.876 ****

TASK [download : check_pull_required | Set pull_required if the desired image is not yet loaded] ***********************************************************
ok: [node1]
Wednesday 08 February 2023  20:54:31 +0200 (0:00:00.065)       0:07:14.941 ****
Wednesday 08 February 2023  20:54:31 +0200 (0:00:00.047)       0:07:14.989 ****

TASK [download : debug] ************************************************************************************************************************************
ok: [node1] => {
    "msg": "Pull quay.io/calico/kube-controllers:v3.23.3 required is: True"
}
Wednesday 08 February 2023  20:54:31 +0200 (0:00:00.066)       0:07:15.055 ****
Wednesday 08 February 2023  20:54:31 +0200 (0:00:00.043)       0:07:15.099 ****
Wednesday 08 February 2023  20:54:31 +0200 (0:00:00.042)       0:07:15.141 ****
Wednesday 08 February 2023  20:54:31 +0200 (0:00:00.064)       0:07:15.206 ****

TASK [download : download_container | Download image if required] ******************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:54:43 +0200 (0:00:12.070)       0:07:27.277 ****
Wednesday 08 February 2023  20:54:43 +0200 (0:00:00.054)       0:07:27.332 ****
Wednesday 08 February 2023  20:54:43 +0200 (0:00:00.045)       0:07:27.377 ****
Wednesday 08 February 2023  20:54:43 +0200 (0:00:00.046)       0:07:27.424 ****
Wednesday 08 February 2023  20:54:43 +0200 (0:00:00.045)       0:07:27.469 ****

TASK [download : download_container | Remove container image from cache] ***********************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:54:45 +0200 (0:00:02.148)       0:07:29.618 ****

TASK [download : prep_download | Set a few facts] **********************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:54:46 +0200 (0:00:00.060)       0:07:29.678 ****

TASK [download : download_file | Starting download of file] ************************************************************************************************
ok: [node1] => {
    "msg": "https://github.com/projectcalico/calico/archive/v3.23.3.tar.gz"
}
Wednesday 08 February 2023  20:54:46 +0200 (0:00:00.063)       0:07:29.742 ****

TASK [download : download_file | Set pathname of cached file] **********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:54:46 +0200 (0:00:00.062)       0:07:29.805 ****

TASK [download : download_file | Create dest directory on node] ********************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:54:47 +0200 (0:00:01.628)       0:07:31.433 ****
Wednesday 08 February 2023  20:54:47 +0200 (0:00:00.062)       0:07:31.496 ****
Wednesday 08 February 2023  20:54:47 +0200 (0:00:00.067)       0:07:31.564 ****

TASK [download : download_file | Validate mirrors] *********************************************************************************************************
ok: [node1] => (item=None)
ok: [node1 -> {{ download_delegate if download_force_cache else inventory_hostname }}]
Wednesday 08 February 2023  20:54:49 +0200 (0:00:01.560)       0:07:33.124 ****

TASK [download : download_file | Get the list of working mirrors] ******************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:54:49 +0200 (0:00:00.085)       0:07:33.210 ****

TASK [download : download_file | Download item] ************************************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:54:51 +0200 (0:00:02.341)       0:07:35.551 ****
Wednesday 08 February 2023  20:54:51 +0200 (0:00:00.045)       0:07:35.597 ****
Wednesday 08 February 2023  20:54:52 +0200 (0:00:00.044)       0:07:35.641 ****
Wednesday 08 February 2023  20:54:52 +0200 (0:00:00.043)       0:07:35.685 ****

TASK [download : download_file | Extract file archives] ****************************************************************************************************
included: /Users/max/DevOps/kubespray/roles/download/tasks/extract_file.yml for node1
Wednesday 08 February 2023  20:54:52 +0200 (0:00:00.072)       0:07:35.758 ****

TASK [download : extract_file | Unpacking archive] *********************************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:54:56 +0200 (0:00:04.320)       0:07:40.079 ****

TASK [download : set default values for flag variables] ****************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:54:56 +0200 (0:00:00.061)       0:07:40.140 ****

TASK [download : set_container_facts | Display the name of the image being processed] **********************************************************************
ok: [node1] => {
    "msg": "registry.k8s.io/pause"
}
Wednesday 08 February 2023  20:54:56 +0200 (0:00:00.063)       0:07:40.204 ****

TASK [download : set_container_facts | Set if containers should be pulled by digest] ***********************************************************************
ok: [node1]
Wednesday 08 February 2023  20:54:56 +0200 (0:00:00.061)       0:07:40.265 ****

TASK [download : set_container_facts | Define by what name to pull the image] ******************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:54:56 +0200 (0:00:00.061)       0:07:40.327 ****

TASK [download : set_container_facts | Define file name of image] ******************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:54:56 +0200 (0:00:00.061)       0:07:40.389 ****

TASK [download : set_container_facts | Define path of image] ***********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:54:56 +0200 (0:00:00.061)       0:07:40.451 ****
Wednesday 08 February 2023  20:54:56 +0200 (0:00:00.043)       0:07:40.494 ****

TASK [download : Set image save/load command for containerd] ***********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:54:56 +0200 (0:00:00.065)       0:07:40.560 ****
Wednesday 08 February 2023  20:54:56 +0200 (0:00:00.044)       0:07:40.605 ****
Wednesday 08 February 2023  20:54:57 +0200 (0:00:00.045)       0:07:40.650 ****

TASK [download : Set image save/load command for containerd on localhost] **********************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:54:57 +0200 (0:00:00.065)       0:07:40.716 ****
Wednesday 08 February 2023  20:54:57 +0200 (0:00:00.046)       0:07:40.763 ****

TASK [download : download_container | Prepare container download] ******************************************************************************************
included: /Users/max/DevOps/kubespray/roles/download/tasks/check_pull_required.yml for node1
Wednesday 08 February 2023  20:54:57 +0200 (0:00:00.083)       0:07:40.846 ****

TASK [download : check_pull_required |  Generate a list of information about the images on a node] *********************************************************
ok: [node1]
Wednesday 08 February 2023  20:54:58 +0200 (0:00:01.565)       0:07:42.412 ****

TASK [download : check_pull_required | Set pull_required if the desired image is not yet loaded] ***********************************************************
ok: [node1]
Wednesday 08 February 2023  20:54:58 +0200 (0:00:00.066)       0:07:42.479 ****
Wednesday 08 February 2023  20:54:58 +0200 (0:00:00.044)       0:07:42.524 ****

TASK [download : debug] ************************************************************************************************************************************
ok: [node1] => {
    "msg": "Pull registry.k8s.io/pause:3.6 required is: True"
}
Wednesday 08 February 2023  20:54:58 +0200 (0:00:00.067)       0:07:42.591 ****
Wednesday 08 February 2023  20:54:59 +0200 (0:00:00.046)       0:07:42.638 ****
Wednesday 08 February 2023  20:54:59 +0200 (0:00:00.043)       0:07:42.681 ****
Wednesday 08 February 2023  20:54:59 +0200 (0:00:00.059)       0:07:42.741 ****

TASK [download : download_container | Download image if required] ******************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:55:00 +0200 (0:00:01.070)       0:07:43.811 ****
Wednesday 08 February 2023  20:55:00 +0200 (0:00:00.053)       0:07:43.865 ****
Wednesday 08 February 2023  20:55:00 +0200 (0:00:00.048)       0:07:43.913 ****
Wednesday 08 February 2023  20:55:00 +0200 (0:00:00.043)       0:07:43.957 ****
Wednesday 08 February 2023  20:55:00 +0200 (0:00:00.046)       0:07:44.004 ****

TASK [download : download_container | Remove container image from cache] ***********************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:55:01 +0200 (0:00:01.370)       0:07:45.375 ****

TASK [download : set default values for flag variables] ****************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:55:01 +0200 (0:00:00.059)       0:07:45.434 ****

TASK [download : set_container_facts | Display the name of the image being processed] **********************************************************************
ok: [node1] => {
    "msg": "docker.io/library/nginx"
}
Wednesday 08 February 2023  20:55:01 +0200 (0:00:00.064)       0:07:45.499 ****

TASK [download : set_container_facts | Set if containers should be pulled by digest] ***********************************************************************
ok: [node1]
Wednesday 08 February 2023  20:55:01 +0200 (0:00:00.065)       0:07:45.565 ****

TASK [download : set_container_facts | Define by what name to pull the image] ******************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:55:02 +0200 (0:00:00.069)       0:07:45.635 ****

TASK [download : set_container_facts | Define file name of image] ******************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:55:02 +0200 (0:00:00.060)       0:07:45.696 ****

TASK [download : set_container_facts | Define path of image] ***********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:55:02 +0200 (0:00:00.061)       0:07:45.757 ****
Wednesday 08 February 2023  20:55:02 +0200 (0:00:00.044)       0:07:45.802 ****

TASK [download : Set image save/load command for containerd] ***********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:55:02 +0200 (0:00:00.063)       0:07:45.865 ****
Wednesday 08 February 2023  20:55:02 +0200 (0:00:00.044)       0:07:45.910 ****
Wednesday 08 February 2023  20:55:02 +0200 (0:00:00.047)       0:07:45.957 ****

TASK [download : Set image save/load command for containerd on localhost] **********************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:55:02 +0200 (0:00:00.068)       0:07:46.025 ****
Wednesday 08 February 2023  20:55:02 +0200 (0:00:00.045)       0:07:46.071 ****

TASK [download : download_container | Prepare container download] ******************************************************************************************
included: /Users/max/DevOps/kubespray/roles/download/tasks/check_pull_required.yml for node1
Wednesday 08 February 2023  20:55:02 +0200 (0:00:00.081)       0:07:46.152 ****

TASK [download : check_pull_required |  Generate a list of information about the images on a node] *********************************************************
ok: [node1]
Wednesday 08 February 2023  20:55:04 +0200 (0:00:01.671)       0:07:47.824 ****

TASK [download : check_pull_required | Set pull_required if the desired image is not yet loaded] ***********************************************************
ok: [node1]
Wednesday 08 February 2023  20:55:04 +0200 (0:00:00.064)       0:07:47.889 ****
Wednesday 08 February 2023  20:55:04 +0200 (0:00:00.046)       0:07:47.935 ****

TASK [download : debug] ************************************************************************************************************************************
ok: [node1] => {
    "msg": "Pull docker.io/library/nginx:1.23.0-alpine required is: True"
}
Wednesday 08 February 2023  20:55:04 +0200 (0:00:00.065)       0:07:48.001 ****
Wednesday 08 February 2023  20:55:04 +0200 (0:00:00.043)       0:07:48.044 ****
Wednesday 08 February 2023  20:55:04 +0200 (0:00:00.046)       0:07:48.090 ****
Wednesday 08 February 2023  20:55:04 +0200 (0:00:00.061)       0:07:48.152 ****

TASK [download : download_container | Download image if required] ******************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:55:09 +0200 (0:00:04.525)       0:07:52.677 ****
Wednesday 08 February 2023  20:55:09 +0200 (0:00:00.054)       0:07:52.731 ****
Wednesday 08 February 2023  20:55:09 +0200 (0:00:00.045)       0:07:52.777 ****
Wednesday 08 February 2023  20:55:09 +0200 (0:00:00.046)       0:07:52.823 ****
Wednesday 08 February 2023  20:55:09 +0200 (0:00:00.046)       0:07:52.870 ****

TASK [download : download_container | Remove container image from cache] ***********************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:55:10 +0200 (0:00:01.477)       0:07:54.347 ****

TASK [download : set default values for flag variables] ****************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:55:10 +0200 (0:00:00.059)       0:07:54.406 ****

TASK [download : set_container_facts | Display the name of the image being processed] **********************************************************************
ok: [node1] => {
    "msg": "registry.k8s.io/coredns/coredns"
}
Wednesday 08 February 2023  20:55:10 +0200 (0:00:00.062)       0:07:54.469 ****

TASK [download : set_container_facts | Set if containers should be pulled by digest] ***********************************************************************
ok: [node1]
Wednesday 08 February 2023  20:55:10 +0200 (0:00:00.062)       0:07:54.532 ****

TASK [download : set_container_facts | Define by what name to pull the image] ******************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:55:10 +0200 (0:00:00.064)       0:07:54.596 ****

TASK [download : set_container_facts | Define file name of image] ******************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:55:11 +0200 (0:00:00.063)       0:07:54.660 ****

TASK [download : set_container_facts | Define path of image] ***********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:55:11 +0200 (0:00:00.063)       0:07:54.723 ****
Wednesday 08 February 2023  20:55:11 +0200 (0:00:00.044)       0:07:54.768 ****

TASK [download : Set image save/load command for containerd] ***********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:55:11 +0200 (0:00:00.063)       0:07:54.831 ****
Wednesday 08 February 2023  20:55:11 +0200 (0:00:00.043)       0:07:54.875 ****
Wednesday 08 February 2023  20:55:11 +0200 (0:00:00.044)       0:07:54.920 ****

TASK [download : Set image save/load command for containerd on localhost] **********************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:55:11 +0200 (0:00:00.069)       0:07:54.990 ****
Wednesday 08 February 2023  20:55:11 +0200 (0:00:00.046)       0:07:55.036 ****

TASK [download : download_container | Prepare container download] ******************************************************************************************
included: /Users/max/DevOps/kubespray/roles/download/tasks/check_pull_required.yml for node1
Wednesday 08 February 2023  20:55:11 +0200 (0:00:00.080)       0:07:55.117 ****

TASK [download : check_pull_required |  Generate a list of information about the images on a node] *********************************************************
ok: [node1]
Wednesday 08 February 2023  20:55:13 +0200 (0:00:01.731)       0:07:56.848 ****

TASK [download : check_pull_required | Set pull_required if the desired image is not yet loaded] ***********************************************************
ok: [node1]
Wednesday 08 February 2023  20:55:13 +0200 (0:00:00.066)       0:07:56.915 ****
Wednesday 08 February 2023  20:55:13 +0200 (0:00:00.044)       0:07:56.959 ****

TASK [download : debug] ************************************************************************************************************************************
ok: [node1] => {
    "msg": "Pull registry.k8s.io/coredns/coredns:v1.8.6 required is: True"
}
Wednesday 08 February 2023  20:55:13 +0200 (0:00:00.066)       0:07:57.026 ****
Wednesday 08 February 2023  20:55:13 +0200 (0:00:00.044)       0:07:57.071 ****
Wednesday 08 February 2023  20:55:13 +0200 (0:00:00.046)       0:07:57.117 ****
Wednesday 08 February 2023  20:55:13 +0200 (0:00:00.060)       0:07:57.178 ****

TASK [download : download_container | Download image if required] ******************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:55:16 +0200 (0:00:03.174)       0:08:00.352 ****
Wednesday 08 February 2023  20:55:16 +0200 (0:00:00.054)       0:08:00.407 ****
Wednesday 08 February 2023  20:55:16 +0200 (0:00:00.044)       0:08:00.451 ****
Wednesday 08 February 2023  20:55:16 +0200 (0:00:00.045)       0:08:00.496 ****
Wednesday 08 February 2023  20:55:16 +0200 (0:00:00.045)       0:08:00.542 ****

TASK [download : download_container | Remove container image from cache] ***********************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:55:18 +0200 (0:00:01.454)       0:08:01.997 ****

TASK [download : set default values for flag variables] ****************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:55:18 +0200 (0:00:00.059)       0:08:02.057 ****

TASK [download : set_container_facts | Display the name of the image being processed] **********************************************************************
ok: [node1] => {
    "msg": "registry.k8s.io/dns/k8s-dns-node-cache"
}
Wednesday 08 February 2023  20:55:18 +0200 (0:00:00.064)       0:08:02.121 ****

TASK [download : set_container_facts | Set if containers should be pulled by digest] ***********************************************************************
ok: [node1]
Wednesday 08 February 2023  20:55:18 +0200 (0:00:00.066)       0:08:02.187 ****

TASK [download : set_container_facts | Define by what name to pull the image] ******************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:55:18 +0200 (0:00:00.064)       0:08:02.252 ****

TASK [download : set_container_facts | Define file name of image] ******************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:55:18 +0200 (0:00:00.063)       0:08:02.315 ****

TASK [download : set_container_facts | Define path of image] ***********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:55:18 +0200 (0:00:00.062)       0:08:02.378 ****
Wednesday 08 February 2023  20:55:18 +0200 (0:00:00.044)       0:08:02.422 ****

TASK [download : Set image save/load command for containerd] ***********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:55:18 +0200 (0:00:00.062)       0:08:02.484 ****
Wednesday 08 February 2023  20:55:18 +0200 (0:00:00.049)       0:08:02.533 ****
Wednesday 08 February 2023  20:55:18 +0200 (0:00:00.045)       0:08:02.579 ****

TASK [download : Set image save/load command for containerd on localhost] **********************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:55:19 +0200 (0:00:00.066)       0:08:02.646 ****
Wednesday 08 February 2023  20:55:19 +0200 (0:00:00.044)       0:08:02.691 ****

TASK [download : download_container | Prepare container download] ******************************************************************************************
included: /Users/max/DevOps/kubespray/roles/download/tasks/check_pull_required.yml for node1
Wednesday 08 February 2023  20:55:19 +0200 (0:00:00.080)       0:08:02.772 ****

TASK [download : check_pull_required |  Generate a list of information about the images on a node] *********************************************************
ok: [node1]
Wednesday 08 February 2023  20:55:21 +0200 (0:00:01.860)       0:08:04.632 ****

TASK [download : check_pull_required | Set pull_required if the desired image is not yet loaded] ***********************************************************
ok: [node1]
Wednesday 08 February 2023  20:55:21 +0200 (0:00:00.065)       0:08:04.698 ****
Wednesday 08 February 2023  20:55:21 +0200 (0:00:00.046)       0:08:04.745 ****

TASK [download : debug] ************************************************************************************************************************************
ok: [node1] => {
    "msg": "Pull registry.k8s.io/dns/k8s-dns-node-cache:1.21.1 required is: True"
}
Wednesday 08 February 2023  20:55:21 +0200 (0:00:00.066)       0:08:04.811 ****
Wednesday 08 February 2023  20:55:21 +0200 (0:00:00.043)       0:08:04.854 ****
Wednesday 08 February 2023  20:55:21 +0200 (0:00:00.041)       0:08:04.896 ****
Wednesday 08 February 2023  20:55:21 +0200 (0:00:00.060)       0:08:04.956 ****

TASK [download : download_container | Download image if required] ******************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:55:25 +0200 (0:00:03.792)       0:08:08.748 ****
Wednesday 08 February 2023  20:55:25 +0200 (0:00:00.053)       0:08:08.802 ****
Wednesday 08 February 2023  20:55:25 +0200 (0:00:00.046)       0:08:08.848 ****
Wednesday 08 February 2023  20:55:25 +0200 (0:00:00.047)       0:08:08.895 ****
Wednesday 08 February 2023  20:55:25 +0200 (0:00:00.044)       0:08:08.939 ****

TASK [download : download_container | Remove container image from cache] ***********************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:55:26 +0200 (0:00:01.529)       0:08:10.469 ****

TASK [download : set default values for flag variables] ****************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:55:26 +0200 (0:00:00.061)       0:08:10.530 ****

TASK [download : set_container_facts | Display the name of the image being processed] **********************************************************************
ok: [node1] => {
    "msg": "registry.k8s.io/cpa/cluster-proportional-autoscaler-amd64"
}
Wednesday 08 February 2023  20:55:26 +0200 (0:00:00.063)       0:08:10.593 ****

TASK [download : set_container_facts | Set if containers should be pulled by digest] ***********************************************************************
ok: [node1]
Wednesday 08 February 2023  20:55:27 +0200 (0:00:00.064)       0:08:10.657 ****

TASK [download : set_container_facts | Define by what name to pull the image] ******************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:55:27 +0200 (0:00:00.065)       0:08:10.723 ****

TASK [download : set_container_facts | Define file name of image] ******************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:55:27 +0200 (0:00:00.061)       0:08:10.785 ****

TASK [download : set_container_facts | Define path of image] ***********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:55:27 +0200 (0:00:00.060)       0:08:10.845 ****
Wednesday 08 February 2023  20:55:27 +0200 (0:00:00.043)       0:08:10.889 ****

TASK [download : Set image save/load command for containerd] ***********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:55:27 +0200 (0:00:00.062)       0:08:10.951 ****
Wednesday 08 February 2023  20:55:27 +0200 (0:00:00.044)       0:08:10.996 ****
Wednesday 08 February 2023  20:55:27 +0200 (0:00:00.047)       0:08:11.043 ****

TASK [download : Set image save/load command for containerd on localhost] **********************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:55:27 +0200 (0:00:00.065)       0:08:11.109 ****
Wednesday 08 February 2023  20:55:27 +0200 (0:00:00.046)       0:08:11.156 ****

TASK [download : download_container | Prepare container download] ******************************************************************************************
included: /Users/max/DevOps/kubespray/roles/download/tasks/check_pull_required.yml for node1
Wednesday 08 February 2023  20:55:27 +0200 (0:00:00.080)       0:08:11.236 ****

TASK [download : check_pull_required |  Generate a list of information about the images on a node] *********************************************************
ok: [node1]
Wednesday 08 February 2023  20:55:30 +0200 (0:00:02.536)       0:08:13.773 ****

TASK [download : check_pull_required | Set pull_required if the desired image is not yet loaded] ***********************************************************
ok: [node1]
Wednesday 08 February 2023  20:55:30 +0200 (0:00:00.066)       0:08:13.839 ****
Wednesday 08 February 2023  20:55:30 +0200 (0:00:00.044)       0:08:13.884 ****

TASK [download : debug] ************************************************************************************************************************************
ok: [node1] => {
    "msg": "Pull registry.k8s.io/cpa/cluster-proportional-autoscaler-amd64:1.8.5 required is: True"
}
Wednesday 08 February 2023  20:55:30 +0200 (0:00:00.065)       0:08:13.949 ****
Wednesday 08 February 2023  20:55:30 +0200 (0:00:00.044)       0:08:13.993 ****
Wednesday 08 February 2023  20:55:30 +0200 (0:00:00.043)       0:08:14.036 ****
Wednesday 08 February 2023  20:55:30 +0200 (0:00:00.063)       0:08:14.100 ****

TASK [download : download_container | Download image if required] ******************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:55:32 +0200 (0:00:02.225)       0:08:16.326 ****
Wednesday 08 February 2023  20:55:32 +0200 (0:00:00.055)       0:08:16.381 ****
Wednesday 08 February 2023  20:55:32 +0200 (0:00:00.047)       0:08:16.429 ****
Wednesday 08 February 2023  20:55:32 +0200 (0:00:00.046)       0:08:16.475 ****
Wednesday 08 February 2023  20:55:32 +0200 (0:00:00.044)       0:08:16.520 ****

TASK [download : download_container | Remove container image from cache] ***********************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:55:34 +0200 (0:00:01.640)       0:08:18.161 ****

TASK [download : set default values for flag variables] ****************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:55:34 +0200 (0:00:00.063)       0:08:18.224 ****

TASK [download : set_container_facts | Display the name of the image being processed] **********************************************************************
ok: [node1] => {
    "msg": "quay.io/metallb/speaker"
}
Wednesday 08 February 2023  20:55:34 +0200 (0:00:00.064)       0:08:18.288 ****

TASK [download : set_container_facts | Set if containers should be pulled by digest] ***********************************************************************
ok: [node1]
Wednesday 08 February 2023  20:55:34 +0200 (0:00:00.065)       0:08:18.354 ****

TASK [download : set_container_facts | Define by what name to pull the image] ******************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:55:34 +0200 (0:00:00.065)       0:08:18.420 ****

TASK [download : set_container_facts | Define file name of image] ******************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:55:34 +0200 (0:00:00.062)       0:08:18.482 ****

TASK [download : set_container_facts | Define path of image] ***********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:55:34 +0200 (0:00:00.061)       0:08:18.543 ****
Wednesday 08 February 2023  20:55:34 +0200 (0:00:00.048)       0:08:18.592 ****

TASK [download : Set image save/load command for containerd] ***********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:55:35 +0200 (0:00:00.062)       0:08:18.655 ****
Wednesday 08 February 2023  20:55:35 +0200 (0:00:00.044)       0:08:18.699 ****
Wednesday 08 February 2023  20:55:35 +0200 (0:00:00.045)       0:08:18.745 ****

TASK [download : Set image save/load command for containerd on localhost] **********************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:55:35 +0200 (0:00:00.065)       0:08:18.810 ****
Wednesday 08 February 2023  20:55:35 +0200 (0:00:00.044)       0:08:18.855 ****

TASK [download : download_container | Prepare container download] ******************************************************************************************
included: /Users/max/DevOps/kubespray/roles/download/tasks/check_pull_required.yml for node1
Wednesday 08 February 2023  20:55:35 +0200 (0:00:00.082)       0:08:18.938 ****

TASK [download : check_pull_required |  Generate a list of information about the images on a node] *********************************************************
ok: [node1]
Wednesday 08 February 2023  20:55:37 +0200 (0:00:01.978)       0:08:20.916 ****

TASK [download : check_pull_required | Set pull_required if the desired image is not yet loaded] ***********************************************************
ok: [node1]
Wednesday 08 February 2023  20:55:37 +0200 (0:00:00.065)       0:08:20.981 ****
Wednesday 08 February 2023  20:55:37 +0200 (0:00:00.054)       0:08:21.035 ****

TASK [download : debug] ************************************************************************************************************************************
ok: [node1] => {
    "msg": "Pull quay.io/metallb/speaker:v0.12.1 required is: True"
}
Wednesday 08 February 2023  20:55:37 +0200 (0:00:00.066)       0:08:21.102 ****
Wednesday 08 February 2023  20:55:37 +0200 (0:00:00.045)       0:08:21.148 ****
Wednesday 08 February 2023  20:55:37 +0200 (0:00:00.044)       0:08:21.192 ****
Wednesday 08 February 2023  20:55:37 +0200 (0:00:00.060)       0:08:21.252 ****

TASK [download : download_container | Download image if required] ******************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:55:42 +0200 (0:00:04.493)       0:08:25.746 ****
Wednesday 08 February 2023  20:55:42 +0200 (0:00:00.053)       0:08:25.799 ****
Wednesday 08 February 2023  20:55:42 +0200 (0:00:00.045)       0:08:25.845 ****
Wednesday 08 February 2023  20:55:42 +0200 (0:00:00.046)       0:08:25.891 ****
Wednesday 08 February 2023  20:55:42 +0200 (0:00:00.047)       0:08:25.939 ****

TASK [download : download_container | Remove container image from cache] ***********************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:55:43 +0200 (0:00:01.436)       0:08:27.376 ****

TASK [download : set default values for flag variables] ****************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:55:43 +0200 (0:00:00.060)       0:08:27.437 ****

TASK [download : set_container_facts | Display the name of the image being processed] **********************************************************************
ok: [node1] => {
    "msg": "quay.io/metallb/controller"
}
Wednesday 08 February 2023  20:55:43 +0200 (0:00:00.064)       0:08:27.501 ****

TASK [download : set_container_facts | Set if containers should be pulled by digest] ***********************************************************************
ok: [node1]
Wednesday 08 February 2023  20:55:43 +0200 (0:00:00.064)       0:08:27.565 ****

TASK [download : set_container_facts | Define by what name to pull the image] ******************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:55:44 +0200 (0:00:00.068)       0:08:27.633 ****

TASK [download : set_container_facts | Define file name of image] ******************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:55:44 +0200 (0:00:00.061)       0:08:27.695 ****

TASK [download : set_container_facts | Define path of image] ***********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:55:44 +0200 (0:00:00.062)       0:08:27.758 ****
Wednesday 08 February 2023  20:55:44 +0200 (0:00:00.045)       0:08:27.804 ****

TASK [download : Set image save/load command for containerd] ***********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:55:44 +0200 (0:00:00.062)       0:08:27.867 ****
Wednesday 08 February 2023  20:55:44 +0200 (0:00:00.045)       0:08:27.912 ****
Wednesday 08 February 2023  20:55:44 +0200 (0:00:00.047)       0:08:27.959 ****

TASK [download : Set image save/load command for containerd on localhost] **********************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:55:44 +0200 (0:00:00.066)       0:08:28.026 ****
Wednesday 08 February 2023  20:55:44 +0200 (0:00:00.045)       0:08:28.071 ****

TASK [download : download_container | Prepare container download] ******************************************************************************************
included: /Users/max/DevOps/kubespray/roles/download/tasks/check_pull_required.yml for node1
Wednesday 08 February 2023  20:55:44 +0200 (0:00:00.082)       0:08:28.154 ****

TASK [download : check_pull_required |  Generate a list of information about the images on a node] *********************************************************
ok: [node1]
Wednesday 08 February 2023  20:55:46 +0200 (0:00:01.977)       0:08:30.132 ****

TASK [download : check_pull_required | Set pull_required if the desired image is not yet loaded] ***********************************************************
ok: [node1]
Wednesday 08 February 2023  20:55:46 +0200 (0:00:00.065)       0:08:30.197 ****
Wednesday 08 February 2023  20:55:46 +0200 (0:00:00.046)       0:08:30.244 ****

TASK [download : debug] ************************************************************************************************************************************
ok: [node1] => {
    "msg": "Pull quay.io/metallb/controller:v0.12.1 required is: True"
}
Wednesday 08 February 2023  20:55:46 +0200 (0:00:00.067)       0:08:30.311 ****
Wednesday 08 February 2023  20:55:46 +0200 (0:00:00.043)       0:08:30.354 ****
Wednesday 08 February 2023  20:55:46 +0200 (0:00:00.041)       0:08:30.396 ****
Wednesday 08 February 2023  20:55:46 +0200 (0:00:00.063)       0:08:30.459 ****

TASK [download : download_container | Download image if required] ******************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:55:50 +0200 (0:00:03.630)       0:08:34.089 ****
Wednesday 08 February 2023  20:55:50 +0200 (0:00:00.053)       0:08:34.143 ****
Wednesday 08 February 2023  20:55:50 +0200 (0:00:00.045)       0:08:34.189 ****
Wednesday 08 February 2023  20:55:50 +0200 (0:00:00.045)       0:08:34.234 ****
Wednesday 08 February 2023  20:55:50 +0200 (0:00:00.047)       0:08:34.282 ****

TASK [download : download_container | Remove container image from cache] ***********************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:55:52 +0200 (0:00:01.699)       0:08:35.982 ****

TASK [download : set default values for flag variables] ****************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:55:52 +0200 (0:00:00.063)       0:08:36.045 ****

TASK [download : set_container_facts | Display the name of the image being processed] **********************************************************************
ok: [node1] => {
    "msg": "registry.k8s.io/kube-apiserver"
}
Wednesday 08 February 2023  20:55:52 +0200 (0:00:00.066)       0:08:36.112 ****

TASK [download : set_container_facts | Set if containers should be pulled by digest] ***********************************************************************
ok: [node1]
Wednesday 08 February 2023  20:55:52 +0200 (0:00:00.066)       0:08:36.179 ****

TASK [download : set_container_facts | Define by what name to pull the image] ******************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:55:52 +0200 (0:00:00.065)       0:08:36.245 ****

TASK [download : set_container_facts | Define file name of image] ******************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:55:52 +0200 (0:00:00.061)       0:08:36.306 ****

TASK [download : set_container_facts | Define path of image] ***********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:55:52 +0200 (0:00:00.062)       0:08:36.369 ****
Wednesday 08 February 2023  20:55:52 +0200 (0:00:00.045)       0:08:36.414 ****

TASK [download : Set image save/load command for containerd] ***********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:55:52 +0200 (0:00:00.063)       0:08:36.478 ****
Wednesday 08 February 2023  20:55:52 +0200 (0:00:00.047)       0:08:36.525 ****
Wednesday 08 February 2023  20:55:52 +0200 (0:00:00.045)       0:08:36.571 ****

TASK [download : Set image save/load command for containerd on localhost] **********************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:55:53 +0200 (0:00:00.064)       0:08:36.636 ****
Wednesday 08 February 2023  20:55:53 +0200 (0:00:00.044)       0:08:36.681 ****

TASK [download : download_container | Prepare container download] ******************************************************************************************
included: /Users/max/DevOps/kubespray/roles/download/tasks/check_pull_required.yml for node1
Wednesday 08 February 2023  20:55:53 +0200 (0:00:00.084)       0:08:36.765 ****

TASK [download : check_pull_required |  Generate a list of information about the images on a node] *********************************************************
ok: [node1]
Wednesday 08 February 2023  20:55:55 +0200 (0:00:02.592)       0:08:39.357 ****

TASK [download : check_pull_required | Set pull_required if the desired image is not yet loaded] ***********************************************************
ok: [node1]
Wednesday 08 February 2023  20:55:55 +0200 (0:00:00.066)       0:08:39.423 ****
Wednesday 08 February 2023  20:55:55 +0200 (0:00:00.046)       0:08:39.469 ****

TASK [download : debug] ************************************************************************************************************************************
ok: [node1] => {
    "msg": "Pull registry.k8s.io/kube-apiserver:v1.24.6 required is: True"
}
Wednesday 08 February 2023  20:55:55 +0200 (0:00:00.066)       0:08:39.536 ****
Wednesday 08 February 2023  20:55:55 +0200 (0:00:00.042)       0:08:39.579 ****
Wednesday 08 February 2023  20:55:55 +0200 (0:00:00.045)       0:08:39.624 ****
Wednesday 08 February 2023  20:55:56 +0200 (0:00:00.060)       0:08:39.685 ****

TASK [download : download_container | Download image if required] ******************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:56:00 +0200 (0:00:04.131)       0:08:43.816 ****
Wednesday 08 February 2023  20:56:00 +0200 (0:00:00.052)       0:08:43.869 ****
Wednesday 08 February 2023  20:56:00 +0200 (0:00:00.048)       0:08:43.918 ****
Wednesday 08 February 2023  20:56:00 +0200 (0:00:00.044)       0:08:43.962 ****
Wednesday 08 February 2023  20:56:00 +0200 (0:00:00.046)       0:08:44.009 ****

TASK [download : download_container | Remove container image from cache] ***********************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:56:02 +0200 (0:00:01.911)       0:08:45.920 ****

TASK [download : set default values for flag variables] ****************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:56:02 +0200 (0:00:00.060)       0:08:45.981 ****

TASK [download : set_container_facts | Display the name of the image being processed] **********************************************************************
ok: [node1] => {
    "msg": "registry.k8s.io/kube-controller-manager"
}
Wednesday 08 February 2023  20:56:02 +0200 (0:00:00.064)       0:08:46.045 ****

TASK [download : set_container_facts | Set if containers should be pulled by digest] ***********************************************************************
ok: [node1]
Wednesday 08 February 2023  20:56:02 +0200 (0:00:00.066)       0:08:46.112 ****

TASK [download : set_container_facts | Define by what name to pull the image] ******************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:56:02 +0200 (0:00:00.074)       0:08:46.186 ****

TASK [download : set_container_facts | Define file name of image] ******************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:56:02 +0200 (0:00:00.061)       0:08:46.247 ****

TASK [download : set_container_facts | Define path of image] ***********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:56:02 +0200 (0:00:00.061)       0:08:46.309 ****
Wednesday 08 February 2023  20:56:02 +0200 (0:00:00.044)       0:08:46.354 ****

TASK [download : Set image save/load command for containerd] ***********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:56:02 +0200 (0:00:00.063)       0:08:46.417 ****
Wednesday 08 February 2023  20:56:02 +0200 (0:00:00.045)       0:08:46.463 ****
Wednesday 08 February 2023  20:56:02 +0200 (0:00:00.047)       0:08:46.510 ****

TASK [download : Set image save/load command for containerd on localhost] **********************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:56:02 +0200 (0:00:00.065)       0:08:46.575 ****
Wednesday 08 February 2023  20:56:02 +0200 (0:00:00.044)       0:08:46.620 ****

TASK [download : download_container | Prepare container download] ******************************************************************************************
included: /Users/max/DevOps/kubespray/roles/download/tasks/check_pull_required.yml for node1
Wednesday 08 February 2023  20:56:03 +0200 (0:00:00.080)       0:08:46.701 ****

TASK [download : check_pull_required |  Generate a list of information about the images on a node] *********************************************************
ok: [node1]
Wednesday 08 February 2023  20:56:05 +0200 (0:00:02.133)       0:08:48.834 ****

TASK [download : check_pull_required | Set pull_required if the desired image is not yet loaded] ***********************************************************
ok: [node1]
Wednesday 08 February 2023  20:56:05 +0200 (0:00:00.064)       0:08:48.899 ****
Wednesday 08 February 2023  20:56:05 +0200 (0:00:00.046)       0:08:48.946 ****

TASK [download : debug] ************************************************************************************************************************************
ok: [node1] => {
    "msg": "Pull registry.k8s.io/kube-controller-manager:v1.24.6 required is: True"
}
Wednesday 08 February 2023  20:56:05 +0200 (0:00:00.066)       0:08:49.012 ****
Wednesday 08 February 2023  20:56:05 +0200 (0:00:00.042)       0:08:49.054 ****
Wednesday 08 February 2023  20:56:05 +0200 (0:00:00.045)       0:08:49.099 ****
Wednesday 08 February 2023  20:56:05 +0200 (0:00:00.061)       0:08:49.161 ****

TASK [download : download_container | Download image if required] ******************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:56:08 +0200 (0:00:03.102)       0:08:52.263 ****
Wednesday 08 February 2023  20:56:08 +0200 (0:00:00.054)       0:08:52.318 ****
Wednesday 08 February 2023  20:56:08 +0200 (0:00:00.043)       0:08:52.362 ****
Wednesday 08 February 2023  20:56:08 +0200 (0:00:00.044)       0:08:52.406 ****
Wednesday 08 February 2023  20:56:08 +0200 (0:00:00.047)       0:08:52.454 ****

TASK [download : download_container | Remove container image from cache] ***********************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:56:10 +0200 (0:00:01.324)       0:08:53.778 ****

TASK [download : set default values for flag variables] ****************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:56:10 +0200 (0:00:00.059)       0:08:53.838 ****

TASK [download : set_container_facts | Display the name of the image being processed] **********************************************************************
ok: [node1] => {
    "msg": "registry.k8s.io/kube-scheduler"
}
Wednesday 08 February 2023  20:56:10 +0200 (0:00:00.063)       0:08:53.901 ****

TASK [download : set_container_facts | Set if containers should be pulled by digest] ***********************************************************************
ok: [node1]
Wednesday 08 February 2023  20:56:10 +0200 (0:00:00.064)       0:08:53.966 ****

TASK [download : set_container_facts | Define by what name to pull the image] ******************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:56:10 +0200 (0:00:00.064)       0:08:54.030 ****

TASK [download : set_container_facts | Define file name of image] ******************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:56:10 +0200 (0:00:00.061)       0:08:54.092 ****

TASK [download : set_container_facts | Define path of image] ***********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:56:10 +0200 (0:00:00.063)       0:08:54.156 ****
Wednesday 08 February 2023  20:56:10 +0200 (0:00:00.043)       0:08:54.200 ****

TASK [download : Set image save/load command for containerd] ***********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:56:10 +0200 (0:00:00.066)       0:08:54.267 ****
Wednesday 08 February 2023  20:56:10 +0200 (0:00:00.045)       0:08:54.313 ****
Wednesday 08 February 2023  20:56:10 +0200 (0:00:00.045)       0:08:54.359 ****

TASK [download : Set image save/load command for containerd on localhost] **********************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:56:10 +0200 (0:00:00.066)       0:08:54.426 ****
Wednesday 08 February 2023  20:56:10 +0200 (0:00:00.045)       0:08:54.471 ****

TASK [download : download_container | Prepare container download] ******************************************************************************************
included: /Users/max/DevOps/kubespray/roles/download/tasks/check_pull_required.yml for node1
Wednesday 08 February 2023  20:56:10 +0200 (0:00:00.085)       0:08:54.557 ****

TASK [download : check_pull_required |  Generate a list of information about the images on a node] *********************************************************
ok: [node1]
Wednesday 08 February 2023  20:56:12 +0200 (0:00:01.895)       0:08:56.452 ****

TASK [download : check_pull_required | Set pull_required if the desired image is not yet loaded] ***********************************************************
ok: [node1]
Wednesday 08 February 2023  20:56:12 +0200 (0:00:00.065)       0:08:56.517 ****
Wednesday 08 February 2023  20:56:12 +0200 (0:00:00.044)       0:08:56.562 ****

TASK [download : debug] ************************************************************************************************************************************
ok: [node1] => {
    "msg": "Pull registry.k8s.io/kube-scheduler:v1.24.6 required is: True"
}
Wednesday 08 February 2023  20:56:12 +0200 (0:00:00.065)       0:08:56.628 ****
Wednesday 08 February 2023  20:56:13 +0200 (0:00:00.044)       0:08:56.673 ****
Wednesday 08 February 2023  20:56:13 +0200 (0:00:00.043)       0:08:56.716 ****
Wednesday 08 February 2023  20:56:13 +0200 (0:00:00.064)       0:08:56.780 ****

TASK [download : download_container | Download image if required] ******************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:56:15 +0200 (0:00:02.759)       0:08:59.540 ****
Wednesday 08 February 2023  20:56:15 +0200 (0:00:00.054)       0:08:59.595 ****
Wednesday 08 February 2023  20:56:16 +0200 (0:00:00.045)       0:08:59.641 ****
Wednesday 08 February 2023  20:56:16 +0200 (0:00:00.044)       0:08:59.685 ****
Wednesday 08 February 2023  20:56:16 +0200 (0:00:00.045)       0:08:59.730 ****

TASK [download : download_container | Remove container image from cache] ***********************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:56:17 +0200 (0:00:01.537)       0:09:01.268 ****

TASK [download : set default values for flag variables] ****************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:56:17 +0200 (0:00:00.060)       0:09:01.328 ****

TASK [download : set_container_facts | Display the name of the image being processed] **********************************************************************
ok: [node1] => {
    "msg": "registry.k8s.io/kube-proxy"
}
Wednesday 08 February 2023  20:56:17 +0200 (0:00:00.064)       0:09:01.393 ****

TASK [download : set_container_facts | Set if containers should be pulled by digest] ***********************************************************************
ok: [node1]
Wednesday 08 February 2023  20:56:17 +0200 (0:00:00.064)       0:09:01.458 ****

TASK [download : set_container_facts | Define by what name to pull the image] ******************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:56:17 +0200 (0:00:00.065)       0:09:01.523 ****

TASK [download : set_container_facts | Define file name of image] ******************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:56:17 +0200 (0:00:00.062)       0:09:01.586 ****

TASK [download : set_container_facts | Define path of image] ***********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:56:18 +0200 (0:00:00.060)       0:09:01.646 ****
Wednesday 08 February 2023  20:56:18 +0200 (0:00:00.044)       0:09:01.691 ****

TASK [download : Set image save/load command for containerd] ***********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:56:18 +0200 (0:00:00.067)       0:09:01.758 ****
Wednesday 08 February 2023  20:56:18 +0200 (0:00:00.044)       0:09:01.803 ****
Wednesday 08 February 2023  20:56:18 +0200 (0:00:00.044)       0:09:01.848 ****

TASK [download : Set image save/load command for containerd on localhost] **********************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:56:18 +0200 (0:00:00.067)       0:09:01.915 ****
Wednesday 08 February 2023  20:56:18 +0200 (0:00:00.046)       0:09:01.962 ****

TASK [download : download_container | Prepare container download] ******************************************************************************************
included: /Users/max/DevOps/kubespray/roles/download/tasks/check_pull_required.yml for node1
Wednesday 08 February 2023  20:56:18 +0200 (0:00:00.082)       0:09:02.045 ****

TASK [download : check_pull_required |  Generate a list of information about the images on a node] *********************************************************
ok: [node1]
Wednesday 08 February 2023  20:56:20 +0200 (0:00:01.866)       0:09:03.911 ****

TASK [download : check_pull_required | Set pull_required if the desired image is not yet loaded] ***********************************************************
ok: [node1]
Wednesday 08 February 2023  20:56:20 +0200 (0:00:00.065)       0:09:03.977 ****
Wednesday 08 February 2023  20:56:20 +0200 (0:00:00.045)       0:09:04.022 ****

TASK [download : debug] ************************************************************************************************************************************
ok: [node1] => {
    "msg": "Pull registry.k8s.io/kube-proxy:v1.24.6 required is: True"
}
Wednesday 08 February 2023  20:56:20 +0200 (0:00:00.064)       0:09:04.087 ****
Wednesday 08 February 2023  20:56:20 +0200 (0:00:00.044)       0:09:04.131 ****
Wednesday 08 February 2023  20:56:20 +0200 (0:00:00.043)       0:09:04.175 ****
Wednesday 08 February 2023  20:56:20 +0200 (0:00:00.063)       0:09:04.238 ****

TASK [download : download_container | Download image if required] ******************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:56:24 +0200 (0:00:04.310)       0:09:08.549 ****
Wednesday 08 February 2023  20:56:24 +0200 (0:00:00.053)       0:09:08.602 ****
Wednesday 08 February 2023  20:56:25 +0200 (0:00:00.045)       0:09:08.647 ****
Wednesday 08 February 2023  20:56:25 +0200 (0:00:00.046)       0:09:08.693 ****
Wednesday 08 February 2023  20:56:25 +0200 (0:00:00.044)       0:09:08.738 ****

TASK [download : download_container | Remove container image from cache] ***********************************************************************************
ok: [node1]

PLAY [etcd:kube_control_plane] *****************************************************************************************************************************
Wednesday 08 February 2023  20:56:26 +0200 (0:00:01.827)       0:09:10.565 ****
Wednesday 08 February 2023  20:56:26 +0200 (0:00:00.050)       0:09:10.616 ****
Wednesday 08 February 2023  20:56:27 +0200 (0:00:00.051)       0:09:10.668 ****
Wednesday 08 February 2023  20:56:27 +0200 (0:00:00.044)       0:09:10.713 ****
Wednesday 08 February 2023  20:56:27 +0200 (0:00:00.044)       0:09:10.757 ****
Wednesday 08 February 2023  20:56:27 +0200 (0:00:00.043)       0:09:10.801 ****
Wednesday 08 February 2023  20:56:27 +0200 (0:00:00.046)       0:09:10.847 ****
Wednesday 08 February 2023  20:56:27 +0200 (0:00:00.051)       0:09:10.899 ****
Wednesday 08 February 2023  20:56:27 +0200 (0:00:00.044)       0:09:10.943 ****
Wednesday 08 February 2023  20:56:27 +0200 (0:00:00.045)       0:09:10.989 ****
Wednesday 08 February 2023  20:56:28 +0200 (0:00:00.889)       0:09:11.878 ****

TASK [kubespray-defaults : Configure defaults] *************************************************************************************************************
ok: [node1] => {
    "msg": "Check roles/kubespray-defaults/defaults/main.yml"
}
Wednesday 08 February 2023  20:56:28 +0200 (0:00:00.054)       0:09:11.933 ****
Wednesday 08 February 2023  20:56:28 +0200 (0:00:00.064)       0:09:11.998 ****
Wednesday 08 February 2023  20:56:28 +0200 (0:00:00.044)       0:09:12.042 ****
Wednesday 08 February 2023  20:56:28 +0200 (0:00:00.049)       0:09:12.092 ****
Wednesday 08 February 2023  20:56:28 +0200 (0:00:00.043)       0:09:12.135 ****
Wednesday 08 February 2023  20:56:28 +0200 (0:00:00.043)       0:09:12.179 ****
Wednesday 08 February 2023  20:56:28 +0200 (0:00:00.058)       0:09:12.238 ****

TASK [adduser : User | Create User Group] ******************************************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:56:30 +0200 (0:00:01.442)       0:09:13.681 ****

TASK [adduser : User | Create User] ************************************************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:56:31 +0200 (0:00:01.624)       0:09:15.305 ****

TASK [adduser : User | Create User Group] ******************************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:56:33 +0200 (0:00:01.498)       0:09:16.804 ****

TASK [adduser : User | Create User] ************************************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:56:34 +0200 (0:00:01.772)       0:09:18.577 ****

TASK [etcd : include_tasks] ********************************************************************************************************************************
included: /Users/max/DevOps/kubespray/roles/etcd/tasks/check_certs.yml for node1
Wednesday 08 February 2023  20:56:35 +0200 (0:00:00.089)       0:09:18.666 ****

TASK [etcd : Check_certs | Register certs that have already been generated on first etcd node] *************************************************************
[WARNING]: Skipped '/etc/ssl/etcd/ssl' path due to this access issue: '/etc/ssl/etcd/ssl' is not a directory
ok: [node1]
Wednesday 08 February 2023  20:56:35 +0200 (0:00:00.479)       0:09:19.146 ****

TASK [etcd : Check_certs | Set default value for 'sync_certs', 'gen_certs' and 'etcd_secret_changed' to false] *********************************************
ok: [node1]
Wednesday 08 February 2023  20:56:35 +0200 (0:00:00.058)       0:09:19.204 ****

TASK [etcd : Check certs | Register ca and etcd admin/member certs on etcd hosts] **************************************************************************
ok: [node1] => (item=ca.pem)
ok: [node1] => (item=member-node1.pem)
ok: [node1] => (item=member-node1-key.pem)
ok: [node1] => (item=admin-node1.pem)
ok: [node1] => (item=admin-node1-key.pem)
Wednesday 08 February 2023  20:56:44 +0200 (0:00:09.137)       0:09:28.342 ****

TASK [etcd : Check certs | Register ca and etcd node certs on kubernetes hosts] ****************************************************************************
ok: [node1] => (item=ca.pem)
ok: [node1] => (item=node-node1.pem)
ok: [node1] => (item=node-node1-key.pem)
Wednesday 08 February 2023  20:56:48 +0200 (0:00:04.035)       0:09:32.377 ****

TASK [etcd : Check_certs | Set 'gen_certs' to true if expected certificates are not on the first etcd node(1/2)] *******************************************
ok: [node1] => (item=/etc/ssl/etcd/ssl/ca.pem)
ok: [node1] => (item=/etc/ssl/etcd/ssl/admin-node1.pem)
ok: [node1] => (item=/etc/ssl/etcd/ssl/admin-node1-key.pem)
ok: [node1] => (item=/etc/ssl/etcd/ssl/member-node1.pem)
ok: [node1] => (item=/etc/ssl/etcd/ssl/member-node1-key.pem)
ok: [node1] => (item=/etc/ssl/etcd/ssl/node-node1.pem)
ok: [node1] => (item=/etc/ssl/etcd/ssl/node-node1-key.pem)
Wednesday 08 February 2023  20:56:48 +0200 (0:00:00.168)       0:09:32.546 ****
Wednesday 08 February 2023  20:56:49 +0200 (0:00:00.119)       0:09:32.666 ****

TASK [etcd : Check_certs | Set 'gen_master_certs' object to track whether member and admin certs exist on first etcd node] *********************************
ok: [node1]
Wednesday 08 February 2023  20:56:49 +0200 (0:00:00.066)       0:09:32.732 ****

TASK [etcd : Check_certs | Set 'gen_node_certs' object to track whether node certs exist on first etcd node] ***********************************************
ok: [node1]
Wednesday 08 February 2023  20:56:49 +0200 (0:00:00.063)       0:09:32.795 ****

TASK [etcd : Check_certs | Set 'etcd_member_requires_sync' to true if ca or member/admin cert and key don't exist on etcd member or checksum doesn't match] ***
ok: [node1]
Wednesday 08 February 2023  20:56:49 +0200 (0:00:00.090)       0:09:32.886 ****
Wednesday 08 February 2023  20:56:49 +0200 (0:00:00.045)       0:09:32.932 ****

TASK [etcd : Check_certs | Set 'sync_certs' to true] *******************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:56:49 +0200 (0:00:00.061)       0:09:32.994 ****

TASK [etcd : include_tasks] ********************************************************************************************************************************
included: /Users/max/DevOps/kubespray/roles/etcd/tasks/gen_certs_script.yml for node1
Wednesday 08 February 2023  20:56:49 +0200 (0:00:00.083)       0:09:33.078 ****

TASK [etcd : Gen_certs | create etcd cert dir] *************************************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:56:50 +0200 (0:00:01.416)       0:09:34.495 ****

TASK [etcd : Gen_certs | create etcd script dir (on node1)] ************************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:56:52 +0200 (0:00:01.337)       0:09:35.832 ****

TASK [etcd : Gen_certs | write openssl config] *************************************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:56:54 +0200 (0:00:02.022)       0:09:37.855 ****

TASK [etcd : Gen_certs | copy certs generation script] *****************************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:56:57 +0200 (0:00:02.929)       0:09:40.785 ****

TASK [etcd : Gen_certs | run cert generation script for etcd and kube control plane nodes] *****************************************************************
changed: [node1]
Wednesday 08 February 2023  20:56:58 +0200 (0:00:01.345)       0:09:42.131 ****
Wednesday 08 February 2023  20:56:58 +0200 (0:00:00.083)       0:09:42.214 ****
Wednesday 08 February 2023  20:56:58 +0200 (0:00:00.136)       0:09:42.350 ****
Wednesday 08 February 2023  20:56:58 +0200 (0:00:00.145)       0:09:42.495 ****
Wednesday 08 February 2023  20:56:58 +0200 (0:00:00.057)       0:09:42.553 ****
Wednesday 08 February 2023  20:56:58 +0200 (0:00:00.057)       0:09:42.611 ****
Wednesday 08 February 2023  20:56:59 +0200 (0:00:00.052)       0:09:42.663 ****
Wednesday 08 February 2023  20:56:59 +0200 (0:00:00.048)       0:09:42.712 ****

TASK [etcd : Gen_certs | check certificate permissions] ****************************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:57:00 +0200 (0:00:01.430)       0:09:44.143 ****

TASK [etcd : include_tasks] ********************************************************************************************************************************
included: /Users/max/DevOps/kubespray/roles/etcd/tasks/upd_ca_trust.yml for node1
Wednesday 08 February 2023  20:57:00 +0200 (0:00:00.077)       0:09:44.221 ****

TASK [etcd : Gen_certs | target ca-certificate store file] *************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:57:00 +0200 (0:00:00.059)       0:09:44.280 ****

TASK [etcd : Gen_certs | add CA to trusted CA dir] *********************************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:57:02 +0200 (0:00:01.603)       0:09:45.884 ****

TASK [etcd : Gen_certs | update ca-certificates (Debian/Ubuntu/SUSE/Flatcar)] ******************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:57:04 +0200 (0:00:02.392)       0:09:48.277 ****
Wednesday 08 February 2023  20:57:04 +0200 (0:00:00.043)       0:09:48.320 ****
Wednesday 08 February 2023  20:57:04 +0200 (0:00:00.042)       0:09:48.362 ****
Wednesday 08 February 2023  20:57:04 +0200 (0:00:00.048)       0:09:48.410 ****
Wednesday 08 February 2023  20:57:04 +0200 (0:00:00.047)       0:09:48.458 ****
Wednesday 08 February 2023  20:57:04 +0200 (0:00:00.047)       0:09:48.506 ****

TASK [etcd : include_tasks] ********************************************************************************************************************************
included: /Users/max/DevOps/kubespray/roles/etcd/tasks/install_host.yml for node1
Wednesday 08 February 2023  20:57:04 +0200 (0:00:00.079)       0:09:48.586 ****

TASK [etcd : Get currently-deployed etcd version] **********************************************************************************************************
fatal: [node1]: FAILED! => {"changed": false, "cmd": "/usr/local/bin/etcd --version", "msg": "[Errno 2] No such file or directory: b'/usr/local/bin/etcd'", "rc": 2, "stderr": "", "stderr_lines": [], "stdout": "", "stdout_lines": []}
...ignoring
Wednesday 08 February 2023  20:57:06 +0200 (0:00:01.725)       0:09:50.311 ****

TASK [etcd : Restart etcd if necessary] ********************************************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:57:08 +0200 (0:00:01.785)       0:09:52.097 ****
Wednesday 08 February 2023  20:57:08 +0200 (0:00:00.043)       0:09:52.140 ****

TASK [etcd : install | Copy etcd and etcdctl binary from download dir] *************************************************************************************
changed: [node1] => (item=etcd)
changed: [node1] => (item=etcdctl)
Wednesday 08 February 2023  20:57:11 +0200 (0:00:03.087)       0:09:55.228 ****

TASK [etcd : include_tasks] ********************************************************************************************************************************
included: /Users/max/DevOps/kubespray/roles/etcd/tasks/configure.yml for node1
Wednesday 08 February 2023  20:57:11 +0200 (0:00:00.093)       0:09:55.321 ****

TASK [etcd : Configure | Check if etcd cluster is healthy] *************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:57:18 +0200 (0:00:06.568)       0:10:01.890 ****
Wednesday 08 February 2023  20:57:18 +0200 (0:00:00.044)       0:10:01.934 ****

TASK [etcd : include_tasks] ********************************************************************************************************************************
included: /Users/max/DevOps/kubespray/roles/etcd/tasks/refresh_config.yml for node1
Wednesday 08 February 2023  20:57:18 +0200 (0:00:00.068)       0:10:02.002 ****

TASK [etcd : Refresh config | Create etcd config file] *****************************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:57:21 +0200 (0:00:03.237)       0:10:05.240 ****
Wednesday 08 February 2023  20:57:21 +0200 (0:00:00.044)       0:10:05.284 ****

TASK [etcd : Configure | Copy etcd.service systemd file] ***************************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:57:24 +0200 (0:00:02.993)       0:10:08.278 ****
Wednesday 08 February 2023  20:57:24 +0200 (0:00:00.044)       0:10:08.323 ****

TASK [etcd : Configure | reload systemd] *******************************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:57:26 +0200 (0:00:02.007)       0:10:10.330 ****

TASK [etcd : Configure | Ensure etcd is running] ***********************************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:57:32 +0200 (0:00:05.793)       0:10:16.124 ****
Wednesday 08 February 2023  20:57:32 +0200 (0:00:00.044)       0:10:16.169 ****

TASK [etcd : Configure | Wait for etcd cluster to be healthy] **********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:57:34 +0200 (0:00:01.800)       0:10:17.970 ****
Wednesday 08 February 2023  20:57:34 +0200 (0:00:00.045)       0:10:18.016 ****

TASK [etcd : Configure | Check if member is in etcd cluster] ***********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:57:35 +0200 (0:00:01.420)       0:10:19.436 ****
Wednesday 08 February 2023  20:57:35 +0200 (0:00:00.044)       0:10:19.481 ****
Wednesday 08 February 2023  20:57:35 +0200 (0:00:00.047)       0:10:19.528 ****
Wednesday 08 February 2023  20:57:35 +0200 (0:00:00.049)       0:10:19.578 ****

TASK [etcd : include_tasks] ********************************************************************************************************************************
included: /Users/max/DevOps/kubespray/roles/etcd/tasks/refresh_config.yml for node1
Wednesday 08 February 2023  20:57:36 +0200 (0:00:00.080)       0:10:19.658 ****

TASK [etcd : Refresh config | Create etcd config file] *****************************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:57:39 +0200 (0:00:03.434)       0:10:23.093 ****
Wednesday 08 February 2023  20:57:39 +0200 (0:00:00.045)       0:10:23.138 ****
Wednesday 08 February 2023  20:57:39 +0200 (0:00:00.047)       0:10:23.186 ****
Wednesday 08 February 2023  20:57:39 +0200 (0:00:00.046)       0:10:23.233 ****

TASK [etcd : include_tasks] ********************************************************************************************************************************
included: /Users/max/DevOps/kubespray/roles/etcd/tasks/refresh_config.yml for node1
Wednesday 08 February 2023  20:57:39 +0200 (0:00:00.078)       0:10:23.312 ****

TASK [etcd : Refresh config | Create etcd config file] *****************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:57:42 +0200 (0:00:02.527)       0:10:25.839 ****
Wednesday 08 February 2023  20:57:42 +0200 (0:00:00.058)       0:10:25.898 ****

RUNNING HANDLER [etcd : restart etcd] **********************************************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:57:43 +0200 (0:00:01.347)       0:10:27.245 ****

RUNNING HANDLER [etcd : Backup etcd data] ******************************************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:57:44 +0200 (0:00:01.367)       0:10:28.613 ****

RUNNING HANDLER [etcd : Refresh Time Fact] *****************************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:57:47 +0200 (0:00:02.490)       0:10:31.104 ****

RUNNING HANDLER [etcd : Set Backup Directory] **************************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:57:47 +0200 (0:00:00.056)       0:10:31.160 ****

RUNNING HANDLER [etcd : Create Backup Directory] ***********************************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:57:48 +0200 (0:00:01.436)       0:10:32.597 ****

RUNNING HANDLER [etcd : Stat etcd v2 data directory] *******************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:57:50 +0200 (0:00:01.344)       0:10:33.942 ****

RUNNING HANDLER [etcd : Backup etcd v2 data] ***************************************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:57:51 +0200 (0:00:01.413)       0:10:35.355 ****

RUNNING HANDLER [etcd : Backup etcd v3 data] ***************************************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:57:53 +0200 (0:00:01.588)       0:10:36.944 ****

RUNNING HANDLER [etcd : etcd | reload systemd] *************************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:57:55 +0200 (0:00:02.195)       0:10:39.139 ****

RUNNING HANDLER [etcd : reload etcd] ***********************************************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:58:04 +0200 (0:00:08.715)       0:10:47.855 ****

RUNNING HANDLER [etcd : wait for etcd up] ******************************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:58:05 +0200 (0:00:01.579)       0:10:49.435 ****

RUNNING HANDLER [etcd : Cleanup etcd backups] **************************************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:58:07 +0200 (0:00:01.501)       0:10:50.937 ****
Wednesday 08 February 2023  20:58:07 +0200 (0:00:00.041)       0:10:50.978 ****

RUNNING HANDLER [etcd : set etcd_secret_changed] ***********************************************************************************************************
ok: [node1]

PLAY [k8s_cluster] *****************************************************************************************************************************************
Wednesday 08 February 2023  20:58:07 +0200 (0:00:00.127)       0:10:51.105 ****
Wednesday 08 February 2023  20:58:07 +0200 (0:00:00.047)       0:10:51.153 ****
Wednesday 08 February 2023  20:58:07 +0200 (0:00:00.049)       0:10:51.202 ****
Wednesday 08 February 2023  20:58:07 +0200 (0:00:00.125)       0:10:51.327 ****
Wednesday 08 February 2023  20:58:07 +0200 (0:00:00.043)       0:10:51.371 ****
Wednesday 08 February 2023  20:58:07 +0200 (0:00:00.041)       0:10:51.412 ****
Wednesday 08 February 2023  20:58:07 +0200 (0:00:00.045)       0:10:51.458 ****
Wednesday 08 February 2023  20:58:07 +0200 (0:00:00.047)       0:10:51.505 ****
Wednesday 08 February 2023  20:58:07 +0200 (0:00:00.044)       0:10:51.549 ****
Wednesday 08 February 2023  20:58:07 +0200 (0:00:00.047)       0:10:51.597 ****
Wednesday 08 February 2023  20:58:08 +0200 (0:00:00.896)       0:10:52.493 ****

TASK [kubespray-defaults : Configure defaults] *************************************************************************************************************
ok: [node1] => {
    "msg": "Check roles/kubespray-defaults/defaults/main.yml"
}
Wednesday 08 February 2023  20:58:08 +0200 (0:00:00.056)       0:10:52.549 ****
Wednesday 08 February 2023  20:58:08 +0200 (0:00:00.061)       0:10:52.611 ****
Wednesday 08 February 2023  20:58:09 +0200 (0:00:00.043)       0:10:52.655 ****
Wednesday 08 February 2023  20:58:09 +0200 (0:00:00.047)       0:10:52.702 ****
Wednesday 08 February 2023  20:58:09 +0200 (0:00:00.043)       0:10:52.745 ****
Wednesday 08 February 2023  20:58:09 +0200 (0:00:00.044)       0:10:52.789 ****
Wednesday 08 February 2023  20:58:09 +0200 (0:00:00.054)       0:10:52.844 ****
Wednesday 08 February 2023  20:58:09 +0200 (0:00:00.056)       0:10:52.901 ****
Wednesday 08 February 2023  20:58:09 +0200 (0:00:00.061)       0:10:52.962 ****
Wednesday 08 February 2023  20:58:09 +0200 (0:00:00.050)       0:10:53.013 ****
Wednesday 08 February 2023  20:58:09 +0200 (0:00:00.061)       0:10:53.075 ****
Wednesday 08 February 2023  20:58:09 +0200 (0:00:00.049)       0:10:53.124 ****
Wednesday 08 February 2023  20:58:09 +0200 (0:00:00.057)       0:10:53.182 ****
Wednesday 08 February 2023  20:58:09 +0200 (0:00:00.048)       0:10:53.230 ****
Wednesday 08 February 2023  20:58:09 +0200 (0:00:00.049)       0:10:53.280 ****
Wednesday 08 February 2023  20:58:09 +0200 (0:00:00.048)       0:10:53.329 ****
Wednesday 08 February 2023  20:58:09 +0200 (0:00:00.049)       0:10:53.379 ****
Wednesday 08 February 2023  20:58:09 +0200 (0:00:00.049)       0:10:53.428 ****
Wednesday 08 February 2023  20:58:09 +0200 (0:00:00.057)       0:10:53.485 ****
Wednesday 08 February 2023  20:58:09 +0200 (0:00:00.049)       0:10:53.535 ****
Wednesday 08 February 2023  20:58:09 +0200 (0:00:00.048)       0:10:53.583 ****
Wednesday 08 February 2023  20:58:10 +0200 (0:00:00.049)       0:10:53.632 ****

PLAY [k8s_cluster] *****************************************************************************************************************************************
Wednesday 08 February 2023  20:58:10 +0200 (0:00:00.139)       0:10:53.772 ****
Wednesday 08 February 2023  20:58:10 +0200 (0:00:00.046)       0:10:53.818 ****
Wednesday 08 February 2023  20:58:10 +0200 (0:00:00.049)       0:10:53.868 ****
Wednesday 08 February 2023  20:58:10 +0200 (0:00:00.052)       0:10:53.920 ****
Wednesday 08 February 2023  20:58:10 +0200 (0:00:00.044)       0:10:53.965 ****
Wednesday 08 February 2023  20:58:10 +0200 (0:00:00.044)       0:10:54.009 ****
Wednesday 08 February 2023  20:58:10 +0200 (0:00:00.044)       0:10:54.054 ****
Wednesday 08 February 2023  20:58:10 +0200 (0:00:00.050)       0:10:54.104 ****
Wednesday 08 February 2023  20:58:10 +0200 (0:00:00.044)       0:10:54.149 ****
Wednesday 08 February 2023  20:58:10 +0200 (0:00:00.050)       0:10:54.200 ****
Wednesday 08 February 2023  20:58:11 +0200 (0:00:00.885)       0:10:55.085 ****

TASK [kubespray-defaults : Configure defaults] *************************************************************************************************************
ok: [node1] => {
    "msg": "Check roles/kubespray-defaults/defaults/main.yml"
}
Wednesday 08 February 2023  20:58:11 +0200 (0:00:00.057)       0:10:55.143 ****
Wednesday 08 February 2023  20:58:11 +0200 (0:00:00.063)       0:10:55.206 ****
Wednesday 08 February 2023  20:58:11 +0200 (0:00:00.044)       0:10:55.250 ****
Wednesday 08 February 2023  20:58:11 +0200 (0:00:00.047)       0:10:55.298 ****
Wednesday 08 February 2023  20:58:11 +0200 (0:00:00.043)       0:10:55.341 ****
Wednesday 08 February 2023  20:58:11 +0200 (0:00:00.045)       0:10:55.386 ****
Wednesday 08 February 2023  20:58:11 +0200 (0:00:00.053)       0:10:55.440 ****
Wednesday 08 February 2023  20:58:11 +0200 (0:00:00.038)       0:10:55.478 ****
Wednesday 08 February 2023  20:58:11 +0200 (0:00:00.044)       0:10:55.522 ****
Wednesday 08 February 2023  20:58:11 +0200 (0:00:00.040)       0:10:55.563 ****
Wednesday 08 February 2023  20:58:11 +0200 (0:00:00.041)       0:10:55.605 ****

TASK [kubernetes/node : set kubelet_cgroup_driver_detected fact for containerd] ****************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:58:12 +0200 (0:00:00.057)       0:10:55.663 ****

TASK [kubernetes/node : set kubelet_cgroup_driver] *********************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:58:12 +0200 (0:00:00.058)       0:10:55.722 ****
Wednesday 08 February 2023  20:58:12 +0200 (0:00:00.040)       0:10:55.762 ****
Wednesday 08 February 2023  20:58:12 +0200 (0:00:00.044)       0:10:55.806 ****

TASK [kubernetes/node : os specific vars] ******************************************************************************************************************
ok: [node1] => (item=/Users/max/DevOps/kubespray/roles/kubernetes/node/vars/ubuntu-20.yml)
Wednesday 08 February 2023  20:58:12 +0200 (0:00:00.071)       0:10:55.877 ****

TASK [kubernetes/node : Pre-upgrade | check if kubelet container exists] ***********************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:58:13 +0200 (0:00:01.711)       0:10:57.589 ****
Wednesday 08 February 2023  20:58:14 +0200 (0:00:00.042)       0:10:57.632 ****
Wednesday 08 February 2023  20:58:14 +0200 (0:00:00.041)       0:10:57.673 ****
Wednesday 08 February 2023  20:58:14 +0200 (0:00:00.040)       0:10:57.713 ****

TASK [kubernetes/node : Ensure /var/lib/cni exists] ********************************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:58:15 +0200 (0:00:01.789)       0:10:59.503 ****
Wednesday 08 February 2023  20:58:15 +0200 (0:00:00.041)       0:10:59.544 ****

TASK [kubernetes/node : install | Copy kubelet binary from download dir] ***********************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:58:18 +0200 (0:00:02.648)       0:11:02.193 ****
Wednesday 08 February 2023  20:58:18 +0200 (0:00:00.043)       0:11:02.236 ****
Wednesday 08 February 2023  20:58:18 +0200 (0:00:00.044)       0:11:02.281 ****
Wednesday 08 February 2023  20:58:18 +0200 (0:00:00.041)       0:11:02.322 ****
Wednesday 08 February 2023  20:58:18 +0200 (0:00:00.042)       0:11:02.364 ****
Wednesday 08 February 2023  20:58:18 +0200 (0:00:00.041)       0:11:02.406 ****
Wednesday 08 February 2023  20:58:18 +0200 (0:00:00.042)       0:11:02.449 ****
Wednesday 08 February 2023  20:58:18 +0200 (0:00:00.043)       0:11:02.492 ****
Wednesday 08 February 2023  20:58:18 +0200 (0:00:00.044)       0:11:02.537 ****
Wednesday 08 February 2023  20:58:18 +0200 (0:00:00.043)       0:11:02.581 ****
Wednesday 08 February 2023  20:58:18 +0200 (0:00:00.042)       0:11:02.623 ****
Wednesday 08 February 2023  20:58:19 +0200 (0:00:00.042)       0:11:02.666 ****
Wednesday 08 February 2023  20:58:19 +0200 (0:00:00.042)       0:11:02.709 ****

TASK [kubernetes/node : Ensure nodePort range is reserved] *************************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:58:20 +0200 (0:00:01.429)       0:11:04.138 ****

TASK [kubernetes/node : Verify if br_netfilter module exists] **********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:58:22 +0200 (0:00:02.257)       0:11:06.395 ****

TASK [kubernetes/node : Verify br_netfilter module path exists] ********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:58:24 +0200 (0:00:01.739)       0:11:08.135 ****

TASK [kubernetes/node : Enable br_netfilter module] ********************************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:58:25 +0200 (0:00:01.489)       0:11:09.624 ****

TASK [kubernetes/node : Persist br_netfilter module] *******************************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:58:29 +0200 (0:00:03.031)       0:11:12.656 ****

TASK [kubernetes/node : Check if bridge-nf-call-iptables key exists] ***************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:58:30 +0200 (0:00:01.355)       0:11:14.012 ****

TASK [kubernetes/node : Enable bridge-nf-call tables] ******************************************************************************************************
changed: [node1] => (item=net.bridge.bridge-nf-call-iptables)
changed: [node1] => (item=net.bridge.bridge-nf-call-arptables)
changed: [node1] => (item=net.bridge.bridge-nf-call-ip6tables)
Wednesday 08 February 2023  20:58:34 +0200 (0:00:04.157)       0:11:18.169 ****

TASK [kubernetes/node : Modprobe Kernel Module for IPVS] ***************************************************************************************************
changed: [node1] => (item=ip_vs)
changed: [node1] => (item=ip_vs_rr)
changed: [node1] => (item=ip_vs_wrr)
changed: [node1] => (item=ip_vs_sh)
Wednesday 08 February 2023  20:58:39 +0200 (0:00:05.087)       0:11:23.257 ****

TASK [kubernetes/node : Modprobe nf_conntrack_ipv4] ********************************************************************************************************
fatal: [node1]: FAILED! => {"changed": false, "msg": "modprobe: FATAL: Module nf_conntrack_ipv4 not found in directory /lib/modules/5.15.0-1027-gcp\n", "name": "nf_conntrack_ipv4", "params": "", "rc": 1, "state": "present", "stderr": "modprobe: FATAL: Module nf_conntrack_ipv4 not found in directory /lib/modules/5.15.0-1027-gcp\n", "stderr_lines": ["modprobe: FATAL: Module nf_conntrack_ipv4 not found in directory /lib/modules/5.15.0-1027-gcp"], "stdout": "", "stdout_lines": []}
...ignoring
Wednesday 08 February 2023  20:58:40 +0200 (0:00:01.330)       0:11:24.587 ****

TASK [kubernetes/node : Persist ip_vs modules] *************************************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:58:43 +0200 (0:00:02.881)       0:11:27.468 ****
Wednesday 08 February 2023  20:58:43 +0200 (0:00:00.040)       0:11:27.509 ****
Wednesday 08 February 2023  20:58:43 +0200 (0:00:00.040)       0:11:27.550 ****
Wednesday 08 February 2023  20:58:43 +0200 (0:00:00.041)       0:11:27.591 ****
Wednesday 08 February 2023  20:58:44 +0200 (0:00:00.043)       0:11:27.635 ****

TASK [kubernetes/node : Set kubelet api version to v1beta1] ************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:58:44 +0200 (0:00:00.058)       0:11:27.693 ****

TASK [kubernetes/node : Write kubelet environment config file (kubeadm)] ***********************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:58:47 +0200 (0:00:03.124)       0:11:30.817 ****

TASK [kubernetes/node : Write kubelet config file] *********************************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:58:50 +0200 (0:00:02.916)       0:11:33.734 ****

TASK [kubernetes/node : Write kubelet systemd init file] ***************************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:58:52 +0200 (0:00:02.857)       0:11:36.591 ****
Wednesday 08 February 2023  20:58:52 +0200 (0:00:00.000)       0:11:36.592 ****

RUNNING HANDLER [kubernetes/node : Node | restart kubelet] *************************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:58:54 +0200 (0:00:01.455)       0:11:38.047 ****

RUNNING HANDLER [kubernetes/node : Kubelet | reload systemd] ***********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:58:56 +0200 (0:00:01.924)       0:11:39.972 ****

RUNNING HANDLER [kubernetes/node : Kubelet | restart kubelet] **********************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:58:58 +0200 (0:00:01.762)       0:11:41.735 ****

TASK [kubernetes/node : Enable kubelet] ********************************************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:59:00 +0200 (0:00:02.055)       0:11:43.790 ****

RUNNING HANDLER [kubernetes/node : Kubelet | restart kubelet] **********************************************************************************************
changed: [node1]

PLAY [kube_control_plane] **********************************************************************************************************************************
Wednesday 08 February 2023  20:59:02 +0200 (0:00:02.182)       0:11:45.973 ****
Wednesday 08 February 2023  20:59:02 +0200 (0:00:00.048)       0:11:46.022 ****
Wednesday 08 February 2023  20:59:02 +0200 (0:00:00.049)       0:11:46.071 ****
Wednesday 08 February 2023  20:59:02 +0200 (0:00:00.044)       0:11:46.116 ****
Wednesday 08 February 2023  20:59:02 +0200 (0:00:00.043)       0:11:46.159 ****
Wednesday 08 February 2023  20:59:02 +0200 (0:00:00.045)       0:11:46.205 ****
Wednesday 08 February 2023  20:59:02 +0200 (0:00:00.047)       0:11:46.252 ****
Wednesday 08 February 2023  20:59:02 +0200 (0:00:00.049)       0:11:46.301 ****
Wednesday 08 February 2023  20:59:02 +0200 (0:00:00.044)       0:11:46.346 ****
Wednesday 08 February 2023  20:59:02 +0200 (0:00:00.043)       0:11:46.390 ****
Wednesday 08 February 2023  20:59:03 +0200 (0:00:00.892)       0:11:47.282 ****

TASK [kubespray-defaults : Configure defaults] *************************************************************************************************************
ok: [node1] => {
    "msg": "Check roles/kubespray-defaults/defaults/main.yml"
}
Wednesday 08 February 2023  20:59:03 +0200 (0:00:00.054)       0:11:47.336 ****
Wednesday 08 February 2023  20:59:03 +0200 (0:00:00.063)       0:11:47.400 ****
Wednesday 08 February 2023  20:59:03 +0200 (0:00:00.043)       0:11:47.443 ****
Wednesday 08 February 2023  20:59:03 +0200 (0:00:00.048)       0:11:47.491 ****
Wednesday 08 February 2023  20:59:03 +0200 (0:00:00.047)       0:11:47.539 ****
Wednesday 08 February 2023  20:59:03 +0200 (0:00:00.043)       0:11:47.582 ****
Wednesday 08 February 2023  20:59:04 +0200 (0:00:00.068)       0:11:47.651 ****
Wednesday 08 February 2023  20:59:04 +0200 (0:00:00.040)       0:11:47.692 ****
Wednesday 08 February 2023  20:59:04 +0200 (0:00:00.040)       0:11:47.733 ****
Wednesday 08 February 2023  20:59:04 +0200 (0:00:00.044)       0:11:47.777 ****
Wednesday 08 February 2023  20:59:04 +0200 (0:00:00.039)       0:11:47.817 ****
Wednesday 08 February 2023  20:59:04 +0200 (0:00:00.042)       0:11:47.859 ****
Wednesday 08 February 2023  20:59:04 +0200 (0:00:00.061)       0:11:47.921 ****
Wednesday 08 February 2023  20:59:04 +0200 (0:00:00.059)       0:11:47.981 ****
Wednesday 08 February 2023  20:59:04 +0200 (0:00:00.063)       0:11:48.044 ****
Wednesday 08 February 2023  20:59:04 +0200 (0:00:00.058)       0:11:48.103 ****
Wednesday 08 February 2023  20:59:04 +0200 (0:00:00.056)       0:11:48.160 ****
Wednesday 08 February 2023  20:59:04 +0200 (0:00:00.040)       0:11:48.201 ****
Wednesday 08 February 2023  20:59:04 +0200 (0:00:00.056)       0:11:48.257 ****
Wednesday 08 February 2023  20:59:04 +0200 (0:00:00.039)       0:11:48.296 ****
Wednesday 08 February 2023  20:59:04 +0200 (0:00:00.054)       0:11:48.351 ****

TASK [kubernetes/control-plane : Pre-upgrade | Delete master manifests if etcd secrets changed] ************************************************************
ok: [node1] => (item=kube-apiserver)
ok: [node1] => (item=kube-controller-manager)
ok: [node1] => (item=kube-scheduler)
Wednesday 08 February 2023  20:59:08 +0200 (0:00:04.261)       0:11:52.612 ****
Wednesday 08 February 2023  20:59:09 +0200 (0:00:00.052)       0:11:52.665 ****
Wednesday 08 February 2023  20:59:09 +0200 (0:00:00.044)       0:11:52.710 ****
Wednesday 08 February 2023  20:59:09 +0200 (0:00:00.044)       0:11:52.754 ****

TASK [kubernetes/control-plane : Create kube-scheduler config] *********************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:59:12 +0200 (0:00:02.994)       0:11:55.749 ****
Wednesday 08 February 2023  20:59:12 +0200 (0:00:00.042)       0:11:55.791 ****
Wednesday 08 February 2023  20:59:12 +0200 (0:00:00.039)       0:11:55.830 ****
Wednesday 08 February 2023  20:59:12 +0200 (0:00:00.041)       0:11:55.872 ****
Wednesday 08 February 2023  20:59:12 +0200 (0:00:00.056)       0:11:55.929 ****
Wednesday 08 February 2023  20:59:12 +0200 (0:00:00.046)       0:11:55.975 ****
Wednesday 08 February 2023  20:59:12 +0200 (0:00:00.039)       0:11:56.015 ****

TASK [kubernetes/control-plane : Install | Copy kubectl binary from download dir] **************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:59:14 +0200 (0:00:01.889)       0:11:57.904 ****

TASK [kubernetes/control-plane : Install kubectl bash completion] ******************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:59:15 +0200 (0:00:01.533)       0:11:59.437 ****

TASK [kubernetes/control-plane : Set kubectl bash completion file permissions] *****************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:59:17 +0200 (0:00:01.340)       0:12:00.778 ****
Wednesday 08 February 2023  20:59:17 +0200 (0:00:00.041)       0:12:00.819 ****

TASK [kubernetes/control-plane : Check which kube-control nodes are already members of the cluster] ********************************************************
fatal: [node1]: FAILED! => {"changed": false, "cmd": ["/usr/local/bin/kubectl", "get", "nodes", "--selector=node-role.kubernetes.io/control-plane", "-o", "json"], "delta": "0:00:00.060648", "end": "2023-02-08 18:59:18.630233", "msg": "non-zero return code", "rc": 1, "start": "2023-02-08 18:59:18.569585", "stderr": "The connection to the server localhost:8080 was refused - did you specify the right host or port?", "stderr_lines": ["The connection to the server localhost:8080 was refused - did you specify the right host or port?"], "stdout": "", "stdout_lines": []}
...ignoring
Wednesday 08 February 2023  20:59:18 +0200 (0:00:01.520)       0:12:02.340 ****
Wednesday 08 February 2023  20:59:18 +0200 (0:00:00.046)       0:12:02.387 ****

TASK [kubernetes/control-plane : Set fact first_kube_control_plane] ****************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:59:18 +0200 (0:00:00.057)       0:12:02.444 ****
Wednesday 08 February 2023  20:59:18 +0200 (0:00:00.043)       0:12:02.488 ****

TASK [kubernetes/control-plane : kubeadm | Check if kubeadm has already run] *******************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:59:20 +0200 (0:00:01.384)       0:12:03.872 ****
Wednesday 08 February 2023  20:59:20 +0200 (0:00:00.065)       0:12:03.938 ****
Wednesday 08 February 2023  20:59:20 +0200 (0:00:00.055)       0:12:03.994 ****

TASK [kubernetes/control-plane : kubeadm | aggregate all SANs] *********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:59:20 +0200 (0:00:00.205)       0:12:04.199 ****
Wednesday 08 February 2023  20:59:20 +0200 (0:00:00.042)       0:12:04.242 ****
Wednesday 08 February 2023  20:59:20 +0200 (0:00:00.048)       0:12:04.291 ****
Wednesday 08 February 2023  20:59:20 +0200 (0:00:00.045)       0:12:04.336 ****
Wednesday 08 February 2023  20:59:20 +0200 (0:00:00.041)       0:12:04.377 ****

TASK [kubernetes/control-plane : Set kubeadm api version to v1beta3] ***************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:59:20 +0200 (0:00:00.056)       0:12:04.434 ****

TASK [kubernetes/control-plane : kubeadm | Create kubeadm config] ******************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:59:24 +0200 (0:00:03.454)       0:12:07.889 ****
Wednesday 08 February 2023  20:59:24 +0200 (0:00:00.041)       0:12:07.930 ****
Wednesday 08 February 2023  20:59:24 +0200 (0:00:00.041)       0:12:07.972 ****
Wednesday 08 February 2023  20:59:24 +0200 (0:00:00.043)       0:12:08.015 ****
Wednesday 08 February 2023  20:59:24 +0200 (0:00:00.042)       0:12:08.058 ****
Wednesday 08 February 2023  20:59:24 +0200 (0:00:00.054)       0:12:08.113 ****
Wednesday 08 February 2023  20:59:24 +0200 (0:00:00.039)       0:12:08.152 ****

TASK [kubernetes/control-plane : kubeadm | Initialize first master] ****************************************************************************************
changed: [node1]
Wednesday 08 February 2023  20:59:41 +0200 (0:00:16.770)       0:12:24.923 ****
Wednesday 08 February 2023  20:59:41 +0200 (0:00:00.642)       0:12:25.566 ****
Wednesday 08 February 2023  20:59:41 +0200 (0:00:00.056)       0:12:25.623 ****

TASK [kubernetes/control-plane : Create kubeadm token for joining nodes with 24h expiration (default)] *****************************************************
ok: [node1]
Wednesday 08 February 2023  20:59:42 +0200 (0:00:00.807)       0:12:26.430 ****

TASK [kubernetes/control-plane : Set kubeadm_token] ********************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:59:42 +0200 (0:00:00.059)       0:12:26.490 ****
Wednesday 08 February 2023  20:59:42 +0200 (0:00:00.043)       0:12:26.534 ****

TASK [kubernetes/control-plane : kubeadm | Join other masters] *********************************************************************************************
included: /Users/max/DevOps/kubespray/roles/kubernetes/control-plane/tasks/kubeadm-secondary.yml for node1
Wednesday 08 February 2023  20:59:42 +0200 (0:00:00.069)       0:12:26.604 ****

TASK [kubernetes/control-plane : Set kubeadm_discovery_address] ********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:59:43 +0200 (0:00:00.123)       0:12:26.727 ****

TASK [kubernetes/control-plane : Upload certificates so they are fresh and not expired] ********************************************************************
changed: [node1]
Wednesday 08 February 2023  20:59:45 +0200 (0:00:01.910)       0:12:28.638 ****

TASK [kubernetes/control-plane : Parse certificate key if not set] *****************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:59:45 +0200 (0:00:00.106)       0:12:28.744 ****
Wednesday 08 February 2023  20:59:45 +0200 (0:00:00.041)       0:12:28.785 ****

TASK [kubernetes/control-plane : Wait for k8s apiserver] ***************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:59:47 +0200 (0:00:02.113)       0:12:30.899 ****

TASK [kubernetes/control-plane : check already run] ********************************************************************************************************
ok: [node1] => {
    "msg": false
}
Wednesday 08 February 2023  20:59:47 +0200 (0:00:00.057)       0:12:30.957 ****
Wednesday 08 February 2023  20:59:47 +0200 (0:00:00.041)       0:12:30.999 ****
Wednesday 08 February 2023  20:59:47 +0200 (0:00:00.041)       0:12:31.040 ****
Wednesday 08 February 2023  20:59:47 +0200 (0:00:00.056)       0:12:31.097 ****

TASK [kubernetes/control-plane : kubeadm | Remove taint for master with node role] *************************************************************************
changed: [node1] => (item=node-role.kubernetes.io/master:NoSchedule-)
changed: [node1] => (item=node-role.kubernetes.io/control-plane:NoSchedule-)
Wednesday 08 February 2023  20:59:49 +0200 (0:00:01.619)       0:12:32.716 ****
Wednesday 08 February 2023  20:59:49 +0200 (0:00:00.041)       0:12:32.757 ****

TASK [kubernetes/control-plane : Include kubeadm secondary server apiserver fixes] *************************************************************************
included: /Users/max/DevOps/kubespray/roles/kubernetes/control-plane/tasks/kubeadm-fix-apiserver.yml for node1
Wednesday 08 February 2023  20:59:49 +0200 (0:00:00.072)       0:12:32.830 ****

TASK [kubernetes/control-plane : Update server field in component kubeconfigs] *****************************************************************************
changed: [node1] => (item=admin.conf)
changed: [node1] => (item=controller-manager.conf)
changed: [node1] => (item=kubelet.conf)
changed: [node1] => (item=scheduler.conf)
Wednesday 08 February 2023  20:59:56 +0200 (0:00:06.986)       0:12:39.817 ****

TASK [kubernetes/control-plane : Update etcd-servers for apiserver] ****************************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:59:57 +0200 (0:00:01.713)       0:12:41.530 ****

TASK [kubernetes/control-plane : Include kubelet client cert rotation fixes] *******************************************************************************
included: /Users/max/DevOps/kubespray/roles/kubernetes/control-plane/tasks/kubelet-fix-client-cert-rotation.yml for node1
Wednesday 08 February 2023  20:59:57 +0200 (0:00:00.076)       0:12:41.606 ****

TASK [kubernetes/control-plane : Fixup kubelet client cert rotation 1/2] ***********************************************************************************
ok: [node1]
Wednesday 08 February 2023  20:59:59 +0200 (0:00:01.452)       0:12:43.059 ****

TASK [kubernetes/control-plane : Fixup kubelet client cert rotation 2/2] ***********************************************************************************
ok: [node1]
Wednesday 08 February 2023  21:00:01 +0200 (0:00:01.599)       0:12:44.659 ****

TASK [kubernetes/control-plane : Install script to renew K8S control plane certificates] *******************************************************************
changed: [node1]
Wednesday 08 February 2023  21:00:04 +0200 (0:00:03.270)       0:12:47.929 ****
Wednesday 08 February 2023  21:00:04 +0200 (0:00:00.048)       0:12:47.977 ****
Wednesday 08 February 2023  21:00:04 +0200 (0:00:00.053)       0:12:48.030 ****

TASK [kubernetes/client : Set external kube-apiserver endpoint] ********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  21:00:04 +0200 (0:00:00.065)       0:12:48.096 ****

TASK [kubernetes/client : Create kube config dir for current/ansible become user] **************************************************************************
changed: [node1]
Wednesday 08 February 2023  21:00:05 +0200 (0:00:01.340)       0:12:49.436 ****

TASK [kubernetes/client : Copy admin kubeconfig to current/ansible become user home] ***********************************************************************
changed: [node1]
Wednesday 08 February 2023  21:00:07 +0200 (0:00:01.606)       0:12:51.043 ****
Wednesday 08 February 2023  21:00:07 +0200 (0:00:00.039)       0:12:51.082 ****

TASK [kubernetes/client : Wait for k8s apiserver] **********************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  21:00:08 +0200 (0:00:01.538)       0:12:52.621 ****
Wednesday 08 February 2023  21:00:09 +0200 (0:00:00.040)       0:12:52.661 ****
Wednesday 08 February 2023  21:00:09 +0200 (0:00:00.039)       0:12:52.701 ****
Wednesday 08 February 2023  21:00:09 +0200 (0:00:00.046)       0:12:52.747 ****
Wednesday 08 February 2023  21:00:09 +0200 (0:00:00.041)       0:12:52.788 ****
Wednesday 08 February 2023  21:00:09 +0200 (0:00:00.044)       0:12:52.833 ****
Wednesday 08 February 2023  21:00:09 +0200 (0:00:00.055)       0:12:52.888 ****

TASK [kubernetes-apps/cluster_roles : Kubernetes Apps | Wait for kube-apiserver] ***************************************************************************
ok: [node1]
Wednesday 08 February 2023  21:00:10 +0200 (0:00:01.648)       0:12:54.536 ****

TASK [kubernetes-apps/cluster_roles : Kubernetes Apps | Add ClusterRoleBinding to admit nodes] *************************************************************
changed: [node1]
Wednesday 08 February 2023  21:00:14 +0200 (0:00:03.450)       0:12:57.987 ****

TASK [kubernetes-apps/cluster_roles : Apply workaround to allow all nodes with cert O=system:nodes to register] ********************************************
ok: [node1]
Wednesday 08 February 2023  21:00:17 +0200 (0:00:03.005)       0:13:00.993 ****
Wednesday 08 February 2023  21:00:17 +0200 (0:00:00.044)       0:13:01.037 ****
Wednesday 08 February 2023  21:00:17 +0200 (0:00:00.043)       0:13:01.081 ****
Wednesday 08 February 2023  21:00:17 +0200 (0:00:00.044)       0:13:01.125 ****
Wednesday 08 February 2023  21:00:17 +0200 (0:00:00.043)       0:13:01.169 ****
Wednesday 08 February 2023  21:00:17 +0200 (0:00:00.042)       0:13:01.211 ****

TASK [kubernetes-apps/cluster_roles : PriorityClass | Copy k8s-cluster-critical-pc.yml file] ***************************************************************
changed: [node1]
Wednesday 08 February 2023  21:00:20 +0200 (0:00:03.159)       0:13:04.370 ****

TASK [kubernetes-apps/cluster_roles : PriorityClass | Create k8s-cluster-critical] *************************************************************************
ok: [node1]
Wednesday 08 February 2023  21:00:22 +0200 (0:00:01.747)       0:13:06.118 ****

RUNNING HANDLER [kubernetes/control-plane : Master | restart kubelet] **************************************************************************************
changed: [node1]
Wednesday 08 February 2023  21:00:23 +0200 (0:00:01.415)       0:13:07.534 ****

RUNNING HANDLER [kubernetes/control-plane : Master | wait for master static pods] **************************************************************************
changed: [node1]
Wednesday 08 February 2023  21:00:25 +0200 (0:00:01.347)       0:13:08.881 ****

RUNNING HANDLER [kubernetes/control-plane : Master | Restart kube-scheduler] *******************************************************************************
changed: [node1]
Wednesday 08 February 2023  21:00:26 +0200 (0:00:01.391)       0:13:10.273 ****

RUNNING HANDLER [kubernetes/control-plane : Master | Restart kube-controller-manager] **********************************************************************
changed: [node1]
Wednesday 08 February 2023  21:00:27 +0200 (0:00:01.354)       0:13:11.627 ****

RUNNING HANDLER [kubernetes/control-plane : Master | reload systemd] ***************************************************************************************
ok: [node1]
Wednesday 08 February 2023  21:00:29 +0200 (0:00:01.935)       0:13:13.563 ****

RUNNING HANDLER [kubernetes/control-plane : Master | reload kubelet] ***************************************************************************************
changed: [node1]
Wednesday 08 February 2023  21:00:31 +0200 (0:00:01.875)       0:13:15.438 ****
Wednesday 08 February 2023  21:00:31 +0200 (0:00:00.040)       0:13:15.479 ****

RUNNING HANDLER [kubernetes/control-plane : Master | Remove scheduler container containerd/crio] ***********************************************************
changed: [node1]
Wednesday 08 February 2023  21:00:33 +0200 (0:00:01.675)       0:13:17.155 ****
Wednesday 08 February 2023  21:00:33 +0200 (0:00:00.039)       0:13:17.194 ****

RUNNING HANDLER [kubernetes/control-plane : Master | Remove controller manager container containerd/crio] **************************************************
changed: [node1]
Wednesday 08 February 2023  21:00:35 +0200 (0:00:01.694)       0:13:18.889 ****

RUNNING HANDLER [kubernetes/control-plane : Master | wait for kube-scheduler] ******************************************************************************
ok: [node1]
Wednesday 08 February 2023  21:00:36 +0200 (0:00:01.547)       0:13:20.436 ****

RUNNING HANDLER [kubernetes/control-plane : Master | wait for kube-controller-manager] *********************************************************************
ok: [node1]
Wednesday 08 February 2023  21:00:38 +0200 (0:00:01.627)       0:13:22.064 ****

RUNNING HANDLER [kubernetes/control-plane : Master | wait for the apiserver to be running] *****************************************************************
ok: [node1]

PLAY [k8s_cluster] *****************************************************************************************************************************************
Wednesday 08 February 2023  21:00:40 +0200 (0:00:01.843)       0:13:23.908 ****
Wednesday 08 February 2023  21:00:40 +0200 (0:00:00.049)       0:13:23.958 ****
Wednesday 08 February 2023  21:00:40 +0200 (0:00:00.052)       0:13:24.010 ****
Wednesday 08 February 2023  21:00:40 +0200 (0:00:00.052)       0:13:24.063 ****
Wednesday 08 February 2023  21:00:40 +0200 (0:00:00.045)       0:13:24.108 ****
Wednesday 08 February 2023  21:00:40 +0200 (0:00:00.045)       0:13:24.153 ****
Wednesday 08 February 2023  21:00:40 +0200 (0:00:00.047)       0:13:24.201 ****
Wednesday 08 February 2023  21:00:40 +0200 (0:00:00.050)       0:13:24.251 ****
Wednesday 08 February 2023  21:00:40 +0200 (0:00:00.047)       0:13:24.298 ****
Wednesday 08 February 2023  21:00:40 +0200 (0:00:00.053)       0:13:24.352 ****
Wednesday 08 February 2023  21:00:41 +0200 (0:00:00.890)       0:13:25.242 ****

TASK [kubespray-defaults : Configure defaults] *************************************************************************************************************
ok: [node1] => {
    "msg": "Check roles/kubespray-defaults/defaults/main.yml"
}
Wednesday 08 February 2023  21:00:41 +0200 (0:00:00.057)       0:13:25.300 ****
Wednesday 08 February 2023  21:00:41 +0200 (0:00:00.064)       0:13:25.364 ****
Wednesday 08 February 2023  21:00:41 +0200 (0:00:00.046)       0:13:25.410 ****
Wednesday 08 February 2023  21:00:41 +0200 (0:00:00.049)       0:13:25.459 ****
Wednesday 08 February 2023  21:00:41 +0200 (0:00:00.044)       0:13:25.503 ****
Wednesday 08 February 2023  21:00:41 +0200 (0:00:00.044)       0:13:25.548 ****
Wednesday 08 February 2023  21:00:41 +0200 (0:00:00.054)       0:13:25.603 ****

TASK [kubernetes/kubeadm : Set kubeadm_discovery_address] **************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  21:00:42 +0200 (0:00:00.122)       0:13:25.726 ****

TASK [kubernetes/kubeadm : Check if kubelet.conf exists] ***************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  21:00:43 +0200 (0:00:01.324)       0:13:27.050 ****

TASK [kubernetes/kubeadm : Check if kubeadm CA cert is accessible] *****************************************************************************************
ok: [node1]
Wednesday 08 February 2023  21:00:43 +0200 (0:00:00.498)       0:13:27.549 ****

TASK [kubernetes/kubeadm : Calculate kubeadm CA cert hash] *************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  21:00:44 +0200 (0:00:00.501)       0:13:28.051 ****
Wednesday 08 February 2023  21:00:44 +0200 (0:00:00.042)       0:13:28.093 ****
Wednesday 08 February 2023  21:00:44 +0200 (0:00:00.041)       0:13:28.135 ****

TASK [kubernetes/kubeadm : Set kubeadm api version to v1beta2] *********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  21:00:44 +0200 (0:00:00.057)       0:13:28.192 ****
Wednesday 08 February 2023  21:00:44 +0200 (0:00:00.041)       0:13:28.234 ****
Wednesday 08 February 2023  21:00:44 +0200 (0:00:00.043)       0:13:28.278 ****
Wednesday 08 February 2023  21:00:44 +0200 (0:00:00.043)       0:13:28.322 ****
Wednesday 08 February 2023  21:00:44 +0200 (0:00:00.062)       0:13:28.384 ****

TASK [kubernetes/kubeadm : Update server field in kube-proxy kubeconfig] ***********************************************************************************
changed: [node1]
Wednesday 08 February 2023  21:00:45 +0200 (0:00:00.857)       0:13:29.242 ****

TASK [kubernetes/kubeadm : Set ca.crt file permission] *****************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  21:00:47 +0200 (0:00:01.454)       0:13:30.697 ****

TASK [kubernetes/kubeadm : Restart all kube-proxy pods to ensure that they load the new configmap] *********************************************************
changed: [node1]
Wednesday 08 February 2023  21:00:47 +0200 (0:00:00.697)       0:13:31.394 ****
Wednesday 08 February 2023  21:00:47 +0200 (0:00:00.055)       0:13:31.450 ****

TASK [kubernetes/node-label : Kubernetes Apps | Wait for kube-apiserver] ***********************************************************************************
ok: [node1]
Wednesday 08 February 2023  21:00:49 +0200 (0:00:01.600)       0:13:33.051 ****

TASK [kubernetes/node-label : Set role node label to empty list] *******************************************************************************************
ok: [node1]
Wednesday 08 February 2023  21:00:49 +0200 (0:00:00.057)       0:13:33.108 ****
Wednesday 08 February 2023  21:00:49 +0200 (0:00:00.042)       0:13:33.150 ****

TASK [kubernetes/node-label : Set inventory node label to empty list] **************************************************************************************
ok: [node1]
Wednesday 08 February 2023  21:00:49 +0200 (0:00:00.056)       0:13:33.207 ****
Wednesday 08 February 2023  21:00:49 +0200 (0:00:00.040)       0:13:33.248 ****

TASK [kubernetes/node-label : debug] ***********************************************************************************************************************
ok: [node1] => {
    "role_node_labels": []
}
Wednesday 08 February 2023  21:00:49 +0200 (0:00:00.058)       0:13:33.306 ****

TASK [kubernetes/node-label : debug] ***********************************************************************************************************************
ok: [node1] => {
    "inventory_node_labels": []
}
Wednesday 08 February 2023  21:00:49 +0200 (0:00:00.059)       0:13:33.365 ****
Wednesday 08 February 2023  21:00:49 +0200 (0:00:00.127)       0:13:33.492 ****
Wednesday 08 February 2023  21:00:49 +0200 (0:00:00.044)       0:13:33.537 ****
Wednesday 08 February 2023  21:00:49 +0200 (0:00:00.058)       0:13:33.595 ****
Wednesday 08 February 2023  21:00:50 +0200 (0:00:00.046)       0:13:33.641 ****
Wednesday 08 February 2023  21:00:50 +0200 (0:00:00.046)       0:13:33.688 ****
Wednesday 08 February 2023  21:00:50 +0200 (0:00:00.045)       0:13:33.733 ****
Wednesday 08 February 2023  21:00:50 +0200 (0:00:00.053)       0:13:33.787 ****
Wednesday 08 February 2023  21:00:50 +0200 (0:00:00.045)       0:13:33.833 ****
Wednesday 08 February 2023  21:00:50 +0200 (0:00:00.044)       0:13:33.878 ****
Wednesday 08 February 2023  21:00:50 +0200 (0:00:00.045)       0:13:33.924 ****
Wednesday 08 February 2023  21:00:50 +0200 (0:00:00.045)       0:13:33.969 ****
Wednesday 08 February 2023  21:00:50 +0200 (0:00:00.045)       0:13:34.014 ****
Wednesday 08 February 2023  21:00:50 +0200 (0:00:00.065)       0:13:34.079 ****

TASK [network_plugin/calico : Slurp CNI config] ************************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  21:00:51 +0200 (0:00:01.317)       0:13:35.397 ****
Wednesday 08 February 2023  21:00:51 +0200 (0:00:00.043)       0:13:35.440 ****
Wednesday 08 February 2023  21:00:51 +0200 (0:00:00.061)       0:13:35.502 ****
Wednesday 08 February 2023  21:00:51 +0200 (0:00:00.045)       0:13:35.548 ****

TASK [network_plugin/calico : Calico | Gather os specific variables] ***************************************************************************************
ok: [node1] => (item=/Users/max/DevOps/kubespray/roles/network_plugin/calico/vars/../vars/debian.yml)
Wednesday 08 February 2023  21:00:51 +0200 (0:00:00.080)       0:13:35.628 ****
Wednesday 08 February 2023  21:00:52 +0200 (0:00:00.043)       0:13:35.672 ****

TASK [network_plugin/calico : include_tasks] ***************************************************************************************************************
included: /Users/max/DevOps/kubespray/roles/network_plugin/calico/tasks/install.yml for node1
Wednesday 08 February 2023  21:00:52 +0200 (0:00:00.121)       0:13:35.794 ****
Wednesday 08 February 2023  21:00:52 +0200 (0:00:00.047)       0:13:35.841 ****

TASK [network_plugin/calico : Calico | Copy calicoctl binary from download dir] ****************************************************************************
changed: [node1]
Wednesday 08 February 2023  21:00:54 +0200 (0:00:01.911)       0:13:37.753 ****

TASK [network_plugin/calico : Calico | Write Calico cni config] ********************************************************************************************
changed: [node1]
Wednesday 08 February 2023  21:00:57 +0200 (0:00:02.974)       0:13:40.728 ****
Wednesday 08 February 2023  21:00:57 +0200 (0:00:00.044)       0:13:40.773 ****
Wednesday 08 February 2023  21:00:57 +0200 (0:00:00.065)       0:13:40.838 ****
Wednesday 08 February 2023  21:00:57 +0200 (0:00:00.044)       0:13:40.883 ****
Wednesday 08 February 2023  21:00:57 +0200 (0:00:00.044)       0:13:40.927 ****

TASK [network_plugin/calico : Calico | Install calicoctl wrapper script] ***********************************************************************************
changed: [node1]
Wednesday 08 February 2023  21:01:00 +0200 (0:00:03.380)       0:13:44.308 ****
Wednesday 08 February 2023  21:01:00 +0200 (0:00:00.044)       0:13:44.352 ****

TASK [network_plugin/calico : Calico | Check if calico network pool has already been configured] ***********************************************************
ok: [node1]
Wednesday 08 February 2023  21:01:02 +0200 (0:00:01.994)       0:13:46.347 ****
Wednesday 08 February 2023  21:01:02 +0200 (0:00:00.050)       0:13:46.397 ****
Wednesday 08 February 2023  21:01:02 +0200 (0:00:00.047)       0:13:46.445 ****
Wednesday 08 February 2023  21:01:02 +0200 (0:00:00.048)       0:13:46.494 ****

TASK [network_plugin/calico : Calico | Check if extra directory is needed] *********************************************************************************
ok: [node1]
Wednesday 08 February 2023  21:01:04 +0200 (0:00:01.597)       0:13:48.091 ****
Wednesday 08 February 2023  21:01:04 +0200 (0:00:00.050)       0:13:48.141 ****

TASK [network_plugin/calico : Calico | Set kdd path when calico > v3.22.2] *********************************************************************************
ok: [node1]
Wednesday 08 February 2023  21:01:04 +0200 (0:00:00.069)       0:13:48.211 ****

TASK [network_plugin/calico : Calico | Create calico manifests for kdd] ************************************************************************************
changed: [node1]
Wednesday 08 February 2023  21:01:06 +0200 (0:00:01.622)       0:13:49.834 ****

TASK [network_plugin/calico : Calico | Create Calico Kubernetes datastore resources] ***********************************************************************
ok: [node1]
Wednesday 08 February 2023  21:01:08 +0200 (0:00:02.042)       0:13:51.876 ****

TASK [network_plugin/calico : Calico | Get existing FelixConfiguration] ************************************************************************************
fatal: [node1]: FAILED! => {"changed": false, "cmd": ["/usr/local/bin/calicoctl.sh", "get", "felixconfig", "default", "-o", "json"], "delta": "0:00:00.084885", "end": "2023-02-08 19:01:09.580229", "msg": "non-zero return code", "rc": 1, "start": "2023-02-08 19:01:09.495344", "stderr": "resource does not exist: FelixConfiguration(default) with error: felixconfigurations.crd.projectcalico.org \"default\" not found", "stderr_lines": ["resource does not exist: FelixConfiguration(default) with error: felixconfigurations.crd.projectcalico.org \"default\" not found"], "stdout": "null", "stdout_lines": ["null"]}
...ignoring
Wednesday 08 February 2023  21:01:09 +0200 (0:00:01.437)       0:13:53.314 ****

TASK [network_plugin/calico : Calico | Set kubespray FelixConfiguration] ***********************************************************************************
ok: [node1]
Wednesday 08 February 2023  21:01:09 +0200 (0:00:00.066)       0:13:53.380 ****
Wednesday 08 February 2023  21:01:09 +0200 (0:00:00.048)       0:13:53.428 ****

TASK [network_plugin/calico : Calico | Configure calico FelixConfiguration] ********************************************************************************
ok: [node1]
Wednesday 08 February 2023  21:01:11 +0200 (0:00:01.430)       0:13:54.859 ****

TASK [network_plugin/calico : Calico | Get existing calico network pool] ***********************************************************************************
fatal: [node1]: FAILED! => {"changed": false, "cmd": ["/usr/local/bin/calicoctl.sh", "get", "ippool", "default-pool", "-o", "json"], "delta": "0:00:00.077965", "end": "2023-02-08 19:01:12.547061", "msg": "non-zero return code", "rc": 1, "start": "2023-02-08 19:01:12.469096", "stderr": "resource does not exist: IPPool(default-pool) with error: ippools.crd.projectcalico.org \"default-pool\" not found", "stderr_lines": ["resource does not exist: IPPool(default-pool) with error: ippools.crd.projectcalico.org \"default-pool\" not found"], "stdout": "null", "stdout_lines": ["null"]}
...ignoring
Wednesday 08 February 2023  21:01:12 +0200 (0:00:01.417)       0:13:56.276 ****

TASK [network_plugin/calico : Calico | Set kubespray calico network pool] **********************************************************************************
ok: [node1]
Wednesday 08 February 2023  21:01:12 +0200 (0:00:00.065)       0:13:56.342 ****
Wednesday 08 February 2023  21:01:12 +0200 (0:00:00.048)       0:13:56.390 ****

TASK [network_plugin/calico : Calico | Configure calico network pool] **************************************************************************************
ok: [node1]
Wednesday 08 February 2023  21:01:14 +0200 (0:00:01.528)       0:13:57.919 ****
Wednesday 08 February 2023  21:01:14 +0200 (0:00:00.049)       0:13:57.968 ****
Wednesday 08 February 2023  21:01:14 +0200 (0:00:00.050)       0:13:58.018 ****
Wednesday 08 February 2023  21:01:14 +0200 (0:00:00.049)       0:13:58.068 ****
Wednesday 08 February 2023  21:01:14 +0200 (0:00:00.048)       0:13:58.117 ****
Wednesday 08 February 2023  21:01:14 +0200 (0:00:00.042)       0:13:58.159 ****
Wednesday 08 February 2023  21:01:14 +0200 (0:00:00.037)       0:13:58.197 ****
Wednesday 08 February 2023  21:01:14 +0200 (0:00:00.050)       0:13:58.247 ****

TASK [network_plugin/calico : Calico | Get existing BGP Configuration] *************************************************************************************
fatal: [node1]: FAILED! => {"changed": false, "cmd": ["/usr/local/bin/calicoctl.sh", "get", "bgpconfig", "default", "-o", "json"], "delta": "0:00:00.079543", "end": "2023-02-08 19:01:16.121656", "msg": "non-zero return code", "rc": 1, "start": "2023-02-08 19:01:16.042113", "stderr": "resource does not exist: BGPConfiguration(default) with error: bgpconfigurations.crd.projectcalico.org \"default\" not found", "stderr_lines": ["resource does not exist: BGPConfiguration(default) with error: bgpconfigurations.crd.projectcalico.org \"default\" not found"], "stdout": "null", "stdout_lines": ["null"]}
...ignoring
Wednesday 08 February 2023  21:01:16 +0200 (0:00:01.618)       0:13:59.866 ****

TASK [network_plugin/calico : Calico | Set kubespray BGP Configuration] ************************************************************************************
ok: [node1]
Wednesday 08 February 2023  21:01:16 +0200 (0:00:00.065)       0:13:59.932 ****
Wednesday 08 February 2023  21:01:16 +0200 (0:00:00.047)       0:13:59.979 ****

TASK [network_plugin/calico : Calico | Set up BGP Configuration] *******************************************************************************************
ok: [node1]
Wednesday 08 February 2023  21:01:17 +0200 (0:00:01.418)       0:14:01.398 ****

TASK [network_plugin/calico : Calico | Create calico manifests] ********************************************************************************************
changed: [node1] => (item={'name': 'calico-config', 'file': 'calico-config.yml', 'type': 'cm'})
changed: [node1] => (item={'name': 'calico-node', 'file': 'calico-node.yml', 'type': 'ds'})
changed: [node1] => (item={'name': 'calico', 'file': 'calico-node-sa.yml', 'type': 'sa'})
changed: [node1] => (item={'name': 'calico', 'file': 'calico-cr.yml', 'type': 'clusterrole'})
changed: [node1] => (item={'name': 'calico', 'file': 'calico-crb.yml', 'type': 'clusterrolebinding'})
changed: [node1] => (item={'name': 'kubernetes-services-endpoint', 'file': 'kubernetes-services-endpoint.yml', 'type': 'cm'})
Wednesday 08 February 2023  21:01:35 +0200 (0:00:17.691)       0:14:19.090 ****
Wednesday 08 February 2023  21:01:35 +0200 (0:00:00.050)       0:14:19.140 ****
Wednesday 08 February 2023  21:01:35 +0200 (0:00:00.045)       0:14:19.186 ****
Wednesday 08 February 2023  21:01:35 +0200 (0:00:00.047)       0:14:19.234 ****
Wednesday 08 February 2023  21:01:35 +0200 (0:00:00.049)       0:14:19.284 ****

TASK [network_plugin/calico : Start Calico resources] ******************************************************************************************************
ok: [node1] => (item=calico-config.yml)
ok: [node1] => (item=calico-node.yml)
ok: [node1] => (item=calico-node-sa.yml)
ok: [node1] => (item=calico-cr.yml)
ok: [node1] => (item=calico-crb.yml)
ok: [node1] => (item=kubernetes-services-endpoint.yml)
Wednesday 08 February 2023  21:01:46 +0200 (0:00:11.209)       0:14:30.493 ****
Wednesday 08 February 2023  21:01:46 +0200 (0:00:00.053)       0:14:30.547 ****
Wednesday 08 February 2023  21:01:46 +0200 (0:00:00.044)       0:14:30.592 ****

TASK [network_plugin/calico : Calico | Create Calico ipam manifests] ***************************************************************************************
changed: [node1] => (item={'name': 'calico', 'file': 'calico-ipamconfig.yml', 'type': 'ipam'})
Wednesday 08 February 2023  21:01:50 +0200 (0:00:03.138)       0:14:33.730 ****

TASK [network_plugin/calico : Calico | Create ipamconfig resources] ****************************************************************************************
ok: [node1]
Wednesday 08 February 2023  21:01:52 +0200 (0:00:02.083)       0:14:35.814 ****
Wednesday 08 February 2023  21:01:52 +0200 (0:00:00.051)       0:14:35.865 ****
Wednesday 08 February 2023  21:01:52 +0200 (0:00:00.060)       0:14:35.926 ****
Wednesday 08 February 2023  21:01:52 +0200 (0:00:00.041)       0:14:35.967 ****
Wednesday 08 February 2023  21:01:52 +0200 (0:00:00.057)       0:14:36.025 ****
Wednesday 08 February 2023  21:01:52 +0200 (0:00:00.062)       0:14:36.087 ****
Wednesday 08 February 2023  21:01:52 +0200 (0:00:00.040)       0:14:36.128 ****
Wednesday 08 February 2023  21:01:52 +0200 (0:00:00.054)       0:14:36.183 ****
Wednesday 08 February 2023  21:01:52 +0200 (0:00:00.041)       0:14:36.225 ****
Wednesday 08 February 2023  21:01:52 +0200 (0:00:00.057)       0:14:36.283 ****
Wednesday 08 February 2023  21:01:52 +0200 (0:00:00.040)       0:14:36.323 ****
Wednesday 08 February 2023  21:01:52 +0200 (0:00:00.041)       0:14:36.365 ****
Wednesday 08 February 2023  21:01:52 +0200 (0:00:00.057)       0:14:36.422 ****
Wednesday 08 February 2023  21:01:52 +0200 (0:00:00.044)       0:14:36.466 ****
Wednesday 08 February 2023  21:01:52 +0200 (0:00:00.046)       0:14:36.513 ****
Wednesday 08 February 2023  21:01:52 +0200 (0:00:00.059)       0:14:36.573 ****
Wednesday 08 February 2023  21:01:52 +0200 (0:00:00.044)       0:14:36.617 ****
Wednesday 08 February 2023  21:01:53 +0200 (0:00:00.093)       0:14:36.711 ****
Wednesday 08 February 2023  21:01:53 +0200 (0:00:00.040)       0:14:36.751 ****
Wednesday 08 February 2023  21:01:53 +0200 (0:00:00.058)       0:14:36.810 ****
Wednesday 08 February 2023  21:01:53 +0200 (0:00:00.041)       0:14:36.852 ****
Wednesday 08 February 2023  21:01:53 +0200 (0:00:00.054)       0:14:36.906 ****
Wednesday 08 February 2023  21:01:53 +0200 (0:00:00.040)       0:14:36.946 ****
Wednesday 08 February 2023  21:01:53 +0200 (0:00:00.073)       0:14:37.020 ****
Wednesday 08 February 2023  21:01:53 +0200 (0:00:00.041)       0:14:37.062 ****
Wednesday 08 February 2023  21:01:53 +0200 (0:00:00.041)       0:14:37.103 ****
Wednesday 08 February 2023  21:01:53 +0200 (0:00:00.042)       0:14:37.145 ****
Wednesday 08 February 2023  21:01:53 +0200 (0:00:00.041)       0:14:37.187 ****
Wednesday 08 February 2023  21:01:53 +0200 (0:00:00.040)       0:14:37.227 ****
Wednesday 08 February 2023  21:01:53 +0200 (0:00:00.069)       0:14:37.297 ****
Wednesday 08 February 2023  21:01:53 +0200 (0:00:00.040)       0:14:37.338 ****
Wednesday 08 February 2023  21:01:53 +0200 (0:00:00.052)       0:14:37.391 ****
Wednesday 08 February 2023  21:01:53 +0200 (0:00:00.042)       0:14:37.433 ****
Wednesday 08 February 2023  21:01:53 +0200 (0:00:00.047)       0:14:37.481 ****
Wednesday 08 February 2023  21:01:53 +0200 (0:00:00.053)       0:14:37.534 ****
Wednesday 08 February 2023  21:01:54 +0200 (0:00:00.114)       0:14:37.649 ****
Wednesday 08 February 2023  21:01:54 +0200 (0:00:00.041)       0:14:37.690 ****
Wednesday 08 February 2023  21:01:54 +0200 (0:00:00.054)       0:14:37.745 ****
Wednesday 08 February 2023  21:01:54 +0200 (0:00:00.040)       0:14:37.786 ****
Wednesday 08 February 2023  21:01:54 +0200 (0:00:00.067)       0:14:37.853 ****
Wednesday 08 February 2023  21:01:54 +0200 (0:00:00.044)       0:14:37.897 ****
Wednesday 08 February 2023  21:01:54 +0200 (0:00:00.057)       0:14:37.955 ****
Wednesday 08 February 2023  21:01:54 +0200 (0:00:00.040)       0:14:37.995 ****
Wednesday 08 February 2023  21:01:54 +0200 (0:00:00.041)       0:14:38.036 ****
Wednesday 08 February 2023  21:01:54 +0200 (0:00:00.038)       0:14:38.075 ****
Wednesday 08 February 2023  21:01:54 +0200 (0:00:00.041)       0:14:38.117 ****
Wednesday 08 February 2023  21:01:54 +0200 (0:00:00.044)       0:14:38.161 ****
Wednesday 08 February 2023  21:01:54 +0200 (0:00:00.041)       0:14:38.203 ****
Wednesday 08 February 2023  21:01:54 +0200 (0:00:00.040)       0:14:38.244 ****
Wednesday 08 February 2023  21:01:54 +0200 (0:00:00.041)       0:14:38.285 ****
Wednesday 08 February 2023  21:01:54 +0200 (0:00:00.040)       0:14:38.326 ****
Wednesday 08 February 2023  21:01:54 +0200 (0:00:00.060)       0:14:38.387 ****
Wednesday 08 February 2023  21:01:54 +0200 (0:00:00.059)       0:14:38.446 ****
Wednesday 08 February 2023  21:01:54 +0200 (0:00:00.040)       0:14:38.487 ****
Wednesday 08 February 2023  21:01:54 +0200 (0:00:00.054)       0:14:38.542 ****
Wednesday 08 February 2023  21:01:54 +0200 (0:00:00.054)       0:14:38.597 ****
Wednesday 08 February 2023  21:01:55 +0200 (0:00:00.075)       0:14:38.672 ****

PLAY [calico_rr] *******************************************************************************************************************************************
skipping: no hosts matched

PLAY [kube_control_plane[0]] *******************************************************************************************************************************
Wednesday 08 February 2023  21:01:55 +0200 (0:00:00.102)       0:14:38.774 ****
Wednesday 08 February 2023  21:01:55 +0200 (0:00:00.050)       0:14:38.824 ****
Wednesday 08 February 2023  21:01:55 +0200 (0:00:00.050)       0:14:38.875 ****
Wednesday 08 February 2023  21:01:55 +0200 (0:00:00.046)       0:14:38.922 ****
Wednesday 08 February 2023  21:01:55 +0200 (0:00:00.044)       0:14:38.966 ****
Wednesday 08 February 2023  21:01:55 +0200 (0:00:00.045)       0:14:39.011 ****
Wednesday 08 February 2023  21:01:55 +0200 (0:00:00.045)       0:14:39.057 ****
Wednesday 08 February 2023  21:01:55 +0200 (0:00:00.051)       0:14:39.108 ****
Wednesday 08 February 2023  21:01:55 +0200 (0:00:00.044)       0:14:39.154 ****
Wednesday 08 February 2023  21:01:55 +0200 (0:00:00.044)       0:14:39.198 ****
Wednesday 08 February 2023  21:01:56 +0200 (0:00:00.901)       0:14:40.099 ****

TASK [kubespray-defaults : Configure defaults] *************************************************************************************************************
ok: [node1] => {
    "msg": "Check roles/kubespray-defaults/defaults/main.yml"
}
Wednesday 08 February 2023  21:01:56 +0200 (0:00:00.056)       0:14:40.156 ****
Wednesday 08 February 2023  21:01:56 +0200 (0:00:00.061)       0:14:40.217 ****
Wednesday 08 February 2023  21:01:56 +0200 (0:00:00.044)       0:14:40.262 ****
Wednesday 08 February 2023  21:01:56 +0200 (0:00:00.048)       0:14:40.310 ****
Wednesday 08 February 2023  21:01:56 +0200 (0:00:00.043)       0:14:40.354 ****
Wednesday 08 February 2023  21:01:56 +0200 (0:00:00.046)       0:14:40.401 ****
Wednesday 08 February 2023  21:01:56 +0200 (0:00:00.054)       0:14:40.456 ****

TASK [win_nodes/kubernetes_patch : Ensure that user manifests directory exists] ****************************************************************************
changed: [node1]
Wednesday 08 February 2023  21:01:58 +0200 (0:00:01.391)       0:14:41.847 ****

TASK [win_nodes/kubernetes_patch : Check current nodeselector for kube-proxy daemonset] ********************************************************************
ok: [node1]
Wednesday 08 February 2023  21:01:59 +0200 (0:00:01.592)       0:14:43.440 ****

TASK [win_nodes/kubernetes_patch : Apply nodeselector patch for kube-proxy daemonset] **********************************************************************
changed: [node1]
Wednesday 08 February 2023  21:02:01 +0200 (0:00:01.690)       0:14:45.131 ****

TASK [win_nodes/kubernetes_patch : debug] ******************************************************************************************************************
ok: [node1] => {
    "msg": [
        "daemonset.apps/kube-proxy patched (no change)"
    ]
}
Wednesday 08 February 2023  21:02:01 +0200 (0:00:00.069)       0:14:45.200 ****

TASK [win_nodes/kubernetes_patch : debug] ******************************************************************************************************************
ok: [node1] => {
    "msg": []
}

PLAY [kube_control_plane] **********************************************************************************************************************************
Wednesday 08 February 2023  21:02:01 +0200 (0:00:00.229)       0:14:45.429 ****
Wednesday 08 February 2023  21:02:01 +0200 (0:00:00.051)       0:14:45.480 ****
Wednesday 08 February 2023  21:02:01 +0200 (0:00:00.060)       0:14:45.541 ****
Wednesday 08 February 2023  21:02:01 +0200 (0:00:00.049)       0:14:45.591 ****
Wednesday 08 February 2023  21:02:02 +0200 (0:00:00.045)       0:14:45.636 ****
Wednesday 08 February 2023  21:02:02 +0200 (0:00:00.047)       0:14:45.684 ****
Wednesday 08 February 2023  21:02:02 +0200 (0:00:00.047)       0:14:45.731 ****
Wednesday 08 February 2023  21:02:02 +0200 (0:00:00.053)       0:14:45.785 ****
Wednesday 08 February 2023  21:02:02 +0200 (0:00:00.057)       0:14:45.843 ****
Wednesday 08 February 2023  21:02:02 +0200 (0:00:00.046)       0:14:45.890 ****
Wednesday 08 February 2023  21:02:03 +0200 (0:00:00.891)       0:14:46.781 ****

TASK [kubespray-defaults : Configure defaults] *************************************************************************************************************
ok: [node1] => {
    "msg": "Check roles/kubespray-defaults/defaults/main.yml"
}
Wednesday 08 February 2023  21:02:03 +0200 (0:00:00.060)       0:14:46.841 ****
Wednesday 08 February 2023  21:02:03 +0200 (0:00:00.069)       0:14:46.911 ****
Wednesday 08 February 2023  21:02:03 +0200 (0:00:00.045)       0:14:46.957 ****
Wednesday 08 February 2023  21:02:03 +0200 (0:00:00.051)       0:14:47.009 ****
Wednesday 08 February 2023  21:02:03 +0200 (0:00:00.046)       0:14:47.055 ****
Wednesday 08 February 2023  21:02:03 +0200 (0:00:00.047)       0:14:47.103 ****
Wednesday 08 February 2023  21:02:03 +0200 (0:00:00.058)       0:14:47.161 ****
Wednesday 08 February 2023  21:02:03 +0200 (0:00:00.046)       0:14:47.207 ****
Wednesday 08 February 2023  21:02:03 +0200 (0:00:00.044)       0:14:47.252 ****
Wednesday 08 February 2023  21:02:03 +0200 (0:00:00.044)       0:14:47.296 ****
Wednesday 08 February 2023  21:02:03 +0200 (0:00:00.061)       0:14:47.358 ****
Wednesday 08 February 2023  21:02:03 +0200 (0:00:00.077)       0:14:47.435 ****
Wednesday 08 February 2023  21:02:03 +0200 (0:00:00.045)       0:14:47.480 ****
Wednesday 08 February 2023  21:02:03 +0200 (0:00:00.045)       0:14:47.526 ****
Wednesday 08 February 2023  21:02:03 +0200 (0:00:00.059)       0:14:47.586 ****
Wednesday 08 February 2023  21:02:03 +0200 (0:00:00.045)       0:14:47.631 ****
Wednesday 08 February 2023  21:02:04 +0200 (0:00:00.044)       0:14:47.675 ****
Wednesday 08 February 2023  21:02:04 +0200 (0:00:00.078)       0:14:47.753 ****
Wednesday 08 February 2023  21:02:04 +0200 (0:00:00.047)       0:14:47.801 ****
Wednesday 08 February 2023  21:02:04 +0200 (0:00:00.089)       0:14:47.891 ****
Wednesday 08 February 2023  21:02:04 +0200 (0:00:00.111)       0:14:48.002 ****
Wednesday 08 February 2023  21:02:04 +0200 (0:00:00.063)       0:14:48.065 ****
Wednesday 08 February 2023  21:02:04 +0200 (0:00:00.057)       0:14:48.122 ****
Wednesday 08 February 2023  21:02:04 +0200 (0:00:00.071)       0:14:48.194 ****
Wednesday 08 February 2023  21:02:04 +0200 (0:00:00.042)       0:14:48.236 ****
Wednesday 08 February 2023  21:02:04 +0200 (0:00:00.077)       0:14:48.314 ****
Wednesday 08 February 2023  21:02:04 +0200 (0:00:00.065)       0:14:48.379 ****
Wednesday 08 February 2023  21:02:04 +0200 (0:00:00.062)       0:14:48.441 ****
Wednesday 08 February 2023  21:02:04 +0200 (0:00:00.095)       0:14:48.536 ****
Wednesday 08 February 2023  21:02:04 +0200 (0:00:00.049)       0:14:48.586 ****

TASK [policy_controller/calico : Create calico-kube-controllers manifests] *********************************************************************************
changed: [node1] => (item={'name': 'calico-kube-controllers', 'file': 'calico-kube-controllers.yml', 'type': 'deployment'})
changed: [node1] => (item={'name': 'calico-kube-controllers', 'file': 'calico-kube-sa.yml', 'type': 'sa'})
changed: [node1] => (item={'name': 'calico-kube-controllers', 'file': 'calico-kube-cr.yml', 'type': 'clusterrole'})
changed: [node1] => (item={'name': 'calico-kube-controllers', 'file': 'calico-kube-crb.yml', 'type': 'clusterrolebinding'})
Wednesday 08 February 2023  21:02:16 +0200 (0:00:11.231)       0:14:59.818 ****

TASK [policy_controller/calico : Start of Calico kube controllers] *****************************************************************************************
ok: [node1] => (item=calico-kube-controllers.yml)
ok: [node1] => (item=calico-kube-sa.yml)
ok: [node1] => (item=calico-kube-cr.yml)
ok: [node1] => (item=calico-kube-crb.yml)
Wednesday 08 February 2023  21:02:24 +0200 (0:00:08.504)       0:15:08.322 ****
Wednesday 08 February 2023  21:02:24 +0200 (0:00:00.045)       0:15:08.368 ****
Wednesday 08 February 2023  21:02:24 +0200 (0:00:00.043)       0:15:08.411 ****
Wednesday 08 February 2023  21:02:24 +0200 (0:00:00.040)       0:15:08.452 ****
Wednesday 08 February 2023  21:02:24 +0200 (0:00:00.043)       0:15:08.495 ****
Wednesday 08 February 2023  21:02:24 +0200 (0:00:00.044)       0:15:08.539 ****
Wednesday 08 February 2023  21:02:24 +0200 (0:00:00.063)       0:15:08.603 ****
Wednesday 08 February 2023  21:02:25 +0200 (0:00:00.043)       0:15:08.647 ****
Wednesday 08 February 2023  21:02:25 +0200 (0:00:00.042)       0:15:08.689 ****
Wednesday 08 February 2023  21:02:25 +0200 (0:00:00.042)       0:15:08.731 ****
Wednesday 08 February 2023  21:02:25 +0200 (0:00:00.042)       0:15:08.773 ****
Wednesday 08 February 2023  21:02:25 +0200 (0:00:00.044)       0:15:08.817 ****
Wednesday 08 February 2023  21:02:25 +0200 (0:00:00.062)       0:15:08.880 ****
Wednesday 08 February 2023  21:02:25 +0200 (0:00:00.043)       0:15:08.923 ****
Wednesday 08 February 2023  21:02:25 +0200 (0:00:00.062)       0:15:08.985 ****
Wednesday 08 February 2023  21:02:25 +0200 (0:00:00.092)       0:15:09.078 ****
Wednesday 08 February 2023  21:02:25 +0200 (0:00:00.053)       0:15:09.132 ****
Wednesday 08 February 2023  21:02:25 +0200 (0:00:00.046)       0:15:09.178 ****
Wednesday 08 February 2023  21:02:25 +0200 (0:00:00.043)       0:15:09.222 ****
Wednesday 08 February 2023  21:02:25 +0200 (0:00:00.041)       0:15:09.264 ****
Wednesday 08 February 2023  21:02:25 +0200 (0:00:00.045)       0:15:09.310 ****
Wednesday 08 February 2023  21:02:25 +0200 (0:00:00.059)       0:15:09.369 ****
Wednesday 08 February 2023  21:02:25 +0200 (0:00:00.041)       0:15:09.411 ****
Wednesday 08 February 2023  21:02:25 +0200 (0:00:00.046)       0:15:09.457 ****
Wednesday 08 February 2023  21:02:25 +0200 (0:00:00.042)       0:15:09.500 ****
Wednesday 08 February 2023  21:02:25 +0200 (0:00:00.044)       0:15:09.544 ****
Wednesday 08 February 2023  21:02:25 +0200 (0:00:00.043)       0:15:09.588 ****
Wednesday 08 February 2023  21:02:26 +0200 (0:00:00.043)       0:15:09.632 ****
Wednesday 08 February 2023  21:02:26 +0200 (0:00:00.047)       0:15:09.679 ****
Wednesday 08 February 2023  21:02:26 +0200 (0:00:00.063)       0:15:09.743 ****
Wednesday 08 February 2023  21:02:26 +0200 (0:00:00.045)       0:15:09.789 ****
Wednesday 08 February 2023  21:02:26 +0200 (0:00:00.047)       0:15:09.836 ****
Wednesday 08 February 2023  21:02:26 +0200 (0:00:00.043)       0:15:09.880 ****
Wednesday 08 February 2023  21:02:26 +0200 (0:00:00.041)       0:15:09.921 ****
Wednesday 08 February 2023  21:02:26 +0200 (0:00:00.043)       0:15:09.964 ****
Wednesday 08 February 2023  21:02:26 +0200 (0:00:00.045)       0:15:10.010 ****
Wednesday 08 February 2023  21:02:26 +0200 (0:00:00.044)       0:15:10.054 ****
Wednesday 08 February 2023  21:02:26 +0200 (0:00:00.059)       0:15:10.114 ****
Wednesday 08 February 2023  21:02:26 +0200 (0:00:00.042)       0:15:10.157 ****
Wednesday 08 February 2023  21:02:26 +0200 (0:00:00.042)       0:15:10.200 ****
Wednesday 08 February 2023  21:02:26 +0200 (0:00:00.041)       0:15:10.242 ****
Wednesday 08 February 2023  21:02:26 +0200 (0:00:00.046)       0:15:10.288 ****
Wednesday 08 February 2023  21:02:26 +0200 (0:00:00.047)       0:15:10.336 ****
Wednesday 08 February 2023  21:02:26 +0200 (0:00:00.073)       0:15:10.409 ****

TASK [kubernetes-apps/ansible : Kubernetes Apps | Wait for kube-apiserver] *********************************************************************************
ok: [node1]
Wednesday 08 February 2023  21:02:28 +0200 (0:00:01.841)       0:15:12.251 ****

TASK [kubernetes-apps/ansible : Kubernetes Apps | Register coredns deployment annotation `createdby`] ******************************************************
fatal: [node1]: FAILED! => {"changed": false, "cmd": ["/usr/local/bin/kubectl", "--kubeconfig", "/etc/kubernetes/admin.conf", "get", "deploy", "-n", "kube-system", "coredns", "-o", "jsonpath={ .spec.template.metadata.annotations.createdby }"], "delta": "0:00:00.094404", "end": "2023-02-08 19:02:30.058570", "msg": "non-zero return code", "rc": 1, "start": "2023-02-08 19:02:29.964166", "stderr": "Error from server (NotFound): deployments.apps \"coredns\" not found", "stderr_lines": ["Error from server (NotFound): deployments.apps \"coredns\" not found"], "stdout": "", "stdout_lines": []}
...ignoring
Wednesday 08 February 2023  21:02:30 +0200 (0:00:01.558)       0:15:13.810 ****

TASK [kubernetes-apps/ansible : Kubernetes Apps | Register coredns service annotation `createdby`] *********************************************************
fatal: [node1]: FAILED! => {"changed": false, "cmd": ["/usr/local/bin/kubectl", "--kubeconfig", "/etc/kubernetes/admin.conf", "get", "svc", "-n", "kube-system", "coredns", "-o", "jsonpath={ .metadata.annotations.createdby }"], "delta": "0:00:00.086914", "end": "2023-02-08 19:02:31.972032", "msg": "non-zero return code", "rc": 1, "start": "2023-02-08 19:02:31.885118", "stderr": "Error from server (NotFound): services \"coredns\" not found", "stderr_lines": ["Error from server (NotFound): services \"coredns\" not found"], "stdout": "", "stdout_lines": []}
...ignoring
Wednesday 08 February 2023  21:02:32 +0200 (0:00:01.946)       0:15:15.756 ****

TASK [kubernetes-apps/ansible : Kubernetes Apps | Delete kubeadm CoreDNS] **********************************************************************************
ok: [node1]
Wednesday 08 February 2023  21:02:33 +0200 (0:00:01.698)       0:15:17.455 ****

TASK [kubernetes-apps/ansible : Kubernetes Apps | Delete kubeadm Kube-DNS service] *************************************************************************
ok: [node1]
Wednesday 08 February 2023  21:02:35 +0200 (0:00:01.572)       0:15:19.027 ****

TASK [kubernetes-apps/ansible : Kubernetes Apps | Lay Down CoreDNS templates] ******************************************************************************
changed: [node1] => (item={'name': 'coredns', 'file': 'coredns-clusterrole.yml', 'type': 'clusterrole'})
changed: [node1] => (item={'name': 'coredns', 'file': 'coredns-clusterrolebinding.yml', 'type': 'clusterrolebinding'})
changed: [node1] => (item={'name': 'coredns', 'file': 'coredns-config.yml', 'type': 'configmap'})
changed: [node1] => (item={'name': 'coredns', 'file': 'coredns-deployment.yml', 'type': 'deployment'})
changed: [node1] => (item={'name': 'coredns', 'file': 'coredns-sa.yml', 'type': 'sa'})
changed: [node1] => (item={'name': 'coredns', 'file': 'coredns-svc.yml', 'type': 'svc'})
changed: [node1] => (item={'name': 'dns-autoscaler', 'file': 'dns-autoscaler.yml', 'type': 'deployment'})
changed: [node1] => (item={'name': 'dns-autoscaler', 'file': 'dns-autoscaler-clusterrole.yml', 'type': 'clusterrole'})
changed: [node1] => (item={'name': 'dns-autoscaler', 'file': 'dns-autoscaler-clusterrolebinding.yml', 'type': 'clusterrolebinding'})
changed: [node1] => (item={'name': 'dns-autoscaler', 'file': 'dns-autoscaler-sa.yml', 'type': 'sa'})
Wednesday 08 February 2023  21:03:06 +0200 (0:00:31.562)       0:15:50.590 ****
Wednesday 08 February 2023  21:03:07 +0200 (0:00:00.089)       0:15:50.679 ****

TASK [kubernetes-apps/ansible : Kubernetes Apps | set up necessary nodelocaldns parameters] ****************************************************************
ok: [node1]
Wednesday 08 February 2023  21:03:07 +0200 (0:00:00.140)       0:15:50.820 ****

TASK [kubernetes-apps/ansible : Kubernetes Apps | Lay Down nodelocaldns Template] **************************************************************************
changed: [node1] => (item={'name': 'nodelocaldns', 'file': 'nodelocaldns-config.yml', 'type': 'configmap'})
changed: [node1] => (item={'name': 'nodelocaldns', 'file': 'nodelocaldns-sa.yml', 'type': 'sa'})
changed: [node1] => (item={'name': 'nodelocaldns', 'file': 'nodelocaldns-daemonset.yml', 'type': 'daemonset'})
Wednesday 08 February 2023  21:03:16 +0200 (0:00:08.891)       0:15:59.711 ****
Wednesday 08 February 2023  21:03:16 +0200 (0:00:00.067)       0:15:59.779 ****

TASK [kubernetes-apps/ansible : Kubernetes Apps | Start Resources] *****************************************************************************************
ok: [node1] => (item=coredns-clusterrole.yml)
ok: [node1] => (item=coredns-clusterrolebinding.yml)
ok: [node1] => (item=coredns-config.yml)
ok: [node1] => (item=coredns-deployment.yml)
ok: [node1] => (item=coredns-sa.yml)
ok: [node1] => (item=coredns-svc.yml)
ok: [node1] => (item=dns-autoscaler.yml)
ok: [node1] => (item=dns-autoscaler-clusterrole.yml)
ok: [node1] => (item=dns-autoscaler-clusterrolebinding.yml)
ok: [node1] => (item=dns-autoscaler-sa.yml)
ok: [node1] => (item=nodelocaldns-config.yml)
ok: [node1] => (item=nodelocaldns-sa.yml)
ok: [node1] => (item=nodelocaldns-daemonset.yml)
Wednesday 08 February 2023  21:03:39 +0200 (0:00:23.016)       0:16:22.796 ****
Wednesday 08 February 2023  21:03:39 +0200 (0:00:00.060)       0:16:22.857 ****
Wednesday 08 February 2023  21:03:39 +0200 (0:00:00.060)       0:16:22.917 ****
Wednesday 08 February 2023  21:03:39 +0200 (0:00:00.045)       0:16:22.962 ****
Wednesday 08 February 2023  21:03:39 +0200 (0:00:00.046)       0:16:23.008 ****
Wednesday 08 February 2023  21:03:39 +0200 (0:00:00.046)       0:16:23.055 ****
Wednesday 08 February 2023  21:03:39 +0200 (0:00:00.046)       0:16:23.101 ****
Wednesday 08 February 2023  21:03:39 +0200 (0:00:00.048)       0:16:23.150 ****
Wednesday 08 February 2023  21:03:39 +0200 (0:00:00.048)       0:16:23.198 ****
Wednesday 08 February 2023  21:03:39 +0200 (0:00:00.050)       0:16:23.248 ****
Wednesday 08 February 2023  21:03:39 +0200 (0:00:00.066)       0:16:23.315 ****
Wednesday 08 February 2023  21:03:39 +0200 (0:00:00.059)       0:16:23.374 ****
Wednesday 08 February 2023  21:03:39 +0200 (0:00:00.045)       0:16:23.420 ****
Wednesday 08 February 2023  21:03:39 +0200 (0:00:00.041)       0:16:23.462 ****
Wednesday 08 February 2023  21:03:39 +0200 (0:00:00.056)       0:16:23.519 ****
Wednesday 08 February 2023  21:03:39 +0200 (0:00:00.043)       0:16:23.562 ****
Wednesday 08 February 2023  21:03:39 +0200 (0:00:00.042)       0:16:23.604 ****
Wednesday 08 February 2023  21:03:40 +0200 (0:00:00.041)       0:16:23.645 ****
Wednesday 08 February 2023  21:03:40 +0200 (0:00:00.044)       0:16:23.690 ****
Wednesday 08 February 2023  21:03:40 +0200 (0:00:00.043)       0:16:23.734 ****
Wednesday 08 February 2023  21:03:40 +0200 (0:00:00.049)       0:16:23.784 ****
Wednesday 08 February 2023  21:03:40 +0200 (0:00:00.049)       0:16:23.833 ****
Wednesday 08 February 2023  21:03:40 +0200 (0:00:00.049)       0:16:23.883 ****
Wednesday 08 February 2023  21:03:40 +0200 (0:00:00.048)       0:16:23.931 ****
Wednesday 08 February 2023  21:03:40 +0200 (0:00:00.052)       0:16:23.984 ****
Wednesday 08 February 2023  21:03:40 +0200 (0:00:00.049)       0:16:24.034 ****
Wednesday 08 February 2023  21:03:40 +0200 (0:00:00.057)       0:16:24.091 ****
Wednesday 08 February 2023  21:03:40 +0200 (0:00:00.043)       0:16:24.134 ****
Wednesday 08 February 2023  21:03:40 +0200 (0:00:00.041)       0:16:24.176 ****
Wednesday 08 February 2023  21:03:40 +0200 (0:00:00.044)       0:16:24.220 ****
Wednesday 08 February 2023  21:03:40 +0200 (0:00:00.042)       0:16:24.263 ****
Wednesday 08 February 2023  21:03:40 +0200 (0:00:00.042)       0:16:24.306 ****
Wednesday 08 February 2023  21:03:40 +0200 (0:00:00.044)       0:16:24.350 ****
Wednesday 08 February 2023  21:03:40 +0200 (0:00:00.041)       0:16:24.392 ****
Wednesday 08 February 2023  21:03:40 +0200 (0:00:00.046)       0:16:24.438 ****
Wednesday 08 February 2023  21:03:40 +0200 (0:00:00.044)       0:16:24.482 ****
Wednesday 08 February 2023  21:03:40 +0200 (0:00:00.046)       0:16:24.529 ****
Wednesday 08 February 2023  21:03:40 +0200 (0:00:00.046)       0:16:24.575 ****
Wednesday 08 February 2023  21:03:41 +0200 (0:00:00.062)       0:16:24.638 ****
Wednesday 08 February 2023  21:03:41 +0200 (0:00:00.041)       0:16:24.680 ****
Wednesday 08 February 2023  21:03:41 +0200 (0:00:00.042)       0:16:24.722 ****
Wednesday 08 February 2023  21:03:41 +0200 (0:00:00.045)       0:16:24.768 ****
Wednesday 08 February 2023  21:03:41 +0200 (0:00:00.044)       0:16:24.812 ****
Wednesday 08 February 2023  21:03:41 +0200 (0:00:00.043)       0:16:24.855 ****
Wednesday 08 February 2023  21:03:41 +0200 (0:00:00.059)       0:16:24.915 ****
Wednesday 08 February 2023  21:03:41 +0200 (0:00:00.055)       0:16:24.970 ****
Wednesday 08 February 2023  21:03:41 +0200 (0:00:00.073)       0:16:25.043 ****
Wednesday 08 February 2023  21:03:41 +0200 (0:00:00.041)       0:16:25.085 ****
Wednesday 08 February 2023  21:03:41 +0200 (0:00:00.046)       0:16:25.131 ****
Wednesday 08 February 2023  21:03:41 +0200 (0:00:00.043)       0:16:25.174 ****
Wednesday 08 February 2023  21:03:41 +0200 (0:00:00.043)       0:16:25.218 ****
Wednesday 08 February 2023  21:03:41 +0200 (0:00:00.069)       0:16:25.287 ****
Wednesday 08 February 2023  21:03:41 +0200 (0:00:00.155)       0:16:25.442 ****
Wednesday 08 February 2023  21:03:41 +0200 (0:00:00.057)       0:16:25.500 ****
Wednesday 08 February 2023  21:03:41 +0200 (0:00:00.073)       0:16:25.574 ****
Wednesday 08 February 2023  21:03:41 +0200 (0:00:00.042)       0:16:25.616 ****
Wednesday 08 February 2023  21:03:42 +0200 (0:00:00.042)       0:16:25.659 ****
Wednesday 08 February 2023  21:03:42 +0200 (0:00:00.042)       0:16:25.701 ****
Wednesday 08 February 2023  21:03:42 +0200 (0:00:00.070)       0:16:25.772 ****
Wednesday 08 February 2023  21:03:42 +0200 (0:00:00.080)       0:16:25.853 ****
Wednesday 08 February 2023  21:03:42 +0200 (0:00:00.043)       0:16:25.896 ****
Wednesday 08 February 2023  21:03:42 +0200 (0:00:00.043)       0:16:25.939 ****
Wednesday 08 February 2023  21:03:42 +0200 (0:00:00.042)       0:16:25.982 ****
Wednesday 08 February 2023  21:03:42 +0200 (0:00:00.061)       0:16:26.044 ****
Wednesday 08 February 2023  21:03:42 +0200 (0:00:00.075)       0:16:26.119 ****
Wednesday 08 February 2023  21:03:42 +0200 (0:00:00.041)       0:16:26.161 ****
Wednesday 08 February 2023  21:03:42 +0200 (0:00:00.043)       0:16:26.204 ****
Wednesday 08 February 2023  21:03:42 +0200 (0:00:00.060)       0:16:26.265 ****
Wednesday 08 February 2023  21:03:42 +0200 (0:00:00.079)       0:16:26.345 ****
Wednesday 08 February 2023  21:03:42 +0200 (0:00:00.041)       0:16:26.387 ****
Wednesday 08 February 2023  21:03:42 +0200 (0:00:00.045)       0:16:26.432 ****
Wednesday 08 February 2023  21:03:42 +0200 (0:00:00.070)       0:16:26.503 ****
Wednesday 08 February 2023  21:03:42 +0200 (0:00:00.048)       0:16:26.551 ****
Wednesday 08 February 2023  21:03:42 +0200 (0:00:00.049)       0:16:26.601 ****
Wednesday 08 February 2023  21:03:43 +0200 (0:00:00.086)       0:16:26.688 ****
Wednesday 08 February 2023  21:03:43 +0200 (0:00:00.042)       0:16:26.730 ****
Wednesday 08 February 2023  21:03:43 +0200 (0:00:00.057)       0:16:26.788 ****
Wednesday 08 February 2023  21:03:43 +0200 (0:00:00.043)       0:16:26.831 ****
Wednesday 08 February 2023  21:03:43 +0200 (0:00:00.059)       0:16:26.891 ****
Wednesday 08 February 2023  21:03:43 +0200 (0:00:00.044)       0:16:26.935 ****
Wednesday 08 February 2023  21:03:43 +0200 (0:00:00.059)       0:16:26.994 ****
Wednesday 08 February 2023  21:03:43 +0200 (0:00:00.044)       0:16:27.039 ****
Wednesday 08 February 2023  21:03:43 +0200 (0:00:00.065)       0:16:27.104 ****
Wednesday 08 February 2023  21:03:43 +0200 (0:00:00.043)       0:16:27.148 ****
Wednesday 08 February 2023  21:03:43 +0200 (0:00:00.057)       0:16:27.206 ****
Wednesday 08 February 2023  21:03:43 +0200 (0:00:00.043)       0:16:27.249 ****
Wednesday 08 February 2023  21:03:43 +0200 (0:00:00.075)       0:16:27.324 ****
Wednesday 08 February 2023  21:03:43 +0200 (0:00:00.049)       0:16:27.373 ****
Wednesday 08 February 2023  21:03:43 +0200 (0:00:00.062)       0:16:27.436 ****
Wednesday 08 February 2023  21:03:43 +0200 (0:00:00.080)       0:16:27.516 ****
Wednesday 08 February 2023  21:03:43 +0200 (0:00:00.045)       0:16:27.562 ****
Wednesday 08 February 2023  21:03:44 +0200 (0:00:00.078)       0:16:27.641 ****
Wednesday 08 February 2023  21:03:44 +0200 (0:00:00.044)       0:16:27.685 ****
Wednesday 08 February 2023  21:03:44 +0200 (0:00:00.044)       0:16:27.730 ****
Wednesday 08 February 2023  21:03:44 +0200 (0:00:00.048)       0:16:27.778 ****
Wednesday 08 February 2023  21:03:44 +0200 (0:00:00.060)       0:16:27.839 ****
Wednesday 08 February 2023  21:03:44 +0200 (0:00:00.044)       0:16:27.884 ****
Wednesday 08 February 2023  21:03:44 +0200 (0:00:00.048)       0:16:27.932 ****
Wednesday 08 February 2023  21:03:44 +0200 (0:00:00.046)       0:16:27.979 ****
Wednesday 08 February 2023  21:03:44 +0200 (0:00:00.060)       0:16:28.039 ****
Wednesday 08 February 2023  21:03:44 +0200 (0:00:00.045)       0:16:28.084 ****
Wednesday 08 February 2023  21:03:44 +0200 (0:00:00.059)       0:16:28.144 ****
Wednesday 08 February 2023  21:03:44 +0200 (0:00:00.048)       0:16:28.193 ****
Wednesday 08 February 2023  21:03:44 +0200 (0:00:00.075)       0:16:28.268 ****
Wednesday 08 February 2023  21:03:44 +0200 (0:00:00.056)       0:16:28.325 ****
Wednesday 08 February 2023  21:03:44 +0200 (0:00:00.041)       0:16:28.366 ****
Wednesday 08 February 2023  21:03:44 +0200 (0:00:00.043)       0:16:28.409 ****
Wednesday 08 February 2023  21:03:44 +0200 (0:00:00.045)       0:16:28.455 ****
Wednesday 08 February 2023  21:03:44 +0200 (0:00:00.052)       0:16:28.508 ****
Wednesday 08 February 2023  21:03:44 +0200 (0:00:00.083)       0:16:28.592 ****
Wednesday 08 February 2023  21:03:45 +0200 (0:00:00.043)       0:16:28.635 ****
Wednesday 08 February 2023  21:03:45 +0200 (0:00:00.044)       0:16:28.680 ****
Wednesday 08 February 2023  21:03:45 +0200 (0:00:00.045)       0:16:28.725 ****
Wednesday 08 February 2023  21:03:45 +0200 (0:00:00.045)       0:16:28.771 ****
Wednesday 08 February 2023  21:03:45 +0200 (0:00:00.045)       0:16:28.817 ****
Wednesday 08 February 2023  21:03:45 +0200 (0:00:00.045)       0:16:28.862 ****
Wednesday 08 February 2023  21:03:45 +0200 (0:00:00.044)       0:16:28.906 ****
Wednesday 08 February 2023  21:03:45 +0200 (0:00:00.045)       0:16:28.951 ****
Wednesday 08 February 2023  21:03:45 +0200 (0:00:00.047)       0:16:28.999 ****
Wednesday 08 February 2023  21:03:45 +0200 (0:00:00.043)       0:16:29.042 ****
Wednesday 08 February 2023  21:03:45 +0200 (0:00:00.045)       0:16:29.088 ****
Wednesday 08 February 2023  21:03:45 +0200 (0:00:00.044)       0:16:29.132 ****
Wednesday 08 February 2023  21:03:45 +0200 (0:00:00.043)       0:16:29.176 ****
Wednesday 08 February 2023  21:03:45 +0200 (0:00:00.042)       0:16:29.219 ****
Wednesday 08 February 2023  21:03:45 +0200 (0:00:00.061)       0:16:29.281 ****
Wednesday 08 February 2023  21:03:45 +0200 (0:00:00.052)       0:16:29.333 ****
Wednesday 08 February 2023  21:03:45 +0200 (0:00:00.052)       0:16:29.386 ****
Wednesday 08 February 2023  21:03:45 +0200 (0:00:00.050)       0:16:29.436 ****
Wednesday 08 February 2023  21:03:45 +0200 (0:00:00.052)       0:16:29.489 ****
Wednesday 08 February 2023  21:03:45 +0200 (0:00:00.053)       0:16:29.542 ****
Wednesday 08 February 2023  21:03:45 +0200 (0:00:00.051)       0:16:29.594 ****

TASK [kubernetes-apps/metallb : Kubernetes Apps | Lay Down MetalLB] ****************************************************************************************
changed: [node1] => (item=metallb.yml)
changed: [node1] => (item=metallb-config.yml)
Wednesday 08 February 2023  21:03:51 +0200 (0:00:05.984)       0:16:35.579 ****

TASK [kubernetes-apps/metallb : Kubernetes Apps | Install and configure MetalLB] ***************************************************************************
ok: [node1] => (item={'diff': [], 'dest': '/etc/kubernetes/metallb.yml', 'src': '/home/serhieiev/.ansible/tmp/ansible-tmp-1675883026.127815-26309-148042067900675/source', 'md5sum': 'b7a35acb867a0804fd1a3aa7d3cf446a', 'checksum': '1590e0ad827f011241455aa2b3e3beb6dc52bbcf', 'changed': True, 'uid': 0, 'gid': 0, 'owner': 'root', 'group': 'root', 'mode': '0644', 'state': 'file', 'size': 9608, 'invocation': {'module_args': {'src': '/home/serhieiev/.ansible/tmp/ansible-tmp-1675883026.127815-26309-148042067900675/source', 'dest': '/etc/kubernetes/metallb.yml', 'mode': 420, 'follow': False, '_original_basename': 'metallb.yml.j2', 'checksum': '1590e0ad827f011241455aa2b3e3beb6dc52bbcf', 'backup': False, 'force': True, 'unsafe_writes': False, 'content': None, 'validate': None, 'directory_mode': None, 'remote_src': None, 'local_follow': None, 'owner': None, 'group': None, 'seuser': None, 'serole': None, 'selevel': None, 'setype': None, 'attributes': None}}, 'failed': False, 'item': 'metallb.yml', 'ansible_loop_var': 'item'})
ok: [node1] => (item={'diff': [], 'dest': '/etc/kubernetes/metallb-config.yml', 'src': '/home/serhieiev/.ansible/tmp/ansible-tmp-1675883029.1783931-26309-192069205905265/source', 'md5sum': 'ceb2608dbcc9f71ed476d465a36fc0b4', 'checksum': '6f78938bb942856a2b89a6ffa4fad9a1642bb908', 'changed': True, 'uid': 0, 'gid': 0, 'owner': 'root', 'group': 'root', 'mode': '0644', 'state': 'file', 'size': 240, 'invocation': {'module_args': {'src': '/home/serhieiev/.ansible/tmp/ansible-tmp-1675883029.1783931-26309-192069205905265/source', 'dest': '/etc/kubernetes/metallb-config.yml', 'mode': 420, 'follow': False, '_original_basename': 'metallb-config.yml.j2', 'checksum': '6f78938bb942856a2b89a6ffa4fad9a1642bb908', 'backup': False, 'force': True, 'unsafe_writes': False, 'content': None, 'validate': None, 'directory_mode': None, 'remote_src': None, 'local_follow': None, 'owner': None, 'group': None, 'seuser': None, 'serole': None, 'selevel': None, 'setype': None, 'attributes': None}}, 'failed': False, 'item': 'metallb-config.yml', 'ansible_loop_var': 'item'})
Wednesday 08 February 2023  21:03:55 +0200 (0:00:03.677)       0:16:39.256 ****
Wednesday 08 February 2023  21:03:55 +0200 (0:00:00.043)       0:16:39.300 ****
Wednesday 08 February 2023  21:03:55 +0200 (0:00:00.042)       0:16:39.343 ****
Wednesday 08 February 2023  21:03:55 +0200 (0:00:00.048)       0:16:39.392 ****
Wednesday 08 February 2023  21:03:55 +0200 (0:00:00.047)       0:16:39.439 ****
Wednesday 08 February 2023  21:03:55 +0200 (0:00:00.047)       0:16:39.487 ****
Wednesday 08 February 2023  21:03:55 +0200 (0:00:00.048)       0:16:39.536 ****

PLAY [Apply resolv.conf changes now that cluster DNS is up] ************************************************************************************************
Wednesday 08 February 2023  21:03:56 +0200 (0:00:00.203)       0:16:39.740 ****
Wednesday 08 February 2023  21:03:56 +0200 (0:00:00.049)       0:16:39.789 ****
Wednesday 08 February 2023  21:03:56 +0200 (0:00:00.052)       0:16:39.841 ****
Wednesday 08 February 2023  21:03:56 +0200 (0:00:00.048)       0:16:39.890 ****
Wednesday 08 February 2023  21:03:56 +0200 (0:00:00.043)       0:16:39.934 ****
Wednesday 08 February 2023  21:03:56 +0200 (0:00:00.044)       0:16:39.978 ****
Wednesday 08 February 2023  21:03:56 +0200 (0:00:00.046)       0:16:40.024 ****
Wednesday 08 February 2023  21:03:56 +0200 (0:00:00.051)       0:16:40.076 ****
Wednesday 08 February 2023  21:03:56 +0200 (0:00:00.046)       0:16:40.123 ****
Wednesday 08 February 2023  21:03:56 +0200 (0:00:00.043)       0:16:40.166 ****
Wednesday 08 February 2023  21:03:57 +0200 (0:00:00.902)       0:16:41.069 ****

TASK [kubespray-defaults : Configure defaults] *************************************************************************************************************
ok: [node1] => {
    "msg": "Check roles/kubespray-defaults/defaults/main.yml"
}
Wednesday 08 February 2023  21:03:57 +0200 (0:00:00.058)       0:16:41.128 ****
Wednesday 08 February 2023  21:03:57 +0200 (0:00:00.063)       0:16:41.191 ****
Wednesday 08 February 2023  21:03:57 +0200 (0:00:00.044)       0:16:41.235 ****
Wednesday 08 February 2023  21:03:57 +0200 (0:00:00.049)       0:16:41.285 ****
Wednesday 08 February 2023  21:03:57 +0200 (0:00:00.044)       0:16:41.330 ****
Wednesday 08 February 2023  21:03:57 +0200 (0:00:00.046)       0:16:41.377 ****
Wednesday 08 February 2023  21:03:57 +0200 (0:00:00.056)       0:16:41.433 ****

TASK [adduser : User | Create User Group] ******************************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  21:03:59 +0200 (0:00:01.443)       0:16:42.876 ****

TASK [adduser : User | Create User] ************************************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  21:04:00 +0200 (0:00:01.503)       0:16:44.380 ****
Wednesday 08 February 2023  21:04:00 +0200 (0:00:00.051)       0:16:44.432 ****
Wednesday 08 February 2023  21:04:00 +0200 (0:00:00.043)       0:16:44.475 ****
Wednesday 08 February 2023  21:04:00 +0200 (0:00:00.043)       0:16:44.519 ****
Wednesday 08 February 2023  21:04:00 +0200 (0:00:00.043)       0:16:44.563 ****
Wednesday 08 February 2023  21:04:00 +0200 (0:00:00.052)       0:16:44.615 ****
Wednesday 08 February 2023  21:04:01 +0200 (0:00:00.043)       0:16:44.658 ****
Wednesday 08 February 2023  21:04:01 +0200 (0:00:00.043)       0:16:44.702 ****
Wednesday 08 February 2023  21:04:01 +0200 (0:00:00.042)       0:16:44.744 ****
Wednesday 08 February 2023  21:04:01 +0200 (0:00:00.042)       0:16:44.787 ****
Wednesday 08 February 2023  21:04:01 +0200 (0:00:00.046)       0:16:44.834 ****
Wednesday 08 February 2023  21:04:01 +0200 (0:00:00.070)       0:16:44.904 ****
Wednesday 08 February 2023  21:04:01 +0200 (0:00:00.042)       0:16:44.947 ****
Wednesday 08 February 2023  21:04:01 +0200 (0:00:00.043)       0:16:44.990 ****
Wednesday 08 February 2023  21:04:01 +0200 (0:00:00.043)       0:16:45.034 ****
Wednesday 08 February 2023  21:04:01 +0200 (0:00:00.045)       0:16:45.079 ****
Wednesday 08 February 2023  21:04:01 +0200 (0:00:00.043)       0:16:45.123 ****
Wednesday 08 February 2023  21:04:01 +0200 (0:00:00.044)       0:16:45.168 ****
Wednesday 08 February 2023  21:04:01 +0200 (0:00:00.042)       0:16:45.210 ****
Wednesday 08 February 2023  21:04:01 +0200 (0:00:00.043)       0:16:45.253 ****
Wednesday 08 February 2023  21:04:01 +0200 (0:00:00.041)       0:16:45.295 ****
Wednesday 08 February 2023  21:04:01 +0200 (0:00:00.045)       0:16:45.341 ****
Wednesday 08 February 2023  21:04:01 +0200 (0:00:00.043)       0:16:45.385 ****
Wednesday 08 February 2023  21:04:01 +0200 (0:00:00.043)       0:16:45.429 ****
Wednesday 08 February 2023  21:04:01 +0200 (0:00:00.044)       0:16:45.473 ****
Wednesday 08 February 2023  21:04:01 +0200 (0:00:00.042)       0:16:45.516 ****
Wednesday 08 February 2023  21:04:01 +0200 (0:00:00.043)       0:16:45.560 ****
Wednesday 08 February 2023  21:04:01 +0200 (0:00:00.045)       0:16:45.606 ****
Wednesday 08 February 2023  21:04:02 +0200 (0:00:00.043)       0:16:45.649 ****
Wednesday 08 February 2023  21:04:02 +0200 (0:00:00.042)       0:16:45.692 ****
Wednesday 08 February 2023  21:04:02 +0200 (0:00:00.041)       0:16:45.734 ****
Wednesday 08 February 2023  21:04:02 +0200 (0:00:00.042)       0:16:45.776 ****
Wednesday 08 February 2023  21:04:02 +0200 (0:00:00.042)       0:16:45.819 ****
Wednesday 08 February 2023  21:04:02 +0200 (0:00:00.046)       0:16:45.865 ****
Wednesday 08 February 2023  21:04:02 +0200 (0:00:00.115)       0:16:45.981 ****
Wednesday 08 February 2023  21:04:02 +0200 (0:00:00.042)       0:16:46.023 ****
Wednesday 08 February 2023  21:04:02 +0200 (0:00:00.044)       0:16:46.068 ****
Wednesday 08 February 2023  21:04:02 +0200 (0:00:00.042)       0:16:46.111 ****
Wednesday 08 February 2023  21:04:02 +0200 (0:00:00.043)       0:16:46.154 ****
Wednesday 08 February 2023  21:04:02 +0200 (0:00:00.042)       0:16:46.196 ****
Wednesday 08 February 2023  21:04:02 +0200 (0:00:00.045)       0:16:46.242 ****
Wednesday 08 February 2023  21:04:02 +0200 (0:00:00.043)       0:16:46.286 ****
Wednesday 08 February 2023  21:04:02 +0200 (0:00:00.043)       0:16:46.329 ****
Wednesday 08 February 2023  21:04:02 +0200 (0:00:00.044)       0:16:46.373 ****
Wednesday 08 February 2023  21:04:02 +0200 (0:00:00.043)       0:16:46.417 ****
Wednesday 08 February 2023  21:04:02 +0200 (0:00:00.045)       0:16:46.462 ****

TASK [kubernetes/preinstall : check if booted with ostree] *************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  21:04:04 +0200 (0:00:01.472)       0:16:47.934 ****

TASK [kubernetes/preinstall : set is_fedora_coreos] ********************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  21:04:05 +0200 (0:00:01.391)       0:16:49.326 ****

TASK [kubernetes/preinstall : set is_fedora_coreos] ********************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  21:04:05 +0200 (0:00:00.062)       0:16:49.388 ****

TASK [kubernetes/preinstall : check resolvconf] ************************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  21:04:07 +0200 (0:00:01.612)       0:16:51.001 ****

TASK [kubernetes/preinstall : check existence of /etc/resolvconf/resolv.conf.d] ****************************************************************************
ok: [node1]
Wednesday 08 February 2023  21:04:08 +0200 (0:00:01.602)       0:16:52.604 ****

TASK [kubernetes/preinstall : check status of /etc/resolv.conf] ********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  21:04:10 +0200 (0:00:01.639)       0:16:54.243 ****

TASK [kubernetes/preinstall : get content of /etc/resolv.conf] *********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  21:04:12 +0200 (0:00:01.436)       0:16:55.679 ****

TASK [kubernetes/preinstall : get currently configured nameservers] ****************************************************************************************
ok: [node1]
Wednesday 08 February 2023  21:04:12 +0200 (0:00:00.125)       0:16:55.804 ****

TASK [kubernetes/preinstall : NetworkManager | Check if host has NetworkManager] ***************************************************************************
ok: [node1]
Wednesday 08 February 2023  21:04:14 +0200 (0:00:01.880)       0:16:57.685 ****

TASK [kubernetes/preinstall : check systemd-resolved] ******************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  21:04:16 +0200 (0:00:02.409)       0:17:00.094 ****

TASK [kubernetes/preinstall : set default dns if remove_default_searchdomains is false] ********************************************************************
ok: [node1]
Wednesday 08 February 2023  21:04:16 +0200 (0:00:00.066)       0:17:00.161 ****

TASK [kubernetes/preinstall : set dns facts] ***************************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  21:04:16 +0200 (0:00:00.066)       0:17:00.227 ****

TASK [kubernetes/preinstall : check if kubelet is configured] **********************************************************************************************
ok: [node1]
Wednesday 08 February 2023  21:04:18 +0200 (0:00:02.014)       0:17:02.242 ****

TASK [kubernetes/preinstall : check if early DNS configuration stage] **************************************************************************************
ok: [node1]
Wednesday 08 February 2023  21:04:18 +0200 (0:00:00.060)       0:17:02.302 ****

TASK [kubernetes/preinstall : target resolv.conf files] ****************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  21:04:18 +0200 (0:00:00.062)       0:17:02.365 ****
Wednesday 08 February 2023  21:04:18 +0200 (0:00:00.045)       0:17:02.411 ****

TASK [kubernetes/preinstall : check if /etc/dhclient.conf exists] ******************************************************************************************
ok: [node1]
Wednesday 08 February 2023  21:04:21 +0200 (0:00:02.261)       0:17:04.673 ****
Wednesday 08 February 2023  21:04:21 +0200 (0:00:00.045)       0:17:04.718 ****

TASK [kubernetes/preinstall : check if /etc/dhcp/dhclient.conf exists] *************************************************************************************
ok: [node1]
Wednesday 08 February 2023  21:04:22 +0200 (0:00:01.768)       0:17:06.487 ****

TASK [kubernetes/preinstall : target dhclient conf file for /etc/dhcp/dhclient.conf] ***********************************************************************
ok: [node1]
Wednesday 08 February 2023  21:04:22 +0200 (0:00:00.060)       0:17:06.547 ****
Wednesday 08 February 2023  21:04:22 +0200 (0:00:00.043)       0:17:06.591 ****

TASK [kubernetes/preinstall : target dhclient hook file for Debian family] *********************************************************************************
ok: [node1]
Wednesday 08 February 2023  21:04:23 +0200 (0:00:00.060)       0:17:06.652 ****

TASK [kubernetes/preinstall : generate search domains to resolvconf] ***************************************************************************************
ok: [node1]
Wednesday 08 February 2023  21:04:23 +0200 (0:00:00.065)       0:17:06.717 ****

TASK [kubernetes/preinstall : pick coredns cluster IP or default resolver] *********************************************************************************
ok: [node1]
Wednesday 08 February 2023  21:04:23 +0200 (0:00:00.135)       0:17:06.853 ****

TASK [kubernetes/preinstall : generate nameservers for resolvconf, including cluster DNS] ******************************************************************
ok: [node1]
Wednesday 08 February 2023  21:04:23 +0200 (0:00:00.070)       0:17:06.924 ****
Wednesday 08 February 2023  21:04:23 +0200 (0:00:00.042)       0:17:06.967 ****

TASK [kubernetes/preinstall : gather os specific variables] ************************************************************************************************
ok: [node1] => (item=/Users/max/DevOps/kubespray/roles/kubernetes/preinstall/vars/../vars/ubuntu.yml)
Wednesday 08 February 2023  21:04:23 +0200 (0:00:00.075)       0:17:07.043 ****
Wednesday 08 February 2023  21:04:23 +0200 (0:00:00.044)       0:17:07.088 ****

TASK [kubernetes/preinstall : check /usr readonly] *********************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  21:04:25 +0200 (0:00:02.318)       0:17:09.406 ****
Wednesday 08 February 2023  21:04:25 +0200 (0:00:00.044)       0:17:09.451 ****
Wednesday 08 February 2023  21:04:25 +0200 (0:00:00.043)       0:17:09.494 ****
Wednesday 08 February 2023  21:04:25 +0200 (0:00:00.043)       0:17:09.538 ****
Wednesday 08 February 2023  21:04:25 +0200 (0:00:00.075)       0:17:09.613 ****
Wednesday 08 February 2023  21:04:26 +0200 (0:00:00.046)       0:17:09.659 ****
Wednesday 08 February 2023  21:04:26 +0200 (0:00:00.042)       0:17:09.702 ****
Wednesday 08 February 2023  21:04:26 +0200 (0:00:00.045)       0:17:09.747 ****
Wednesday 08 February 2023  21:04:26 +0200 (0:00:00.060)       0:17:09.808 ****
Wednesday 08 February 2023  21:04:26 +0200 (0:00:00.052)       0:17:09.861 ****
Wednesday 08 February 2023  21:04:26 +0200 (0:00:00.047)       0:17:09.908 ****
Wednesday 08 February 2023  21:04:26 +0200 (0:00:00.047)       0:17:09.956 ****
Wednesday 08 February 2023  21:04:26 +0200 (0:00:00.084)       0:17:10.041 ****
Wednesday 08 February 2023  21:04:26 +0200 (0:00:00.085)       0:17:10.126 ****
Wednesday 08 February 2023  21:04:26 +0200 (0:00:00.047)       0:17:10.173 ****
Wednesday 08 February 2023  21:04:26 +0200 (0:00:00.047)       0:17:10.220 ****

TASK [kubernetes/preinstall : Write resolved.conf] *********************************************************************************************************
changed: [node1]
Wednesday 08 February 2023  21:04:31 +0200 (0:00:04.577)       0:17:14.798 ****
Wednesday 08 February 2023  21:04:31 +0200 (0:00:00.043)       0:17:14.842 ****
Wednesday 08 February 2023  21:04:31 +0200 (0:00:00.044)       0:17:14.887 ****
Wednesday 08 February 2023  21:04:31 +0200 (0:00:00.044)       0:17:14.931 ****
Wednesday 08 February 2023  21:04:31 +0200 (0:00:00.047)       0:17:14.979 ****
Wednesday 08 February 2023  21:04:31 +0200 (0:00:00.047)       0:17:15.026 ****
Wednesday 08 February 2023  21:04:31 +0200 (0:00:00.047)       0:17:15.074 ****
Wednesday 08 February 2023  21:04:31 +0200 (0:00:00.047)       0:17:15.122 ****
Wednesday 08 February 2023  21:04:31 +0200 (0:00:00.046)       0:17:15.168 ****
Wednesday 08 February 2023  21:04:31 +0200 (0:00:00.042)       0:17:15.211 ****
Wednesday 08 February 2023  21:04:31 +0200 (0:00:00.044)       0:17:15.256 ****
Wednesday 08 February 2023  21:04:31 +0200 (0:00:00.041)       0:17:15.298 ****
Wednesday 08 February 2023  21:04:31 +0200 (0:00:00.043)       0:17:15.342 ****
Wednesday 08 February 2023  21:04:31 +0200 (0:00:00.042)       0:17:15.384 ****
Wednesday 08 February 2023  21:04:31 +0200 (0:00:00.045)       0:17:15.430 ****
Wednesday 08 February 2023  21:04:31 +0200 (0:00:00.043)       0:17:15.474 ****
Wednesday 08 February 2023  21:04:31 +0200 (0:00:00.043)       0:17:15.517 ****
Wednesday 08 February 2023  21:04:31 +0200 (0:00:00.044)       0:17:15.562 ****
Wednesday 08 February 2023  21:04:31 +0200 (0:00:00.043)       0:17:15.605 ****
Wednesday 08 February 2023  21:04:32 +0200 (0:00:00.055)       0:17:15.660 ****
Wednesday 08 February 2023  21:04:32 +0200 (0:00:00.045)       0:17:15.706 ****
Wednesday 08 February 2023  21:04:32 +0200 (0:00:00.043)       0:17:15.750 ****
Wednesday 08 February 2023  21:04:32 +0200 (0:00:00.044)       0:17:15.794 ****
Wednesday 08 February 2023  21:04:32 +0200 (0:00:00.045)       0:17:15.840 ****
Wednesday 08 February 2023  21:04:32 +0200 (0:00:00.044)       0:17:15.884 ****
Wednesday 08 February 2023  21:04:32 +0200 (0:00:00.043)       0:17:15.928 ****
Wednesday 08 February 2023  21:04:32 +0200 (0:00:00.046)       0:17:15.974 ****
Wednesday 08 February 2023  21:04:32 +0200 (0:00:00.079)       0:17:16.053 ****
Wednesday 08 February 2023  21:04:32 +0200 (0:00:00.042)       0:17:16.096 ****
Wednesday 08 February 2023  21:04:32 +0200 (0:00:00.044)       0:17:16.140 ****
Wednesday 08 February 2023  21:04:32 +0200 (0:00:00.042)       0:17:16.183 ****
Wednesday 08 February 2023  21:04:32 +0200 (0:00:00.043)       0:17:16.227 ****
Wednesday 08 February 2023  21:04:32 +0200 (0:00:00.045)       0:17:16.272 ****
Wednesday 08 February 2023  21:04:32 +0200 (0:00:00.043)       0:17:16.316 ****
Wednesday 08 February 2023  21:04:32 +0200 (0:00:00.044)       0:17:16.360 ****
Wednesday 08 February 2023  21:04:32 +0200 (0:00:00.043)       0:17:16.403 ****
Wednesday 08 February 2023  21:04:32 +0200 (0:00:00.043)       0:17:16.447 ****
Wednesday 08 February 2023  21:04:32 +0200 (0:00:00.048)       0:17:16.495 ****
Wednesday 08 February 2023  21:04:32 +0200 (0:00:00.046)       0:17:16.542 ****
Wednesday 08 February 2023  21:04:32 +0200 (0:00:00.043)       0:17:16.585 ****
Wednesday 08 February 2023  21:04:32 +0200 (0:00:00.043)       0:17:16.628 ****
Wednesday 08 February 2023  21:04:33 +0200 (0:00:00.043)       0:17:16.672 ****
Wednesday 08 February 2023  21:04:33 +0200 (0:00:00.050)       0:17:16.722 ****
Wednesday 08 February 2023  21:04:33 +0200 (0:00:00.058)       0:17:16.781 ****
Wednesday 08 February 2023  21:04:33 +0200 (0:00:00.064)       0:17:16.846 ****
Wednesday 08 February 2023  21:04:33 +0200 (0:00:00.044)       0:17:16.891 ****

TASK [kubernetes/preinstall : Configure dhclient to supersede search/domain/nameservers] *******************************************************************
changed: [node1]
Wednesday 08 February 2023  21:04:35 +0200 (0:00:02.350)       0:17:19.242 ****

TASK [kubernetes/preinstall : Configure dhclient hooks for resolv.conf (non-RH)] ***************************************************************************
ok: [node1]
Wednesday 08 February 2023  21:04:39 +0200 (0:00:03.506)       0:17:22.748 ****
Wednesday 08 February 2023  21:04:39 +0200 (0:00:00.055)       0:17:22.803 ****
Wednesday 08 February 2023  21:04:39 +0200 (0:00:00.045)       0:17:22.849 ****
Wednesday 08 February 2023  21:04:39 +0200 (0:00:00.045)       0:17:22.894 ****
Wednesday 08 February 2023  21:04:39 +0200 (0:00:00.000)       0:17:22.895 ****

RUNNING HANDLER [kubernetes/preinstall : Preinstall | propagate resolvconf to k8s components] **************************************************************
changed: [node1]
Wednesday 08 February 2023  21:04:40 +0200 (0:00:01.492)       0:17:24.387 ****

RUNNING HANDLER [kubernetes/preinstall : Preinstall | reload kubelet] **************************************************************************************
changed: [node1]
Wednesday 08 February 2023  21:04:42 +0200 (0:00:02.207)       0:17:26.595 ****

RUNNING HANDLER [kubernetes/preinstall : Preinstall | kube-apiserver configured] ***************************************************************************
ok: [node1]
Wednesday 08 February 2023  21:04:45 +0200 (0:00:02.388)       0:17:28.983 ****

RUNNING HANDLER [kubernetes/preinstall : Preinstall | kube-controller configured] **************************************************************************
ok: [node1]
Wednesday 08 February 2023  21:04:47 +0200 (0:00:01.774)       0:17:30.758 ****
Wednesday 08 February 2023  21:04:47 +0200 (0:00:00.041)       0:17:30.800 ****
Wednesday 08 February 2023  21:04:47 +0200 (0:00:00.051)       0:17:30.851 ****
Wednesday 08 February 2023  21:04:47 +0200 (0:00:00.042)       0:17:30.894 ****

RUNNING HANDLER [kubernetes/preinstall : Preinstall | restart kube-apiserver crio/containerd] **************************************************************
changed: [node1]
Wednesday 08 February 2023  21:04:50 +0200 (0:00:02.871)       0:17:33.766 ****
FAILED - RETRYING: [node1]: Preinstall | wait for the apiserver to be running (60 retries left).

RUNNING HANDLER [kubernetes/preinstall : Preinstall | wait for the apiserver to be running] ****************************************************************
ok: [node1]
Wednesday 08 February 2023  21:04:59 +0200 (0:00:09.473)       0:17:43.239 ****

RUNNING HANDLER [kubernetes/preinstall : Preinstall | Restart systemd-resolved] ****************************************************************************
changed: [node1]
Wednesday 08 February 2023  21:05:01 +0200 (0:00:02.172)       0:17:45.412 ****
Wednesday 08 February 2023  21:05:01 +0200 (0:00:00.045)       0:17:45.457 ****
Wednesday 08 February 2023  21:05:01 +0200 (0:00:00.044)       0:17:45.502 ****
Wednesday 08 February 2023  21:05:01 +0200 (0:00:00.043)       0:17:45.546 ****
Wednesday 08 February 2023  21:05:01 +0200 (0:00:00.042)       0:17:45.588 ****
Wednesday 08 February 2023  21:05:02 +0200 (0:00:00.043)       0:17:45.632 ****
Wednesday 08 February 2023  21:05:02 +0200 (0:00:00.042)       0:17:45.675 ****
Wednesday 08 February 2023  21:05:02 +0200 (0:00:00.044)       0:17:45.719 ****
Wednesday 08 February 2023  21:05:02 +0200 (0:00:00.045)       0:17:45.764 ****

TASK [Run calico checks] ***********************************************************************************************************************************
Wednesday 08 February 2023  21:05:02 +0200 (0:00:00.277)       0:17:46.042 ****

TASK [network_plugin/calico : Stop if legacy encapsulation variables are detected (ipip)] ******************************************************************
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
Wednesday 08 February 2023  21:05:02 +0200 (0:00:00.078)       0:17:46.121 ****

TASK [network_plugin/calico : Stop if legacy encapsulation variables are detected (ipip_mode)] *************************************************************
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
Wednesday 08 February 2023  21:05:02 +0200 (0:00:00.082)       0:17:46.203 ****

TASK [network_plugin/calico : Stop if legacy encapsulation variables are detected (calcio_ipam_autoallocateblocks)] ****************************************
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
Wednesday 08 February 2023  21:05:02 +0200 (0:00:00.078)       0:17:46.282 ****
Wednesday 08 February 2023  21:05:02 +0200 (0:00:00.060)       0:17:46.342 ****

TASK [network_plugin/calico : Stop if supported Calico versions] *******************************************************************************************
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
Wednesday 08 February 2023  21:05:02 +0200 (0:00:00.081)       0:17:46.424 ****
ASYNC OK on node1: jid=339838479445.21419

TASK [network_plugin/calico : Get current calico cluster version] ******************************************************************************************
ok: [node1]
Wednesday 08 February 2023  21:05:08 +0200 (0:00:06.093)       0:17:52.517 ****

TASK [network_plugin/calico : Check that current calico version is enough for upgrade] *********************************************************************
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
Wednesday 08 February 2023  21:05:08 +0200 (0:00:00.086)       0:17:52.604 ****
Wednesday 08 February 2023  21:05:09 +0200 (0:00:00.063)       0:17:52.667 ****
Wednesday 08 February 2023  21:05:09 +0200 (0:00:00.058)       0:17:52.725 ****

TASK [network_plugin/calico : Check vars defined correctly] ************************************************************************************************
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
Wednesday 08 February 2023  21:05:09 +0200 (0:00:00.084)       0:17:52.810 ****

TASK [network_plugin/calico : Check calico network backend defined correctly] ******************************************************************************
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
Wednesday 08 February 2023  21:05:09 +0200 (0:00:00.077)       0:17:52.888 ****

TASK [network_plugin/calico : Check ipip and vxlan mode defined correctly] *********************************************************************************
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
Wednesday 08 February 2023  21:05:09 +0200 (0:00:00.083)       0:17:52.971 ****
Wednesday 08 February 2023  21:05:09 +0200 (0:00:00.059)       0:17:53.031 ****

TASK [network_plugin/calico : Check ipip and vxlan mode if simultaneously enabled] *************************************************************************
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
Wednesday 08 February 2023  21:05:09 +0200 (0:00:00.083)       0:17:53.115 ****

TASK [network_plugin/calico : Get Calico default-pool configuration] ***************************************************************************************
ok: [node1]
Wednesday 08 February 2023  21:05:10 +0200 (0:00:00.517)       0:17:53.632 ****

TASK [network_plugin/calico : Set calico_pool_conf] ********************************************************************************************************
ok: [node1]
Wednesday 08 February 2023  21:05:10 +0200 (0:00:00.080)       0:17:53.713 ****

TASK [network_plugin/calico : Check if inventory match current cluster configuration] **********************************************************************
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}
Wednesday 08 February 2023  21:05:10 +0200 (0:00:00.090)       0:17:53.804 ****
Wednesday 08 February 2023  21:05:10 +0200 (0:00:00.058)       0:17:53.862 ****
Wednesday 08 February 2023  21:05:10 +0200 (0:00:00.057)       0:17:53.920 ****

PLAY RECAP *************************************************************************************************************************************************
localhost                  : ok=3    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0
node1                      : ok=769  changed=149  unreachable=0    failed=0    skipped=1276 rescued=0    ignored=9

Wednesday 08 February 2023  21:05:10 +0200 (0:00:00.085)       0:17:54.006 ****
===============================================================================
kubernetes-apps/ansible : Kubernetes Apps | Lay Down CoreDNS templates ----------------------------------------------------------------------------- 31.56s
download : download_file | Validate mirrors -------------------------------------------------------------------------------------------------------- 27.77s
kubernetes-apps/ansible : Kubernetes Apps | Start Resources ---------------------------------------------------------------------------------------- 23.02s
network_plugin/calico : Calico | Create calico manifests ------------------------------------------------------------------------------------------- 17.69s
kubernetes/control-plane : kubeadm | Initialize first master --------------------------------------------------------------------------------------- 16.77s
kubernetes/preinstall : Update package management cache (APT) -------------------------------------------------------------------------------------- 13.27s
download : download_container | Download image if required ----------------------------------------------------------------------------------------- 12.07s
policy_controller/calico : Create calico-kube-controllers manifests -------------------------------------------------------------------------------- 11.23s
network_plugin/calico : Start Calico resources ----------------------------------------------------------------------------------------------------- 11.21s
download : download_container | Download image if required ------------------------------------------------------------------------------------------ 9.63s
kubernetes/preinstall : Preinstall | wait for the apiserver to be running --------------------------------------------------------------------------- 9.47s
kubernetes/preinstall : Install packages requirements ----------------------------------------------------------------------------------------------- 9.24s
etcd : Check certs | Register ca and etcd admin/member certs on etcd hosts -------------------------------------------------------------------------- 9.14s
kubernetes-apps/ansible : Kubernetes Apps | Lay Down nodelocaldns Template -------------------------------------------------------------------------- 8.89s
etcd : reload etcd ---------------------------------------------------------------------------------------------------------------------------------- 8.72s
kubernetes/preinstall : Ensure kube-bench parameters are set ---------------------------------------------------------------------------------------- 8.67s
policy_controller/calico : Start of Calico kube controllers ----------------------------------------------------------------------------------------- 8.50s
container-engine/containerd : containerd | Unpack containerd archive -------------------------------------------------------------------------------- 7.32s
kubernetes/control-plane : Update server field in component kubeconfigs ----------------------------------------------------------------------------- 6.99s
download : download_container | Download image if required ------------------------------------------------------------------------------------------ 6.94s

serhieiev@k8s:~$ ls /etc/kubernetes/admin.conf
/etc/kubernetes/admin.conf

serhieiev@k8s:~$ mkdir ~/.kube

serhieiev@k8s:~$ sudo cp /etc/kubernetes/admin.conf ~/.kube/config

serhieiev@k8s:~$ sudo chmod 777 ~/.kube/config

serhieiev@k8s:~$ kubectl get nodes
NAME    STATUS   ROLES           AGE   VERSION
node1   Ready    control-plane   13m   v1.24.6

serhieiev@k8s:~$ curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg > /dev/null
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100  1700  100  1700    0     0  20481      0 --:--:-- --:--:-- --:--:-- 20481
serhieiev@k8s:~$ sudo apt-get install apt-transport-https --yes
Reading package lists... Done
Building dependency tree
Reading state information... Done
apt-transport-https is already the newest version (2.0.9).
The following packages were automatically installed and are no longer required:
  libatasmart4 libblockdev-fs2 libblockdev-loop2 libblockdev-part-err2 libblockdev-part2 libblockdev-swap2 libblockdev-utils2 libblockdev2 libmbim-glib4 libmbim-proxy libmm-glib0 libnspr4 libnss3 libnuma1
  libparted-fs-resize0 libqmi-glib5 libqmi-proxy libudisks2-0 libxmlb2 usb-modeswitch usb-modeswitch-data
Use 'sudo apt autoremove' to remove them.
0 upgraded, 0 newly installed, 0 to remove and 25 not upgraded.
serhieiev@k8s:~$ echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
deb [arch=amd64 signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main
serhieiev@k8s:~$ sudo apt-get update
Hit:1 http://europe-west1.gce.archive.ubuntu.com/ubuntu focal InRelease
Hit:2 http://europe-west1.gce.archive.ubuntu.com/ubuntu focal-updates InRelease
Hit:3 http://europe-west1.gce.archive.ubuntu.com/ubuntu focal-backports InRelease
Get:4 https://baltocdn.com/helm/stable/debian all InRelease [7652 B]
Hit:5 http://security.ubuntu.com/ubuntu focal-security InRelease
Get:6 https://baltocdn.com/helm/stable/debian all/main amd64 Packages [3208 B]
Fetched 10.9 kB in 1s (14.9 kB/s)
Reading package lists... Done
serhieiev@k8s:~$ sudo apt-get install helm
Reading package lists... Done
Building dependency tree
Reading state information... Done
The following packages were automatically installed and are no longer required:
  libatasmart4 libblockdev-fs2 libblockdev-loop2 libblockdev-part-err2 libblockdev-part2 libblockdev-swap2 libblockdev-utils2 libblockdev2 libmbim-glib4 libmbim-proxy libmm-glib0 libnspr4 libnss3 libnuma1
  libparted-fs-resize0 libqmi-glib5 libqmi-proxy libudisks2-0 libxmlb2 usb-modeswitch usb-modeswitch-data
Use 'sudo apt autoremove' to remove them.
The following NEW packages will be installed:
  helm
0 upgraded, 1 newly installed, 0 to remove and 25 not upgraded.
Need to get 15.0 MB of archives.
After this operation, 46.9 MB of additional disk space will be used.
Get:1 https://baltocdn.com/helm/stable/debian all/main amd64 helm amd64 3.11.0-1 [15.0 MB]
Fetched 15.0 MB in 0s (72.7 MB/s)
Selecting previously unselected package helm.
(Reading database ... 62246 files and directories currently installed.)
Preparing to unpack .../helm_3.11.0-1_amd64.deb ...
Unpacking helm (3.11.0-1) ...
Setting up helm (3.11.0-1) ...
Processing triggers for man-db (2.9.1-1) ...

serhieiev@k8s:~$ helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
WARNING: Kubernetes configuration file is group-readable. This is insecure. Location: /home/serhieiev/.kube/config
WARNING: Kubernetes configuration file is world-readable. This is insecure. Location: /home/serhieiev/.kube/config
"ingress-nginx" has been added to your repositories
serhieiev@k8s:~$ helm repo update
WARNING: Kubernetes configuration file is group-readable. This is insecure. Location: /home/serhieiev/.kube/config
WARNING: Kubernetes configuration file is world-readable. This is insecure. Location: /home/serhieiev/.kube/config
Hang tight while we grab the latest from your chart repositories...
...Successfully got an update from the "ingress-nginx" chart repository
Update Complete. ⎈Happy Helming!⎈
serhieiev@k8s:~$ helm install quickstart ingress-nginx/ingress-nginx
WARNING: Kubernetes configuration file is group-readable. This is insecure. Location: /home/serhieiev/.kube/config
WARNING: Kubernetes configuration file is world-readable. This is insecure. Location: /home/serhieiev/.kube/config
NAME: quickstart
LAST DEPLOYED: Wed Feb  8 20:25:07 2023
NAMESPACE: default
STATUS: deployed
REVISION: 1
TEST SUITE: None
NOTES:
The ingress-nginx controller has been installed.
It may take a few minutes for the LoadBalancer IP to be available.
You can watch the status by running 'kubectl --namespace default get services -o wide -w quickstart-ingress-nginx-controller'

An example Ingress that makes use of the controller:
  apiVersion: networking.k8s.io/v1
  kind: Ingress
  metadata:
    name: example
    namespace: foo
  spec:
    ingressClassName: nginx
    rules:
      - host: www.example.com
        http:
          paths:
            - pathType: Prefix
              backend:
                service:
                  name: exampleService
                  port:
                    number: 80
              path: /
    # This section is only required if TLS is to be enabled for the Ingress
    tls:
      - hosts:
        - www.example.com
        secretName: example-tls

If TLS is enabled for the Ingress, a Secret containing the certificate and key must also be provided:

  apiVersion: v1
  kind: Secret
  metadata:
    name: example-tls
    namespace: foo
  data:
    tls.crt: <base64 encoded cert>
    tls.key: <base64 encoded key>
  type: kubernetes.io/tls

serhieiev@k8s:~$ kubectl get svc
NAME                                            TYPE           CLUSTER-IP      EXTERNAL-IP   PORT(S)                      AGE
kubernetes                                      ClusterIP      10.233.0.1      <none>        443/TCP                      86m
quickstart-ingress-nginx-controller             LoadBalancer   10.233.38.116   10.132.0.6    80:31738/TCP,443:31121/TCP   53s
quickstart-ingress-nginx-controller-admission   ClusterIP      10.233.26.183   <none>        443/TCP                      53s

serhieiev@k8s:~$ kubectl apply -f https://raw.githubusercontent.com/cert-manager/website/master/content/docs/tutorials/acme/example/deployment.yaml
deployment.apps/kuard created
serhieiev@k8s:~$ kubectl apply -f https://raw.githubusercontent.com/cert-manager/website/master/content/docs/tutorials/acme/example/service.yaml
service/kuard created

serhieiev@k8s:~$ kubectl create --edit -f https://raw.githubusercontent.com/cert-manager/website/master/content/docs/tutorials/acme/example/ingress.yaml
ingress.networking.k8s.io/kuard created

serhieiev@k8s:~$ kubectl get ingress
NAME    CLASS    HOSTS            ADDRESS      PORTS     AGE
kuard   <none>   serhieiev.site   10.132.0.6   80, 443   42s
serhieiev@k8s:~$ helm repo add jetstack https://charts.jetstack.io
WARNING: Kubernetes configuration file is group-readable. This is insecure. Location: /home/serhieiev/.kube/config
WARNING: Kubernetes configuration file is world-readable. This is insecure. Location: /home/serhieiev/.kube/config
"jetstack" has been added to your repositories
serhieiev@k8s:~$ helm repo update
WARNING: Kubernetes configuration file is group-readable. This is insecure. Location: /home/serhieiev/.kube/config
WARNING: Kubernetes configuration file is world-readable. This is insecure. Location: /home/serhieiev/.kube/config
Hang tight while we grab the latest from your chart repositories...
...Successfully got an update from the "ingress-nginx" chart repository
...Successfully got an update from the "jetstack" chart repository
Update Complete. ⎈Happy Helming!⎈
serhieiev@k8s:~$ kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.11.0/cert-manager.crds.yaml
customresourcedefinition.apiextensions.k8s.io/clusterissuers.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/challenges.acme.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/certificaterequests.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/issuers.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/certificates.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/orders.acme.cert-manager.io created
serhieiev@k8s:~$ helm install \
>   cert-manager jetstack/cert-manager \
>   --namespace cert-manager \
>   --create-namespace \
>   --version v1.11.0 \
>
WARNING: Kubernetes configuration file is group-readable. This is insecure. Location: /home/serhieiev/.kube/config
WARNING: Kubernetes configuration file is world-readable. This is insecure. Location: /home/serhieiev/.kube/config
NAME: cert-manager
LAST DEPLOYED: Wed Feb  8 20:37:03 2023
NAMESPACE: cert-manager
STATUS: deployed
REVISION: 1
TEST SUITE: None
NOTES:
cert-manager v1.11.0 has been deployed successfully!

In order to begin issuing certificates, you will need to set up a ClusterIssuer
or Issuer resource (for example, by creating a 'letsencrypt-staging' issuer).

More information on the different types of issuers and how to configure them
can be found in our documentation:

https://cert-manager.io/docs/configuration/

For information on how to configure cert-manager to automatically provision
Certificates for Ingress resources, take a look at the `ingress-shim`
documentation:

https://cert-manager.io/docs/usage/ingress/

serhieiev@k8s:~$ kubectl create --edit -f https://raw.githubusercontent.com/cert-manager/website/master/content/docs/tutorials/acme/example/staging-issuer.yaml
issuer.cert-manager.io/letsencrypt-staging created
serhieiev@k8s:~$ kubectl describe issuer letsencrypt-staging
Name:         letsencrypt-staging
Namespace:    default
Labels:       <none>
Annotations:  <none>
API Version:  cert-manager.io/v1
Kind:         Issuer
Metadata:
  Creation Timestamp:  2023-02-08T20:41:12Z
  Generation:          1
  Managed Fields:
    API Version:  cert-manager.io/v1
    Fields Type:  FieldsV1
    fieldsV1:
      f:spec:
        .:
        f:acme:
          .:
          f:email:
          f:privateKeySecretRef:
            .:
            f:name:
          f:server:
          f:solvers:
    Manager:      kubectl-create
    Operation:    Update
    Time:         2023-02-08T20:41:12Z
    API Version:  cert-manager.io/v1
    Fields Type:  FieldsV1
    fieldsV1:
      f:status:
        .:
        f:acme:
          .:
          f:lastRegisteredEmail:
          f:uri:
        f:conditions:
          .:
          k:{"type":"Ready"}:
            .:
            f:lastTransitionTime:
            f:message:
            f:observedGeneration:
            f:reason:
            f:status:
            f:type:
    Manager:         cert-manager-issuers
    Operation:       Update
    Subresource:     status
    Time:            2023-02-08T20:41:13Z
  Resource Version:  9136
  UID:               ba500f6a-8e47-40c9-af1f-4fabd532a82e
Spec:
  Acme:
    Email:            serhieiev@gmail.com
    Preferred Chain:
    Private Key Secret Ref:
      Name:  letsencrypt-staging
    Server:  https://acme-staging-v02.api.letsencrypt.org/directory
    Solvers:
      http01:
        Ingress:
          Class:  nginx
Status:
  Acme:
    Last Registered Email:  serhieiev@gmail.com
    Uri:                    https://acme-staging-v02.api.letsencrypt.org/acme/acct/87126033
  Conditions:
    Last Transition Time:  2023-02-08T20:41:13Z
    Message:               The ACME account was registered with the ACME server
    Observed Generation:   1
    Reason:                ACMEAccountRegistered
    Status:                True
    Type:                  Ready
Events:                    <none>

serhieiev@k8s:~$ kubectl create --edit -f https://raw.githubusercontent.com/cert-manager/website/master/content/docs/tutorials/acme/example/ingress-tls.yaml
A copy of your changes has been stored to "/tmp/kubectl-edit-1218751617.yaml"
Error from server (AlreadyExists): ingresses.networking.k8s.io "kuard" already exists
serhieiev@k8s:~$ kubectl apply -f /tmp/kubectl-edit-1218751617.yaml
Warning: resource ingresses/kuard is missing the kubectl.kubernetes.io/last-applied-configuration annotation which is required by kubectl apply. kubectl apply should only be used on resources created declaratively by either kubectl create --save-config or kubectl apply. The missing annotation will be patched automatically.
ingress.networking.k8s.io/kuard configured
serhieiev@k8s:~$ kubectl get certificate
NAME                     READY   SECRET                   AGE
quickstart-example-tls   True    quickstart-example-tls   99s
serhieiev@k8s:~$ kubectl describe certificate quickstart-example-tls
Name:         quickstart-example-tls
Namespace:    default
Labels:       <none>
Annotations:  <none>
API Version:  cert-manager.io/v1
Kind:         Certificate
Metadata:
  Creation Timestamp:  2023-02-08T20:50:57Z
  Generation:          1
  Managed Fields:
    API Version:  cert-manager.io/v1
    Fields Type:  FieldsV1
    fieldsV1:
      f:metadata:
        f:ownerReferences:
          .:
          k:{"uid":"efaaf166-e33a-4097-81a9-fa523c437d97"}:
      f:spec:
        .:
        f:dnsNames:
        f:issuerRef:
          .:
          f:group:
          f:kind:
          f:name:
        f:secretName:
        f:usages:
    Manager:      cert-manager-ingress-shim
    Operation:    Update
    Time:         2023-02-08T20:50:57Z
    API Version:  cert-manager.io/v1
    Fields Type:  FieldsV1
    fieldsV1:
      f:status:
        f:revision:
    Manager:      cert-manager-certificates-issuing
    Operation:    Update
    Subresource:  status
    Time:         2023-02-08T20:51:22Z
    API Version:  cert-manager.io/v1
    Fields Type:  FieldsV1
    fieldsV1:
      f:status:
        .:
        f:conditions:
          .:
          k:{"type":"Ready"}:
            .:
            f:lastTransitionTime:
            f:message:
            f:observedGeneration:
            f:reason:
            f:status:
            f:type:
        f:notAfter:
        f:notBefore:
        f:renewalTime:
    Manager:      cert-manager-certificates-readiness
    Operation:    Update
    Subresource:  status
    Time:         2023-02-08T20:51:23Z
  Owner References:
    API Version:           networking.k8s.io/v1
    Block Owner Deletion:  true
    Controller:            true
    Kind:                  Ingress
    Name:                  kuard
    UID:                   efaaf166-e33a-4097-81a9-fa523c437d97
  Resource Version:        10171
  UID:                     35888e65-723a-4022-95d9-02ce93e94bc3
Spec:
  Dns Names:
    serhieiev.site
  Issuer Ref:
    Group:      cert-manager.io
    Kind:       Issuer
    Name:       letsencrypt-staging
  Secret Name:  quickstart-example-tls
  Usages:
    digital signature
    key encipherment
Status:
  Conditions:
    Last Transition Time:  2023-02-08T20:51:23Z
    Message:               Certificate is up to date and has not expired
    Observed Generation:   1
    Reason:                Ready
    Status:                True
    Type:                  Ready
  Not After:               2023-05-09T19:51:21Z
  Not Before:              2023-02-08T19:51:22Z
  Renewal Time:            2023-04-09T19:51:21Z
  Revision:                1
Events:
  Type    Reason     Age   From                                       Message
  ----    ------     ----  ----                                       -------
  Normal  Issuing    110s  cert-manager-certificates-trigger          Issuing certificate as Secret does not exist
  Normal  Generated  110s  cert-manager-certificates-key-manager      Stored new private key in temporary Secret resource "quickstart-example-tls-j642k"
  Normal  Requested  110s  cert-manager-certificates-request-manager  Created new CertificateRequest resource "quickstart-example-tls-9dxdt"
  Normal  Issuing    84s   cert-manager-certificates-issuing          The certificate has been successfully issued

  serhieiev@k8s:~$ kubectl describe secret quickstart-example-tls
Name:         quickstart-example-tls
Namespace:    default
Labels:       controller.cert-manager.io/fao=true
Annotations:  cert-manager.io/alt-names: serhieiev.site
              cert-manager.io/certificate-name: quickstart-example-tls
              cert-manager.io/common-name: serhieiev.site
              cert-manager.io/ip-sans:
              cert-manager.io/issuer-group: cert-manager.io
              cert-manager.io/issuer-kind: Issuer
              cert-manager.io/issuer-name: letsencrypt-staging
              cert-manager.io/uri-sans:

Type:  kubernetes.io/tls

Data
====
tls.crt:  5733 bytes
tls.key:  1679 bytes

serhieiev@k8s:~$ kubectl create --edit -f https://raw.githubusercontent.com/cert-manager/website/master/content/docs/tutorials/acme/example/production-issuer.yaml
issuer.cert-manager.io/letsencrypt-prod created

serhieiev@k8s:~$ kubectl create --edit -f https://raw.githubusercontent.com/cert-manager/website/master/content/docs/tutorials/acme/example/ingress-tls-final.yaml
A copy of your changes has been stored to "/tmp/kubectl-edit-3696631037.yaml"
Error from server (AlreadyExists): ingresses.networking.k8s.io "kuard" already exists

serhieiev@k8s:~$ kubectl apply -f /tmp/kubectl-edit-3696631037.yaml
ingress.networking.k8s.io/kuard configured

serhieiev@k8s:~$ kubectl delete secret quickstart-example-tls
secret "quickstart-example-tls" deleted
serhieiev@k8s:~$ kubectl describe certificate quickstart-example-tls
Name:         quickstart-example-tls
Namespace:    default
Labels:       <none>
Annotations:  <none>
API Version:  cert-manager.io/v1
Kind:         Certificate
Metadata:
  Creation Timestamp:  2023-02-08T20:50:57Z
  Generation:          2
  Managed Fields:
    API Version:  cert-manager.io/v1
    Fields Type:  FieldsV1
    fieldsV1:
      f:metadata:
        f:ownerReferences:
          .:
          k:{"uid":"efaaf166-e33a-4097-81a9-fa523c437d97"}:
      f:spec:
        .:
        f:dnsNames:
        f:issuerRef:
          .:
          f:group:
          f:kind:
          f:name:
        f:secretName:
        f:usages:
    Manager:      cert-manager-ingress-shim
    Operation:    Update
    Time:         2023-02-08T20:50:57Z
    API Version:  cert-manager.io/v1
    Fields Type:  FieldsV1
    fieldsV1:
      f:status:
        f:revision:
    Manager:      cert-manager-certificates-issuing
    Operation:    Update
    Subresource:  status
    Time:         2023-02-08T20:51:22Z
    API Version:  cert-manager.io/v1
    Fields Type:  FieldsV1
    fieldsV1:
      f:status:
        .:
        f:conditions:
          .:
          k:{"type":"Ready"}:
            .:
            f:lastTransitionTime:
            f:message:
            f:observedGeneration:
            f:reason:
            f:status:
            f:type:
        f:notAfter:
        f:notBefore:
        f:renewalTime:
    Manager:      cert-manager-certificates-readiness
    Operation:    Update
    Subresource:  status
    Time:         2023-02-08T21:02:39Z
  Owner References:
    API Version:           networking.k8s.io/v1
    Block Owner Deletion:  true
    Controller:            true
    Kind:                  Ingress
    Name:                  kuard
    UID:                   efaaf166-e33a-4097-81a9-fa523c437d97
  Resource Version:        11359
  UID:                     35888e65-723a-4022-95d9-02ce93e94bc3
Spec:
  Dns Names:
    serhieiev.site
  Issuer Ref:
    Group:      cert-manager.io
    Kind:       Issuer
    Name:       letsencrypt-prod
  Secret Name:  quickstart-example-tls
  Usages:
    digital signature
    key encipherment
Status:
  Conditions:
    Last Transition Time:  2023-02-08T21:02:39Z
    Message:               Certificate is up to date and has not expired
    Observed Generation:   2
    Reason:                Ready
    Status:                True
    Type:                  Ready
  Not After:               2023-05-09T20:02:38Z
  Not Before:              2023-02-08T20:02:39Z
  Renewal Time:            2023-04-09T20:02:38Z
  Revision:                3
Events:
  Type    Reason     Age                From                                       Message
  ----    ------     ----               ----                                       -------
  Normal  Generated  11m                cert-manager-certificates-key-manager      Stored new private key in temporary Secret resource "quickstart-example-tls-j642k"
  Normal  Requested  11m                cert-manager-certificates-request-manager  Created new CertificateRequest resource "quickstart-example-tls-9dxdt"
  Normal  Requested  60s                cert-manager-certificates-request-manager  Created new CertificateRequest resource "quickstart-example-tls-jjjg4"
  Normal  Issuing    60s                cert-manager-certificates-trigger          Issuing certificate as Secret was previously issued by Issuer.cert-manager.io/letsencrypt-staging
  Normal  Reused     60s                cert-manager-certificates-key-manager      Reusing private key stored in existing Secret resource "quickstart-example-tls"
  Normal  Issuing    14s (x2 over 11m)  cert-manager-certificates-trigger          Issuing certificate as Secret does not exist
  Normal  Generated  14s                cert-manager-certificates-key-manager      Stored new private key in temporary Secret resource "quickstart-example-tls-wqhmh"
  Normal  Requested  14s                cert-manager-certificates-request-manager  Created new CertificateRequest resource "quickstart-example-tls-tr7w6"
  Normal  Issuing    13s (x3 over 11m)  cert-manager-certificates-issuing          The certificate has been successfully issued
serhieiev@k8s:~$ kubectl describe order quickstart-example-tls-tr7w6
Name:         quickstart-example-tls-tr7w6-3861784989
Namespace:    default
Labels:       <none>
Annotations:  cert-manager.io/certificate-name: quickstart-example-tls
              cert-manager.io/certificate-revision: 3
              cert-manager.io/private-key-secret-name: quickstart-example-tls-wqhmh
API Version:  acme.cert-manager.io/v1
Kind:         Order
Metadata:
  Creation Timestamp:  2023-02-08T21:02:38Z
  Generation:          1
  Managed Fields:
    API Version:  acme.cert-manager.io/v1
    Fields Type:  FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .:
          f:cert-manager.io/certificate-name:
          f:cert-manager.io/certificate-revision:
          f:cert-manager.io/private-key-secret-name:
        f:ownerReferences:
          .:
          k:{"uid":"aaa3c213-658f-4666-949c-8c6787ceaf05"}:
      f:spec:
        .:
        f:dnsNames:
        f:issuerRef:
          .:
          f:group:
          f:kind:
          f:name:
        f:request:
    Manager:      cert-manager-certificaterequests-issuer-acme
    Operation:    Update
    Time:         2023-02-08T21:02:38Z
    API Version:  acme.cert-manager.io/v1
    Fields Type:  FieldsV1
    fieldsV1:
      f:status:
        .:
        f:authorizations:
        f:certificate:
        f:finalizeURL:
        f:state:
        f:url:
    Manager:      cert-manager-orders
    Operation:    Update
    Subresource:  status
    Time:         2023-02-08T21:02:39Z
  Owner References:
    API Version:           cert-manager.io/v1
    Block Owner Deletion:  true
    Controller:            true
    Kind:                  CertificateRequest
    Name:                  quickstart-example-tls-tr7w6
    UID:                   aaa3c213-658f-4666-949c-8c6787ceaf05
  Resource Version:        11351
  UID:                     6dc28263-bc14-4d23-9b7e-9ec45920fa6f
Spec:
  Dns Names:
    serhieiev.site
  Issuer Ref:
    Group:  cert-manager.io
    Kind:   Issuer
    Name:   letsencrypt-prod
  Request:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURSBSRVFVRVNULS0tLS0KTUlJQ2ZqQ0NBV1lDQVFBd0FEQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQUt5Nwo5cG52RGc3UXprenkxNG5YWUFjRTErbnRsd1o4YWtzNEczL3FPdGtpc3lGVHlZWEY4RWZMZ1RDY3pHdExDMmVLCiszd0pJcUVLSzhVa3hubkJvemN1QVpabXR2dnlZOXN1a0dpS3ArbTJvRnQzTFpEalp1ZlRONWoxUlpxWG5CTCsKelhqbWRrZ3BydmxENnNZWlJaNlBlN1hMcEpaRXErTXNNMHBzWlRURWt0MVFGWm9INkcvWjVsTXA1bXYvZ3g4bwpwbFdKRW9sL2Q1aXRJdVFDV0oyY3cvNFNwVWdENnJ2Y1A5MG85SktDYWJwYndVTlFBYUVLZ1hLaDRHdnV6dGM3CjcxcTVxL3paYnp4cEEvbVFYbitHNFY5MjdpZHgvczBOWnR1OG1ORzJlZ2ZzUUM1MC8vWENXRktpSUw5UVZ5K1MKVW5iZHg1bllrYlU4NXJ2SGk4OENBd0VBQWFBNU1EY0dDU3FHU0liM0RRRUpEakVxTUNnd0dRWURWUjBSQkJJdwpFSUlPYzJWeWFHbGxhV1YyTG5OcGRHVXdDd1lEVlIwUEJBUURBZ1dnTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCCkFRQkQyN21ZZWptbW5CVytacjBFSE13SVI3YzMrbjVBZ1gzM3M0ZUhvZnpaVFZVWEpFU1NOaEJnYjdYbzdLRFcKdVpLV0RnWDBZdDNrTm4xb1dkNGVaYU9adGZXQTcyNXlISzk4S1hVOTRLb3NyanhDd1hWdmJ3WXlYclpQQ1VHZAp2OU5SdkxoSlZuQ3hCT3FEV2JzTGtxZUVWVmpvVzkyMitJRE1KeE9rdVVTaXN3TFF3SUlTbHRwRmpCcUd6TzhSCjBobk9nOHBwcGxYbHRPbE1la3l6Ym5VVks4LzE4Tk5FbkVjTFJDTzkrYk15WkdMNEVQcDVlSERhektTTVZqN0UKWGp1OVhyMCt4QUcwRGtBNG5NVjdXZHN3NWVydjltcVIwS0prQ3JFYUZRUFV6QTJFcE1SMEpFRS82V3RRYTJUOAorMUFUaFoxQ1dLUUZSVUdWTE5CWVkvdzcKLS0tLS1FTkQgQ0VSVElGSUNBVEUgUkVRVUVTVC0tLS0tCg==
Status:
  Authorizations:
    Challenges:
      Token:        ti9B3UH-t-cI35Am6SFllLtFAQFfiCZQlUx7c3FsdL0
      Type:         http-01
      URL:          https://acme-v02.api.letsencrypt.org/acme/chall-v3/201925084936/GWM69A
    Identifier:     serhieiev.site
    Initial State:  valid
    URL:            https://acme-v02.api.letsencrypt.org/acme/authz-v3/201925084936
    Wildcard:       false
    Certificate:    LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZJekNDQkF1Z0F3SUJB................................
  Finalize URL:     https://acme-v02.api.letsencrypt.org/acme/finalize/955774876/163676816216
  State:            valid
  URL:              https://acme-v02.api.letsencrypt.org/acme/order/955774876/163676816216
Events:
  Type    Reason    Age   From                 Message
  ----    ------    ----  ----                 -------
  Normal  Complete  62s   cert-manager-orders  Order completed successfully

serhieiev@k8s:~$ kubectl describe certificate quickstart-example-tls
Name:         quickstart-example-tls
Namespace:    default
Labels:       <none>
Annotations:  <none>
API Version:  cert-manager.io/v1
Kind:         Certificate
Metadata:
  Creation Timestamp:  2023-02-08T20:50:57Z
  Generation:          2
  Managed Fields:
    API Version:  cert-manager.io/v1
    Fields Type:  FieldsV1
    fieldsV1:
      f:metadata:
        f:ownerReferences:
          .:
          k:{"uid":"efaaf166-e33a-4097-81a9-fa523c437d97"}:
      f:spec:
        .:
        f:dnsNames:
        f:issuerRef:
          .:
          f:group:
          f:kind:
          f:name:
        f:secretName:
        f:usages:
    Manager:      cert-manager-ingress-shim
    Operation:    Update
    Time:         2023-02-08T20:50:57Z
    API Version:  cert-manager.io/v1
    Fields Type:  FieldsV1
    fieldsV1:
      f:status:
        f:revision:
    Manager:      cert-manager-certificates-issuing
    Operation:    Update
    Subresource:  status
    Time:         2023-02-08T20:51:22Z
    API Version:  cert-manager.io/v1
    Fields Type:  FieldsV1
    fieldsV1:
      f:status:
        .:
        f:conditions:
          .:
          k:{"type":"Ready"}:
            .:
            f:lastTransitionTime:
            f:message:
            f:observedGeneration:
            f:reason:
            f:status:
            f:type:
        f:notAfter:
        f:notBefore:
        f:renewalTime:
    Manager:      cert-manager-certificates-readiness
    Operation:    Update
    Subresource:  status
    Time:         2023-02-08T21:02:39Z
  Owner References:
    API Version:           networking.k8s.io/v1
    Block Owner Deletion:  true
    Controller:            true
    Kind:                  Ingress
    Name:                  kuard
    UID:                   efaaf166-e33a-4097-81a9-fa523c437d97
  Resource Version:        11359
  UID:                     35888e65-723a-4022-95d9-02ce93e94bc3
Spec:
  Dns Names:
    serhieiev.site
  Issuer Ref:
    Group:      cert-manager.io
    Kind:       Issuer
    Name:       letsencrypt-prod
  Secret Name:  quickstart-example-tls
  Usages:
    digital signature
    key encipherment
Status:
  Conditions:
    Last Transition Time:  2023-02-08T21:02:39Z
    Message:               Certificate is up to date and has not expired
    Observed Generation:   2
    Reason:                Ready
    Status:                True
    Type:                  Ready
  Not After:               2023-05-09T20:02:38Z
  Not Before:              2023-02-08T20:02:39Z
  Renewal Time:            2023-04-09T20:02:38Z
  Revision:                3
Events:
  Type    Reason     Age                 From                                       Message
  ----    ------     ----                ----                                       -------
  Normal  Generated  18m                 cert-manager-certificates-key-manager      Stored new private key in temporary Secret resource "quickstart-example-tls-j642k"
  Normal  Requested  18m                 cert-manager-certificates-request-manager  Created new CertificateRequest resource "quickstart-example-tls-9dxdt"
  Normal  Requested  7m49s               cert-manager-certificates-request-manager  Created new CertificateRequest resource "quickstart-example-tls-jjjg4"
  Normal  Issuing    7m49s               cert-manager-certificates-trigger          Issuing certificate as Secret was previously issued by Issuer.cert-manager.io/letsencrypt-staging
  Normal  Reused     7m49s               cert-manager-certificates-key-manager      Reusing private key stored in existing Secret resource "quickstart-example-tls"
  Normal  Issuing    7m3s (x2 over 18m)  cert-manager-certificates-trigger          Issuing certificate as Secret does not exist
  Normal  Generated  7m3s                cert-manager-certificates-key-manager      Stored new private key in temporary Secret resource "quickstart-example-tls-wqhmh"
  Normal  Requested  7m3s                cert-manager-certificates-request-manager  Created new CertificateRequest resource "quickstart-example-tls-tr7w6"
  Normal  Issuing    7m2s (x3 over 18m)  cert-manager-certificates-issuing          The certificate has been successfully issued


serhieiev@k8s:~$ kubectl get svc --all-namespaces
NAMESPACE      NAME                                            TYPE           CLUSTER-IP      EXTERNAL-IP   PORT(S)                      AGE
cert-manager   cert-manager                                    ClusterIP      10.233.43.67    <none>        9402/TCP                     109m
cert-manager   cert-manager-webhook                            ClusterIP      10.233.51.244   <none>        443/TCP                      109m
default        kuard                                           ClusterIP      10.233.11.19    <none>        443/TCP                      119m
default        kubernetes                                      ClusterIP      10.233.0.1      <none>        443/TCP                      3h27m
default        quickstart-ingress-nginx-controller             LoadBalancer   10.233.38.116   10.132.0.6    80:31738/TCP,443:31121/TCP   121m
default        quickstart-ingress-nginx-controller-admission   ClusterIP      10.233.26.183   <none>        443/TCP                      121m
kube-system    coredns                                         ClusterIP      10.233.0.3      <none>        53/UDP,53/TCP,9153/TCP       3h23m
serhieiev@k8s:~$ kubectl get ingress
NAME    CLASS    HOSTS            ADDRESS      PORTS     AGE
kuard   <none>   serhieiev.site   10.132.0.6   80, 443   119m